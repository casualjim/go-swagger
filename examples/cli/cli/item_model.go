// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/examples/cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Item

// register flags to command
func registerModelItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerItemCompleted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerItemDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerItemID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerItemCompleted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	CompletedDescription := ``

	var CompletedFlagName string
	if cmdPrefix == "" {
		CompletedFlagName = "completed"
	} else {
		CompletedFlagName = fmt.Sprintf("%v.completed", cmdPrefix)
	}

	var CompletedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(CompletedFlagName, CompletedFlagDefault, CompletedDescription)

	return nil
}

func registerItemDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	DescriptionDescription := `Required. `

	var DescriptionFlagName string
	if cmdPrefix == "" {
		DescriptionFlagName = "description"
	} else {
		DescriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var DescriptionFlagDefault string

	_ = cmd.PersistentFlags().String(DescriptionFlagName, DescriptionFlagDefault, DescriptionDescription)

	return nil
}

func registerItemID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	IDDescription := ``

	var IDFlagName string
	if cmdPrefix == "" {
		IDFlagName = "id"
	} else {
		IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var IDFlagDefault int64

	_ = cmd.PersistentFlags().Int64(IDFlagName, IDFlagDefault, IDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelItemFlags(depth int, m *models.Item, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CompletedAdded := retrieveItemCompletedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompletedAdded

	err, DescriptionAdded := retrieveItemDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, IDAdded := retrieveItemIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	return nil, retAdded
}

func retrieveItemCompletedFlags(depth int, m *models.Item, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	CompletedFlagName := fmt.Sprintf("%v.completed", cmdPrefix)
	if cmd.Flags().Changed(CompletedFlagName) {

		var CompletedFlagName string
		if cmdPrefix == "" {
			CompletedFlagName = "completed"
		} else {
			CompletedFlagName = fmt.Sprintf("%v.completed", cmdPrefix)
		}

		CompletedFlagValue, err := cmd.Flags().GetBool(CompletedFlagName)
		if err != nil {
			return err, false
		}
		m.Completed = CompletedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveItemDescriptionFlags(depth int, m *models.Item, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	DescriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(DescriptionFlagName) {

		var DescriptionFlagName string
		if cmdPrefix == "" {
			DescriptionFlagName = "description"
		} else {
			DescriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		DescriptionFlagValue, err := cmd.Flags().GetString(DescriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &DescriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveItemIDFlags(depth int, m *models.Item, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	IDFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(IDFlagName) {

		var IDFlagName string
		if cmdPrefix == "" {
			IDFlagName = "id"
		} else {
			IDFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		IDFlagValue, err := cmd.Flags().GetInt64(IDFlagName)
		if err != nil {
			return err, false
		}
		m.ID = IDFlagValue

		retAdded = true
	}

	return nil, retAdded
}
