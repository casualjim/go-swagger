// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/client/client.gotmpl (5.125kB)
// templates/client/facade.gotmpl (3.83kB)
// templates/client/parameter.gotmpl (12.261kB)
// templates/client/response.gotmpl (6.363kB)
// templates/contrib/stratoscale/client/client.gotmpl (3.591kB)
// templates/contrib/stratoscale/client/facade.gotmpl (2.078kB)
// templates/contrib/stratoscale/server/configureapi.gotmpl (7.309kB)
// templates/contrib/stratoscale/server/server.gotmpl (236B)
// templates/docstring.gotmpl (337B)
// templates/header.gotmpl (432B)
// templates/model.gotmpl (700B)
// templates/schema.gotmpl (6.259kB)
// templates/schemabody.gotmpl (14.007kB)
// templates/schemaembedded.gotmpl (1.006kB)
// templates/schemapolymorphic.gotmpl (2.125kB)
// templates/schematype.gotmpl (965B)
// templates/schemavalidator.gotmpl (50.599kB)
// templates/serializers/additionalpropertiesserializer.gotmpl (2.824kB)
// templates/serializers/aliasedserializer.gotmpl (480B)
// templates/serializers/allofserializer.gotmpl (7.467kB)
// templates/serializers/basetypeserializer.gotmpl (2.894kB)
// templates/serializers/marshalbinaryserializer.gotmpl (550B)
// templates/serializers/schemaserializer.gotmpl (679B)
// templates/serializers/subtypeserializer.gotmpl (6.461kB)
// templates/serializers/tupleserializer.gotmpl (2.34kB)
// templates/server/builder.gotmpl (18.852kB)
// templates/server/configureapi.gotmpl (6.979kB)
// templates/server/doc.gotmpl (1.52kB)
// templates/server/main.gotmpl (6.138kB)
// templates/server/operation.gotmpl (3.751kB)
// templates/server/parameter.gotmpl (28.888kB)
// templates/server/responses.gotmpl (12.037kB)
// templates/server/server.gotmpl (23.073kB)
// templates/server/urlbuilder.gotmpl (7.641kB)
// templates/structfield.gotmpl (1.965kB)
// templates/swagger_json_embed.gotmpl (759B)
// templates/validation/customformat.gotmpl (473B)
// templates/validation/primitive.gotmpl (2.225kB)
// templates/validation/structfield.gotmpl (909B)

package generator

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %w", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

// templatesClientClientGotmpl reads file data from disk. It returns an error on failure.
func templatesClientClientGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/client/client.gotmpl"
	name := "templates/client/client.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesClientFacadeGotmpl reads file data from disk. It returns an error on failure.
func templatesClientFacadeGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/client/facade.gotmpl"
	name := "templates/client/facade.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesClientParameterGotmpl reads file data from disk. It returns an error on failure.
func templatesClientParameterGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/client/parameter.gotmpl"
	name := "templates/client/parameter.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesClientResponseGotmpl reads file data from disk. It returns an error on failure.
func templatesClientResponseGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/client/response.gotmpl"
	name := "templates/client/response.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesContribStratoscaleClientClientGotmpl reads file data from disk. It returns an error on failure.
func templatesContribStratoscaleClientClientGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/contrib/stratoscale/client/client.gotmpl"
	name := "templates/contrib/stratoscale/client/client.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesContribStratoscaleClientFacadeGotmpl reads file data from disk. It returns an error on failure.
func templatesContribStratoscaleClientFacadeGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/contrib/stratoscale/client/facade.gotmpl"
	name := "templates/contrib/stratoscale/client/facade.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesContribStratoscaleServerConfigureapiGotmpl reads file data from disk. It returns an error on failure.
func templatesContribStratoscaleServerConfigureapiGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/contrib/stratoscale/server/configureapi.gotmpl"
	name := "templates/contrib/stratoscale/server/configureapi.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesContribStratoscaleServerServerGotmpl reads file data from disk. It returns an error on failure.
func templatesContribStratoscaleServerServerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/contrib/stratoscale/server/server.gotmpl"
	name := "templates/contrib/stratoscale/server/server.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesDocstringGotmpl reads file data from disk. It returns an error on failure.
func templatesDocstringGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/docstring.gotmpl"
	name := "templates/docstring.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesHeaderGotmpl reads file data from disk. It returns an error on failure.
func templatesHeaderGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/header.gotmpl"
	name := "templates/header.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesModelGotmpl reads file data from disk. It returns an error on failure.
func templatesModelGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/model.gotmpl"
	name := "templates/model.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSchemaGotmpl reads file data from disk. It returns an error on failure.
func templatesSchemaGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/schema.gotmpl"
	name := "templates/schema.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSchemabodyGotmpl reads file data from disk. It returns an error on failure.
func templatesSchemabodyGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/schemabody.gotmpl"
	name := "templates/schemabody.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSchemaembeddedGotmpl reads file data from disk. It returns an error on failure.
func templatesSchemaembeddedGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/schemaembedded.gotmpl"
	name := "templates/schemaembedded.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSchemapolymorphicGotmpl reads file data from disk. It returns an error on failure.
func templatesSchemapolymorphicGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/schemapolymorphic.gotmpl"
	name := "templates/schemapolymorphic.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSchematypeGotmpl reads file data from disk. It returns an error on failure.
func templatesSchematypeGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/schematype.gotmpl"
	name := "templates/schematype.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSchemavalidatorGotmpl reads file data from disk. It returns an error on failure.
func templatesSchemavalidatorGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/schemavalidator.gotmpl"
	name := "templates/schemavalidator.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersAdditionalpropertiesserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersAdditionalpropertiesserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/additionalpropertiesserializer.gotmpl"
	name := "templates/serializers/additionalpropertiesserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersAliasedserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersAliasedserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/aliasedserializer.gotmpl"
	name := "templates/serializers/aliasedserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersAllofserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersAllofserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/allofserializer.gotmpl"
	name := "templates/serializers/allofserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersBasetypeserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersBasetypeserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/basetypeserializer.gotmpl"
	name := "templates/serializers/basetypeserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersMarshalbinaryserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersMarshalbinaryserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/marshalbinaryserializer.gotmpl"
	name := "templates/serializers/marshalbinaryserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersSchemaserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersSchemaserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/schemaserializer.gotmpl"
	name := "templates/serializers/schemaserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersSubtypeserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersSubtypeserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/subtypeserializer.gotmpl"
	name := "templates/serializers/subtypeserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSerializersTupleserializerGotmpl reads file data from disk. It returns an error on failure.
func templatesSerializersTupleserializerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/serializers/tupleserializer.gotmpl"
	name := "templates/serializers/tupleserializer.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerBuilderGotmpl reads file data from disk. It returns an error on failure.
func templatesServerBuilderGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/builder.gotmpl"
	name := "templates/server/builder.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerConfigureapiGotmpl reads file data from disk. It returns an error on failure.
func templatesServerConfigureapiGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/configureapi.gotmpl"
	name := "templates/server/configureapi.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerDocGotmpl reads file data from disk. It returns an error on failure.
func templatesServerDocGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/doc.gotmpl"
	name := "templates/server/doc.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerMainGotmpl reads file data from disk. It returns an error on failure.
func templatesServerMainGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/main.gotmpl"
	name := "templates/server/main.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerOperationGotmpl reads file data from disk. It returns an error on failure.
func templatesServerOperationGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/operation.gotmpl"
	name := "templates/server/operation.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerParameterGotmpl reads file data from disk. It returns an error on failure.
func templatesServerParameterGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/parameter.gotmpl"
	name := "templates/server/parameter.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerResponsesGotmpl reads file data from disk. It returns an error on failure.
func templatesServerResponsesGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/responses.gotmpl"
	name := "templates/server/responses.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerServerGotmpl reads file data from disk. It returns an error on failure.
func templatesServerServerGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/server.gotmpl"
	name := "templates/server/server.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesServerUrlbuilderGotmpl reads file data from disk. It returns an error on failure.
func templatesServerUrlbuilderGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/server/urlbuilder.gotmpl"
	name := "templates/server/urlbuilder.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesStructfieldGotmpl reads file data from disk. It returns an error on failure.
func templatesStructfieldGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/structfield.gotmpl"
	name := "templates/structfield.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSwagger_json_embedGotmpl reads file data from disk. It returns an error on failure.
func templatesSwagger_json_embedGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/swagger_json_embed.gotmpl"
	name := "templates/swagger_json_embed.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesValidationCustomformatGotmpl reads file data from disk. It returns an error on failure.
func templatesValidationCustomformatGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/validation/customformat.gotmpl"
	name := "templates/validation/customformat.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesValidationPrimitiveGotmpl reads file data from disk. It returns an error on failure.
func templatesValidationPrimitiveGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/validation/primitive.gotmpl"
	name := "templates/validation/primitive.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesValidationStructfieldGotmpl reads file data from disk. It returns an error on failure.
func templatesValidationStructfieldGotmpl() (*asset, error) {
	path := "/home/simon/projects/go-swagger/generator/templates/validation/structfield.gotmpl"
	name := "templates/validation/structfield.gotmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/client/client.gotmpl":                              templatesClientClientGotmpl,
	"templates/client/facade.gotmpl":                              templatesClientFacadeGotmpl,
	"templates/client/parameter.gotmpl":                           templatesClientParameterGotmpl,
	"templates/client/response.gotmpl":                            templatesClientResponseGotmpl,
	"templates/contrib/stratoscale/client/client.gotmpl":          templatesContribStratoscaleClientClientGotmpl,
	"templates/contrib/stratoscale/client/facade.gotmpl":          templatesContribStratoscaleClientFacadeGotmpl,
	"templates/contrib/stratoscale/server/configureapi.gotmpl":    templatesContribStratoscaleServerConfigureapiGotmpl,
	"templates/contrib/stratoscale/server/server.gotmpl":          templatesContribStratoscaleServerServerGotmpl,
	"templates/docstring.gotmpl":                                  templatesDocstringGotmpl,
	"templates/header.gotmpl":                                     templatesHeaderGotmpl,
	"templates/model.gotmpl":                                      templatesModelGotmpl,
	"templates/schema.gotmpl":                                     templatesSchemaGotmpl,
	"templates/schemabody.gotmpl":                                 templatesSchemabodyGotmpl,
	"templates/schemaembedded.gotmpl":                             templatesSchemaembeddedGotmpl,
	"templates/schemapolymorphic.gotmpl":                          templatesSchemapolymorphicGotmpl,
	"templates/schematype.gotmpl":                                 templatesSchematypeGotmpl,
	"templates/schemavalidator.gotmpl":                            templatesSchemavalidatorGotmpl,
	"templates/serializers/additionalpropertiesserializer.gotmpl": templatesSerializersAdditionalpropertiesserializerGotmpl,
	"templates/serializers/aliasedserializer.gotmpl":              templatesSerializersAliasedserializerGotmpl,
	"templates/serializers/allofserializer.gotmpl":                templatesSerializersAllofserializerGotmpl,
	"templates/serializers/basetypeserializer.gotmpl":             templatesSerializersBasetypeserializerGotmpl,
	"templates/serializers/marshalbinaryserializer.gotmpl":        templatesSerializersMarshalbinaryserializerGotmpl,
	"templates/serializers/schemaserializer.gotmpl":               templatesSerializersSchemaserializerGotmpl,
	"templates/serializers/subtypeserializer.gotmpl":              templatesSerializersSubtypeserializerGotmpl,
	"templates/serializers/tupleserializer.gotmpl":                templatesSerializersTupleserializerGotmpl,
	"templates/server/builder.gotmpl":                             templatesServerBuilderGotmpl,
	"templates/server/configureapi.gotmpl":                        templatesServerConfigureapiGotmpl,
	"templates/server/doc.gotmpl":                                 templatesServerDocGotmpl,
	"templates/server/main.gotmpl":                                templatesServerMainGotmpl,
	"templates/server/operation.gotmpl":                           templatesServerOperationGotmpl,
	"templates/server/parameter.gotmpl":                           templatesServerParameterGotmpl,
	"templates/server/responses.gotmpl":                           templatesServerResponsesGotmpl,
	"templates/server/server.gotmpl":                              templatesServerServerGotmpl,
	"templates/server/urlbuilder.gotmpl":                          templatesServerUrlbuilderGotmpl,
	"templates/structfield.gotmpl":                                templatesStructfieldGotmpl,
	"templates/swagger_json_embed.gotmpl":                         templatesSwagger_json_embedGotmpl,
	"templates/validation/customformat.gotmpl":                    templatesValidationCustomformatGotmpl,
	"templates/validation/primitive.gotmpl":                       templatesValidationPrimitiveGotmpl,
	"templates/validation/structfield.gotmpl":                     templatesValidationStructfieldGotmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = true

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"client": {nil, map[string]*bintree{
			"client.gotmpl": {templatesClientClientGotmpl, map[string]*bintree{}},
			"facade.gotmpl": {templatesClientFacadeGotmpl, map[string]*bintree{}},
			"parameter.gotmpl": {templatesClientParameterGotmpl, map[string]*bintree{}},
			"response.gotmpl": {templatesClientResponseGotmpl, map[string]*bintree{}},
		}},
		"contrib": {nil, map[string]*bintree{
			"stratoscale": {nil, map[string]*bintree{
				"client": {nil, map[string]*bintree{
					"client.gotmpl": {templatesContribStratoscaleClientClientGotmpl, map[string]*bintree{}},
					"facade.gotmpl": {templatesContribStratoscaleClientFacadeGotmpl, map[string]*bintree{}},
				}},
				"server": {nil, map[string]*bintree{
					"configureapi.gotmpl": {templatesContribStratoscaleServerConfigureapiGotmpl, map[string]*bintree{}},
					"server.gotmpl": {templatesContribStratoscaleServerServerGotmpl, map[string]*bintree{}},
				}},
			}},
		}},
		"docstring.gotmpl": {templatesDocstringGotmpl, map[string]*bintree{}},
		"header.gotmpl": {templatesHeaderGotmpl, map[string]*bintree{}},
		"model.gotmpl": {templatesModelGotmpl, map[string]*bintree{}},
		"schema.gotmpl": {templatesSchemaGotmpl, map[string]*bintree{}},
		"schemabody.gotmpl": {templatesSchemabodyGotmpl, map[string]*bintree{}},
		"schemaembedded.gotmpl": {templatesSchemaembeddedGotmpl, map[string]*bintree{}},
		"schemapolymorphic.gotmpl": {templatesSchemapolymorphicGotmpl, map[string]*bintree{}},
		"schematype.gotmpl": {templatesSchematypeGotmpl, map[string]*bintree{}},
		"schemavalidator.gotmpl": {templatesSchemavalidatorGotmpl, map[string]*bintree{}},
		"serializers": {nil, map[string]*bintree{
			"additionalpropertiesserializer.gotmpl": {templatesSerializersAdditionalpropertiesserializerGotmpl, map[string]*bintree{}},
			"aliasedserializer.gotmpl": {templatesSerializersAliasedserializerGotmpl, map[string]*bintree{}},
			"allofserializer.gotmpl": {templatesSerializersAllofserializerGotmpl, map[string]*bintree{}},
			"basetypeserializer.gotmpl": {templatesSerializersBasetypeserializerGotmpl, map[string]*bintree{}},
			"marshalbinaryserializer.gotmpl": {templatesSerializersMarshalbinaryserializerGotmpl, map[string]*bintree{}},
			"schemaserializer.gotmpl": {templatesSerializersSchemaserializerGotmpl, map[string]*bintree{}},
			"subtypeserializer.gotmpl": {templatesSerializersSubtypeserializerGotmpl, map[string]*bintree{}},
			"tupleserializer.gotmpl": {templatesSerializersTupleserializerGotmpl, map[string]*bintree{}},
		}},
		"server": {nil, map[string]*bintree{
			"builder.gotmpl": {templatesServerBuilderGotmpl, map[string]*bintree{}},
			"configureapi.gotmpl": {templatesServerConfigureapiGotmpl, map[string]*bintree{}},
			"doc.gotmpl": {templatesServerDocGotmpl, map[string]*bintree{}},
			"main.gotmpl": {templatesServerMainGotmpl, map[string]*bintree{}},
			"operation.gotmpl": {templatesServerOperationGotmpl, map[string]*bintree{}},
			"parameter.gotmpl": {templatesServerParameterGotmpl, map[string]*bintree{}},
			"responses.gotmpl": {templatesServerResponsesGotmpl, map[string]*bintree{}},
			"server.gotmpl": {templatesServerServerGotmpl, map[string]*bintree{}},
			"urlbuilder.gotmpl": {templatesServerUrlbuilderGotmpl, map[string]*bintree{}},
		}},
		"structfield.gotmpl": {templatesStructfieldGotmpl, map[string]*bintree{}},
		"swagger_json_embed.gotmpl": {templatesSwagger_json_embedGotmpl, map[string]*bintree{}},
		"validation": {nil, map[string]*bintree{
			"customformat.gotmpl": {templatesValidationCustomformatGotmpl, map[string]*bintree{}},
			"primitive.gotmpl": {templatesValidationPrimitiveGotmpl, map[string]*bintree{}},
			"structfield.gotmpl": {templatesValidationStructfieldGotmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
