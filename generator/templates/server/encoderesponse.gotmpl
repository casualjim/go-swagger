{{ $packageName := .packageName }}
{{ $responseName := .responseName }}
{{ $receiverName := .receiverName }}
{{- with .response -}}
case *{{ if ne .Package $packageName }}{{ .Package }}.{{ end }}{{ pascalize .Name }}:
    {{- with .Schema }}
        {{- if and .IsPrimitive (not .IsCustomFormatter) -}}
            payload := {{ if .IsNullable }}*{{ end }}resp.Payload
        {{- else if .IsArray -}}
        {{- with .ElemType -}}
            {{- if and .IsPrimitive (not .IsCustomFormatter) -}}
            payload := {{ if .IsNullable }}*{{ end }}resp.Payload
            {{- else -}}
            var payload []*pb.{{ .PbType }}

            for _, item := range resp.Payload {
                payload = append(payload, {{ $receiverName }}.Encode(item).(*pb.{{ .PbType }}))
            }
            {{- end -}}
        {{- end -}}
        {{- else -}}
            payload := {{ $receiverName }}.Encode(resp.Payload).(*pb.{{ .PbType }})
        {{- end }}
    {{ end }}
        return &pb.{{ $responseName }} {
            &pb.{{ $responseName }}_{{ pascalize .Name  }} {
                &pb.{{ pascalize .Name  }}{
                    {{ with .Schema }}payload,{{ end }}
                },
            },
        }, nil
{{- end -}}
