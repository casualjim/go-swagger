// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteTodosTodoIDHandlerFunc turns a function with the right signature into a delete todos todo ID handler
type DeleteTodosTodoIDHandlerFunc func(DeleteTodosTodoIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTodosTodoIDHandlerFunc) Handle(params DeleteTodosTodoIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteTodosTodoIDHandler interface for that can handle valid delete todos todo ID params
type DeleteTodosTodoIDHandler interface {
	Handle(DeleteTodosTodoIDParams, interface{}) middleware.Responder
}

// NewDeleteTodosTodoID creates a new http.Handler for the delete todos todo ID operation
func NewDeleteTodosTodoID(ctx *middleware.Context, handler DeleteTodosTodoIDHandler) *DeleteTodosTodoID {
	return &DeleteTodosTodoID{Context: ctx, Handler: handler}
}

/*
	DeleteTodosTodoID swagger:route DELETE /todos/{todoId} Todos deleteTodosTodoId

Delete Todo
*/
type DeleteTodosTodoID struct {
	Context *middleware.Context
	Handler DeleteTodosTodoIDHandler
}

func (o *DeleteTodosTodoID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteTodosTodoIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
