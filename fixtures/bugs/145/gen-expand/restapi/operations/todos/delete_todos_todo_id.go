// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteTodosTodoIDHandlerFunc turns a function with the right signature into a delete todos todo ID handler
type DeleteTodosTodoIDHandlerFunc func(DeleteTodosTodoIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTodosTodoIDHandlerFunc) Handle(params DeleteTodosTodoIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteTodosTodoIDHandler interface for that can handle valid delete todos todo ID params
type DeleteTodosTodoIDHandler interface {
	Handle(DeleteTodosTodoIDParams, interface{}) middleware.Responder
}

// NewDeleteTodosTodoID creates a new http.Handler for the delete todos todo ID operation
func NewDeleteTodosTodoID(ctx *middleware.Context, handler DeleteTodosTodoIDHandler) *DeleteTodosTodoID {
	return &DeleteTodosTodoID{Context: ctx, Handler: handler}
}

/*
	DeleteTodosTodoID swagger:route DELETE /todos/{todoId} Todos deleteTodosTodoId

Delete Todo
*/
type DeleteTodosTodoID struct {
	Context *middleware.Context
	Handler DeleteTodosTodoIDHandler
}

func (o *DeleteTodosTodoID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteTodosTodoIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteTodosTodoIDInternalServerErrorBody Error Response
//
// swagger:model DeleteTodosTodoIDInternalServerErrorBody
type DeleteTodosTodoIDInternalServerErrorBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this delete todos todo ID internal server error body
func (o *DeleteTodosTodoIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTodosTodoIDInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodosTodoIdInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *DeleteTodosTodoIDInternalServerErrorBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodosTodoIdInternalServerError"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete todos todo ID internal server error body based on context it is used
func (o *DeleteTodosTodoIDInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTodosTodoIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTodosTodoIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteTodosTodoIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteTodosTodoIDNotFoundBody Error Response
//
// swagger:model DeleteTodosTodoIDNotFoundBody
type DeleteTodosTodoIDNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this delete todos todo ID not found body
func (o *DeleteTodosTodoIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTodosTodoIDNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodosTodoIdNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *DeleteTodosTodoIDNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodosTodoIdNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete todos todo ID not found body based on context it is used
func (o *DeleteTodosTodoIDNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTodosTodoIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTodosTodoIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteTodosTodoIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteTodosTodoIDUnauthorizedBody Error Response
//
// swagger:model DeleteTodosTodoIDUnauthorizedBody
type DeleteTodosTodoIDUnauthorizedBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this delete todos todo ID unauthorized body
func (o *DeleteTodosTodoIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteTodosTodoIDUnauthorizedBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodosTodoIdUnauthorized"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *DeleteTodosTodoIDUnauthorizedBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("deleteTodosTodoIdUnauthorized"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delete todos todo ID unauthorized body based on context it is used
func (o *DeleteTodosTodoIDUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteTodosTodoIDUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteTodosTodoIDUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res DeleteTodosTodoIDUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
