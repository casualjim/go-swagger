// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTodosTodoIDHandlerFunc turns a function with the right signature into a get todos todo ID handler
type GetTodosTodoIDHandlerFunc func(GetTodosTodoIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTodosTodoIDHandlerFunc) Handle(params GetTodosTodoIDParams) middleware.Responder {
	return fn(params)
}

// GetTodosTodoIDHandler interface for that can handle valid get todos todo ID params
type GetTodosTodoIDHandler interface {
	Handle(GetTodosTodoIDParams) middleware.Responder
}

// NewGetTodosTodoID creates a new http.Handler for the get todos todo ID operation
func NewGetTodosTodoID(ctx *middleware.Context, handler GetTodosTodoIDHandler) *GetTodosTodoID {
	return &GetTodosTodoID{Context: ctx, Handler: handler}
}

/*
	GetTodosTodoID swagger:route GET /todos/{todoId} Todos getTodosTodoId

Get Todo
*/
type GetTodosTodoID struct {
	Context *middleware.Context
	Handler GetTodosTodoIDHandler
}

func (o *GetTodosTodoID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTodosTodoIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTodosTodoIDInternalServerErrorBody Error Response
//
// swagger:model GetTodosTodoIDInternalServerErrorBody
type GetTodosTodoIDInternalServerErrorBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this get todos todo ID internal server error body
func (o *GetTodosTodoIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodosTodoIDInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDInternalServerErrorBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdInternalServerError"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get todos todo ID internal server error body based on context it is used
func (o *GetTodosTodoIDInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTodosTodoIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTodosTodoIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetTodosTodoIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTodosTodoIDNotFoundBody Error Response
//
// swagger:model GetTodosTodoIDNotFoundBody
type GetTodosTodoIDNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this get todos todo ID not found body
func (o *GetTodosTodoIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodosTodoIDNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get todos todo ID not found body based on context it is used
func (o *GetTodosTodoIDNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTodosTodoIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTodosTodoIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetTodosTodoIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTodosTodoIDOKBody Todo Full
//
// swagger:model GetTodosTodoIDOKBody
type GetTodosTodoIDOKBody struct {

	// completed
	// Required: true
	Completed *bool `json:"completed"`

	// name
	// Required: true
	Name *string `json:"name"`

	// completed at
	// Format: date-time
	CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// id
	// Required: true
	// Maximum: 1e+06
	// Minimum: 0
	ID *int64 `json:"id"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// user
	// Required: true
	User *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User `json:"user"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetTodosTodoIDOKBody) UnmarshalJSON(raw []byte) error {
	// GetTodosTodoIDOKBodyAO0
	var dataGetTodosTodoIDOKBodyAO0 struct {
		Completed *bool `json:"completed"`

		Name *string `json:"name"`
	}
	if err := swag.ReadJSON(raw, &dataGetTodosTodoIDOKBodyAO0); err != nil {
		return err
	}

	o.Completed = dataGetTodosTodoIDOKBodyAO0.Completed

	o.Name = dataGetTodosTodoIDOKBodyAO0.Name

	// GetTodosTodoIDOKBodyAO1
	var dataGetTodosTodoIDOKBodyAO1 struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID *int64 `json:"id"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

		User *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User `json:"user"`
	}
	if err := swag.ReadJSON(raw, &dataGetTodosTodoIDOKBodyAO1); err != nil {
		return err
	}

	o.CompletedAt = dataGetTodosTodoIDOKBodyAO1.CompletedAt

	o.CreatedAt = dataGetTodosTodoIDOKBodyAO1.CreatedAt

	o.ID = dataGetTodosTodoIDOKBodyAO1.ID

	o.UpdatedAt = dataGetTodosTodoIDOKBodyAO1.UpdatedAt

	o.User = dataGetTodosTodoIDOKBodyAO1.User

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetTodosTodoIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataGetTodosTodoIDOKBodyAO0 struct {
		Completed *bool `json:"completed"`

		Name *string `json:"name"`
	}

	dataGetTodosTodoIDOKBodyAO0.Completed = o.Completed

	dataGetTodosTodoIDOKBodyAO0.Name = o.Name

	jsonDataGetTodosTodoIDOKBodyAO0, errGetTodosTodoIDOKBodyAO0 := swag.WriteJSON(dataGetTodosTodoIDOKBodyAO0)
	if errGetTodosTodoIDOKBodyAO0 != nil {
		return nil, errGetTodosTodoIDOKBodyAO0
	}
	_parts = append(_parts, jsonDataGetTodosTodoIDOKBodyAO0)
	var dataGetTodosTodoIDOKBodyAO1 struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID *int64 `json:"id"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

		User *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User `json:"user"`
	}

	dataGetTodosTodoIDOKBodyAO1.CompletedAt = o.CompletedAt

	dataGetTodosTodoIDOKBodyAO1.CreatedAt = o.CreatedAt

	dataGetTodosTodoIDOKBodyAO1.ID = o.ID

	dataGetTodosTodoIDOKBodyAO1.UpdatedAt = o.UpdatedAt

	dataGetTodosTodoIDOKBodyAO1.User = o.User

	jsonDataGetTodosTodoIDOKBodyAO1, errGetTodosTodoIDOKBodyAO1 := swag.WriteJSON(dataGetTodosTodoIDOKBodyAO1)
	if errGetTodosTodoIDOKBodyAO1 != nil {
		return nil, errGetTodosTodoIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetTodosTodoIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get todos todo ID o k body
func (o *GetTodosTodoIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodosTodoIDOKBody) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"completed", "body", o.Completed); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBody) validateCompletedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getTodosTodoIdOK"+"."+"completed_at", "body", "date-time", o.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getTodosTodoIdOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("getTodosTodoIdOK"+"."+"id", "body", *o.ID, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("getTodosTodoIdOK"+"."+"id", "body", *o.ID, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getTodosTodoIdOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTodosTodoIdOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTodosTodoIdOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get todos todo ID o k body based on the context it is used
func (o *GetTodosTodoIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodosTodoIDOKBody) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if o.User != nil {

		if err := o.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTodosTodoIdOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTodosTodoIdOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTodosTodoIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTodosTodoIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetTodosTodoIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User User
//
// swagger:model GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User
type GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User struct {

	// age
	// Required: true
	// Maximum: 150
	// Minimum: 0
	Age *float64 `json:"age"`

	// error
	Error *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError `json:"error,omitempty"`

	// The user's full name.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this get todos todo ID o k body get todos todo ID o k body a o1 user
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAge(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) validateAge(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"user"+"."+"age", "body", o.Age); err != nil {
		return err
	}

	if err := validate.Minimum("getTodosTodoIdOK"+"."+"user"+"."+"age", "body", *o.Age, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("getTodosTodoIdOK"+"."+"user"+"."+"age", "body", *o.Age, 150, false); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTodosTodoIdOK" + "." + "user" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTodosTodoIdOK" + "." + "user" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"user"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get todos todo ID o k body get todos todo ID o k body a o1 user based on the context it is used
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTodosTodoIdOK" + "." + "user" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTodosTodoIdOK" + "." + "user" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User) UnmarshalBinary(b []byte) error {
	var res GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError Error Response
//
// swagger:model GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError
type GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this get todos todo ID o k body get todos todo ID o k body a o1 user error
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError) validateError(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"user"+"."+"error"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("getTodosTodoIdOK"+"."+"user"+"."+"error"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get todos todo ID o k body get todos todo ID o k body a o1 user error based on context it is used
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError) UnmarshalBinary(b []byte) error {
	var res GetTodosTodoIDOKBodyGetTodosTodoIDOKBodyAO1UserError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
