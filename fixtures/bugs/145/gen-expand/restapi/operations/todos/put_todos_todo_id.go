// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutTodosTodoIDHandlerFunc turns a function with the right signature into a put todos todo ID handler
type PutTodosTodoIDHandlerFunc func(PutTodosTodoIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTodosTodoIDHandlerFunc) Handle(params PutTodosTodoIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutTodosTodoIDHandler interface for that can handle valid put todos todo ID params
type PutTodosTodoIDHandler interface {
	Handle(PutTodosTodoIDParams, interface{}) middleware.Responder
}

// NewPutTodosTodoID creates a new http.Handler for the put todos todo ID operation
func NewPutTodosTodoID(ctx *middleware.Context, handler PutTodosTodoIDHandler) *PutTodosTodoID {
	return &PutTodosTodoID{Context: ctx, Handler: handler}
}

/*
	PutTodosTodoID swagger:route PUT /todos/{todoId} Todos putTodosTodoId

Update Todo
*/
type PutTodosTodoID struct {
	Context *middleware.Context
	Handler PutTodosTodoIDHandler
}

func (o *PutTodosTodoID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTodosTodoIDParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutTodosTodoIDBody Todo Partial
//
// swagger:model PutTodosTodoIDBody
type PutTodosTodoIDBody struct {

	// completed
	// Required: true
	Completed *bool `json:"completed"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this put todos todo ID body
func (o *PutTodosTodoIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDBody) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"completed", "body", o.Completed); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put todos todo ID body based on context it is used
func (o *PutTodosTodoIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTodosTodoIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodosTodoIDBody) UnmarshalBinary(b []byte) error {
	var res PutTodosTodoIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTodosTodoIDInternalServerErrorBody Error Response
//
// swagger:model PutTodosTodoIDInternalServerErrorBody
type PutTodosTodoIDInternalServerErrorBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this put todos todo ID internal server error body
func (o *PutTodosTodoIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDInternalServerErrorBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdInternalServerError"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDInternalServerErrorBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdInternalServerError"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put todos todo ID internal server error body based on context it is used
func (o *PutTodosTodoIDInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTodosTodoIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodosTodoIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutTodosTodoIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTodosTodoIDNotFoundBody Error Response
//
// swagger:model PutTodosTodoIDNotFoundBody
type PutTodosTodoIDNotFoundBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this put todos todo ID not found body
func (o *PutTodosTodoIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDNotFoundBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdNotFound"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDNotFoundBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdNotFound"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put todos todo ID not found body based on context it is used
func (o *PutTodosTodoIDNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTodosTodoIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodosTodoIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutTodosTodoIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTodosTodoIDOKBody Todo Full
//
// swagger:model PutTodosTodoIDOKBody
type PutTodosTodoIDOKBody struct {

	// completed
	// Required: true
	Completed *bool `json:"completed"`

	// name
	// Required: true
	Name *string `json:"name"`

	// completed at
	// Format: date-time
	CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// id
	// Required: true
	// Maximum: 1e+06
	// Minimum: 0
	ID *int64 `json:"id"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// user
	// Required: true
	User *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User `json:"user"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutTodosTodoIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutTodosTodoIDOKBodyAO0
	var dataPutTodosTodoIDOKBodyAO0 struct {
		Completed *bool `json:"completed"`

		Name *string `json:"name"`
	}
	if err := swag.ReadJSON(raw, &dataPutTodosTodoIDOKBodyAO0); err != nil {
		return err
	}

	o.Completed = dataPutTodosTodoIDOKBodyAO0.Completed

	o.Name = dataPutTodosTodoIDOKBodyAO0.Name

	// PutTodosTodoIDOKBodyAO1
	var dataPutTodosTodoIDOKBodyAO1 struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID *int64 `json:"id"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

		User *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User `json:"user"`
	}
	if err := swag.ReadJSON(raw, &dataPutTodosTodoIDOKBodyAO1); err != nil {
		return err
	}

	o.CompletedAt = dataPutTodosTodoIDOKBodyAO1.CompletedAt

	o.CreatedAt = dataPutTodosTodoIDOKBodyAO1.CreatedAt

	o.ID = dataPutTodosTodoIDOKBodyAO1.ID

	o.UpdatedAt = dataPutTodosTodoIDOKBodyAO1.UpdatedAt

	o.User = dataPutTodosTodoIDOKBodyAO1.User

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutTodosTodoIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataPutTodosTodoIDOKBodyAO0 struct {
		Completed *bool `json:"completed"`

		Name *string `json:"name"`
	}

	dataPutTodosTodoIDOKBodyAO0.Completed = o.Completed

	dataPutTodosTodoIDOKBodyAO0.Name = o.Name

	jsonDataPutTodosTodoIDOKBodyAO0, errPutTodosTodoIDOKBodyAO0 := swag.WriteJSON(dataPutTodosTodoIDOKBodyAO0)
	if errPutTodosTodoIDOKBodyAO0 != nil {
		return nil, errPutTodosTodoIDOKBodyAO0
	}
	_parts = append(_parts, jsonDataPutTodosTodoIDOKBodyAO0)
	var dataPutTodosTodoIDOKBodyAO1 struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID *int64 `json:"id"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

		User *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User `json:"user"`
	}

	dataPutTodosTodoIDOKBodyAO1.CompletedAt = o.CompletedAt

	dataPutTodosTodoIDOKBodyAO1.CreatedAt = o.CreatedAt

	dataPutTodosTodoIDOKBodyAO1.ID = o.ID

	dataPutTodosTodoIDOKBodyAO1.UpdatedAt = o.UpdatedAt

	dataPutTodosTodoIDOKBodyAO1.User = o.User

	jsonDataPutTodosTodoIDOKBodyAO1, errPutTodosTodoIDOKBodyAO1 := swag.WriteJSON(dataPutTodosTodoIDOKBodyAO1)
	if errPutTodosTodoIDOKBodyAO1 != nil {
		return nil, errPutTodosTodoIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutTodosTodoIDOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put todos todo ID o k body
func (o *PutTodosTodoIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDOKBody) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"completed", "body", o.Completed); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBody) validateCompletedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("putTodosTodoIdOK"+"."+"completed_at", "body", "date-time", o.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("putTodosTodoIdOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("putTodosTodoIdOK"+"."+"id", "body", *o.ID, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("putTodosTodoIdOK"+"."+"id", "body", *o.ID, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBody) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("putTodosTodoIdOK"+"."+"updated_at", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putTodosTodoIdOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putTodosTodoIdOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put todos todo ID o k body based on the context it is used
func (o *PutTodosTodoIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDOKBody) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if o.User != nil {

		if err := o.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putTodosTodoIdOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putTodosTodoIdOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutTodosTodoIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodosTodoIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutTodosTodoIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User User
//
// swagger:model PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User
type PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User struct {

	// age
	// Required: true
	// Maximum: 150
	// Minimum: 0
	Age *float64 `json:"age"`

	// error
	Error *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError `json:"error,omitempty"`

	// The user's full name.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this put todos todo ID o k body put todos todo ID o k body a o1 user
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAge(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) validateAge(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"user"+"."+"age", "body", o.Age); err != nil {
		return err
	}

	if err := validate.Minimum("putTodosTodoIdOK"+"."+"user"+"."+"age", "body", *o.Age, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("putTodosTodoIdOK"+"."+"user"+"."+"age", "body", *o.Age, 150, false); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putTodosTodoIdOK" + "." + "user" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putTodosTodoIdOK" + "." + "user" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"user"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this put todos todo ID o k body put todos todo ID o k body a o1 user based on the context it is used
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {

		if swag.IsZero(o.Error) { // not required
			return nil
		}

		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putTodosTodoIdOK" + "." + "user" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("putTodosTodoIdOK" + "." + "user" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User) UnmarshalBinary(b []byte) error {
	var res PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError Error Response
//
// swagger:model PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError
type PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this put todos todo ID o k body put todos todo ID o k body a o1 user error
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError) validateError(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"user"+"."+"error"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdOK"+"."+"user"+"."+"error"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put todos todo ID o k body put todos todo ID o k body a o1 user error based on context it is used
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError) UnmarshalBinary(b []byte) error {
	var res PutTodosTodoIDOKBodyPutTodosTodoIDOKBodyAO1UserError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTodosTodoIDUnauthorizedBody Error Response
//
// swagger:model PutTodosTodoIDUnauthorizedBody
type PutTodosTodoIDUnauthorizedBody struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this put todos todo ID unauthorized body
func (o *PutTodosTodoIDUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTodosTodoIDUnauthorizedBody) validateError(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdUnauthorized"+"."+"error", "body", o.Error); err != nil {
		return err
	}

	return nil
}

func (o *PutTodosTodoIDUnauthorizedBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("putTodosTodoIdUnauthorized"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put todos todo ID unauthorized body based on context it is used
func (o *PutTodosTodoIDUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTodosTodoIDUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTodosTodoIDUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutTodosTodoIDUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
