// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TodoFull Todo Full
//
// swagger:model todo-full
type TodoFull struct {

	// completed
	// Required: true
	Completed *bool `json:"completed"`

	// name
	// Required: true
	Name *string `json:"name"`

	// completed at
	// Format: date-time
	CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// id
	// Required: true
	// Maximum: 1e+06
	// Minimum: 0
	ID *int64 `json:"id"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// user
	// Required: true
	User *TodoFullAO1User `json:"user"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TodoFull) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Completed *bool `json:"completed"`

		Name *string `json:"name"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Completed = dataAO0.Completed

	m.Name = dataAO0.Name

	// AO1
	var dataAO1 struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID *int64 `json:"id"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

		User *TodoFullAO1User `json:"user"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CompletedAt = dataAO1.CompletedAt

	m.CreatedAt = dataAO1.CreatedAt

	m.ID = dataAO1.ID

	m.UpdatedAt = dataAO1.UpdatedAt

	m.User = dataAO1.User

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TodoFull) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		Completed *bool `json:"completed"`

		Name *string `json:"name"`
	}

	dataAO0.Completed = m.Completed

	dataAO0.Name = m.Name

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		CompletedAt strfmt.DateTime `json:"completed_at,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		ID *int64 `json:"id"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

		User *TodoFullAO1User `json:"user"`
	}

	dataAO1.CompletedAt = m.CompletedAt

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.ID = m.ID

	dataAO1.UpdatedAt = m.UpdatedAt

	dataAO1.User = m.User

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this todo full
func (m *TodoFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TodoFull) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("completed", "body", m.Completed); err != nil {
		return err
	}

	return nil
}

func (m *TodoFull) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TodoFull) validateCompletedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("completed_at", "body", "date-time", m.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TodoFull) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TodoFull) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", *m.ID, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("id", "body", *m.ID, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *TodoFull) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TodoFull) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this todo full based on the context it is used
func (m *TodoFull) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TodoFull) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TodoFull) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TodoFull) UnmarshalBinary(b []byte) error {
	var res TodoFull
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TodoFullAO1User User
//
// swagger:model TodoFullAO1User
type TodoFullAO1User struct {

	// age
	// Required: true
	// Maximum: 150
	// Minimum: 0
	Age *float64 `json:"age"`

	// error
	Error *TodoFullAO1UserError `json:"error,omitempty"`

	// The user's full name.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this todo full a o1 user
func (m *TodoFullAO1User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TodoFullAO1User) validateAge(formats strfmt.Registry) error {

	if err := validate.Required("user"+"."+"age", "body", m.Age); err != nil {
		return err
	}

	if err := validate.Minimum("user"+"."+"age", "body", *m.Age, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("user"+"."+"age", "body", *m.Age, 150, false); err != nil {
		return err
	}

	return nil
}

func (m *TodoFullAO1User) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (m *TodoFullAO1User) validateName(formats strfmt.Registry) error {

	if err := validate.Required("user"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this todo full a o1 user based on the context it is used
func (m *TodoFullAO1User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TodoFullAO1User) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {

		if swag.IsZero(m.Error) { // not required
			return nil
		}

		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TodoFullAO1User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TodoFullAO1User) UnmarshalBinary(b []byte) error {
	var res TodoFullAO1User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TodoFullAO1UserError Error Response
//
// swagger:model TodoFullAO1UserError
type TodoFullAO1UserError struct {

	// error
	// Required: true
	Error *string `json:"error"`

	// status
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this todo full a o1 user error
func (m *TodoFullAO1UserError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TodoFullAO1UserError) validateError(formats strfmt.Registry) error {

	if err := validate.Required("user"+"."+"error"+"."+"error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *TodoFullAO1UserError) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("user"+"."+"error"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this todo full a o1 user error based on context it is used
func (m *TodoFullAO1UserError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TodoFullAO1UserError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TodoFullAO1UserError) UnmarshalBinary(b []byte) error {
	var res TodoFullAO1UserError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
