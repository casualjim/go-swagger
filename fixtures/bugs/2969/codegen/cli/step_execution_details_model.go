// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for StepExecutionDetails

// register flags to command
func registerModelStepExecutionDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStepExecutionDetailsPropDoneExecutableCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropDonePlanExecutableDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropDoneTaskExecutableDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropExecutionStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropFinishTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropPlannedExecutableCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepExecutionDetailsPropStartTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStepExecutionDetailsPropDoneExecutableCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	doneExecutableCountDescription := ``

	var doneExecutableCountFlagName string
	if cmdPrefix == "" {
		doneExecutableCountFlagName = "doneExecutableCount"
	} else {
		doneExecutableCountFlagName = fmt.Sprintf("%v.doneExecutableCount", cmdPrefix)
	}

	var doneExecutableCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(doneExecutableCountFlagName, doneExecutableCountFlagDefault, doneExecutableCountDescription)

	return nil
}

func registerStepExecutionDetailsPropDonePlanExecutableDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: donePlanExecutableDetails []*PlanExecutionStatus array type is not supported by go-swagger cli yet

	return nil
}

func registerStepExecutionDetailsPropDoneTaskExecutableDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: doneTaskExecutableDetails []*JobExecutionStatus array type is not supported by go-swagger cli yet

	return nil
}

func registerStepExecutionDetailsPropExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := ``

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "executionId"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
	}

	var executionIdFlagDefault string

	_ = cmd.PersistentFlags().String(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerStepExecutionDetailsPropExecutionStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionStatusDescription := ``

	var executionStatusFlagName string
	if cmdPrefix == "" {
		executionStatusFlagName = "executionStatus"
	} else {
		executionStatusFlagName = fmt.Sprintf("%v.executionStatus", cmdPrefix)
	}

	var executionStatusFlagDefault string

	_ = cmd.PersistentFlags().String(executionStatusFlagName, executionStatusFlagDefault, executionStatusDescription)

	return nil
}

func registerStepExecutionDetailsPropFinishTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	finishTimestampDescription := ``

	var finishTimestampFlagName string
	if cmdPrefix == "" {
		finishTimestampFlagName = "finishTimestamp"
	} else {
		finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(finishTimestampFlagName, "", finishTimestampDescription)

	return nil
}

func registerStepExecutionDetailsPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerStepExecutionDetailsPropPlannedExecutableCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	plannedExecutableCountDescription := ``

	var plannedExecutableCountFlagName string
	if cmdPrefix == "" {
		plannedExecutableCountFlagName = "plannedExecutableCount"
	} else {
		plannedExecutableCountFlagName = fmt.Sprintf("%v.plannedExecutableCount", cmdPrefix)
	}

	var plannedExecutableCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(plannedExecutableCountFlagName, plannedExecutableCountFlagDefault, plannedExecutableCountDescription)

	return nil
}

func registerStepExecutionDetailsPropStartTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimestampDescription := ``

	var startTimestampFlagName string
	if cmdPrefix == "" {
		startTimestampFlagName = "startTimestamp"
	} else {
		startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startTimestampFlagName, "", startTimestampDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStepExecutionDetailsFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, doneExecutableCountAdded := retrieveStepExecutionDetailsPropDoneExecutableCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || doneExecutableCountAdded

	err, donePlanExecutableDetailsAdded := retrieveStepExecutionDetailsPropDonePlanExecutableDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || donePlanExecutableDetailsAdded

	err, doneTaskExecutableDetailsAdded := retrieveStepExecutionDetailsPropDoneTaskExecutableDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || doneTaskExecutableDetailsAdded

	err, executionIdAdded := retrieveStepExecutionDetailsPropExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, executionStatusAdded := retrieveStepExecutionDetailsPropExecutionStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionStatusAdded

	err, finishTimestampAdded := retrieveStepExecutionDetailsPropFinishTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishTimestampAdded

	err, idAdded := retrieveStepExecutionDetailsPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, plannedExecutableCountAdded := retrieveStepExecutionDetailsPropPlannedExecutableCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || plannedExecutableCountAdded

	err, startTimestampAdded := retrieveStepExecutionDetailsPropStartTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimestampAdded

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropDoneExecutableCountFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	doneExecutableCountFlagName := fmt.Sprintf("%v.doneExecutableCount", cmdPrefix)
	if cmd.Flags().Changed(doneExecutableCountFlagName) {

		var doneExecutableCountFlagName string
		if cmdPrefix == "" {
			doneExecutableCountFlagName = "doneExecutableCount"
		} else {
			doneExecutableCountFlagName = fmt.Sprintf("%v.doneExecutableCount", cmdPrefix)
		}

		doneExecutableCountFlagValue, err := cmd.Flags().GetInt32(doneExecutableCountFlagName)
		if err != nil {
			return err, false
		}
		m.DoneExecutableCount = doneExecutableCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropDonePlanExecutableDetailsFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	donePlanExecutableDetailsFlagName := fmt.Sprintf("%v.donePlanExecutableDetails", cmdPrefix)
	if cmd.Flags().Changed(donePlanExecutableDetailsFlagName) {
		// warning: donePlanExecutableDetails array type []*PlanExecutionStatus is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropDoneTaskExecutableDetailsFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	doneTaskExecutableDetailsFlagName := fmt.Sprintf("%v.doneTaskExecutableDetails", cmdPrefix)
	if cmd.Flags().Changed(doneTaskExecutableDetailsFlagName) {
		// warning: doneTaskExecutableDetails array type []*JobExecutionStatus is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropExecutionIDFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.executionId", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "executionId"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetString(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropExecutionStatusFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionStatusFlagName := fmt.Sprintf("%v.executionStatus", cmdPrefix)
	if cmd.Flags().Changed(executionStatusFlagName) {

		var executionStatusFlagName string
		if cmdPrefix == "" {
			executionStatusFlagName = "executionStatus"
		} else {
			executionStatusFlagName = fmt.Sprintf("%v.executionStatus", cmdPrefix)
		}

		executionStatusFlagValue, err := cmd.Flags().GetString(executionStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionStatus = executionStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropFinishTimestampFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	finishTimestampFlagName := fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	if cmd.Flags().Changed(finishTimestampFlagName) {

		var finishTimestampFlagName string
		if cmdPrefix == "" {
			finishTimestampFlagName = "finishTimestamp"
		} else {
			finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
		}

		finishTimestampFlagValueStr, err := cmd.Flags().GetString(finishTimestampFlagName)
		if err != nil {
			return err, false
		}
		var finishTimestampFlagValue strfmt.DateTime
		if err := finishTimestampFlagValue.UnmarshalText([]byte(finishTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.FinishTimestamp = finishTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropIDFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropPlannedExecutableCountFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	plannedExecutableCountFlagName := fmt.Sprintf("%v.plannedExecutableCount", cmdPrefix)
	if cmd.Flags().Changed(plannedExecutableCountFlagName) {

		var plannedExecutableCountFlagName string
		if cmdPrefix == "" {
			plannedExecutableCountFlagName = "plannedExecutableCount"
		} else {
			plannedExecutableCountFlagName = fmt.Sprintf("%v.plannedExecutableCount", cmdPrefix)
		}

		plannedExecutableCountFlagValue, err := cmd.Flags().GetInt32(plannedExecutableCountFlagName)
		if err != nil {
			return err, false
		}
		m.PlannedExecutableCount = plannedExecutableCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepExecutionDetailsPropStartTimestampFlags(depth int, m *models.StepExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimestampFlagName := fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	if cmd.Flags().Changed(startTimestampFlagName) {

		var startTimestampFlagName string
		if cmdPrefix == "" {
			startTimestampFlagName = "startTimestamp"
		} else {
			startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
		}

		startTimestampFlagValueStr, err := cmd.Flags().GetString(startTimestampFlagName)
		if err != nil {
			return err, false
		}
		var startTimestampFlagValue strfmt.DateTime
		if err := startTimestampFlagValue.UnmarshalText([]byte(startTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.StartTimestamp = startTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}
