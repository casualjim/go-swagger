// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Seat

// register flags to command
func registerModelSeatFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSeatPropApplication(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSeatPropCurrentUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSeatPropMaxUsers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSeatPropApplication(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	applicationDescription := `Required. Name of application`

	var applicationFlagName string
	if cmdPrefix == "" {
		applicationFlagName = "application"
	} else {
		applicationFlagName = fmt.Sprintf("%v.application", cmdPrefix)
	}

	var applicationFlagDefault string

	_ = cmd.PersistentFlags().String(applicationFlagName, applicationFlagDefault, applicationDescription)

	return nil
}

func registerSeatPropCurrentUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentUsersDescription := `Required. Count of users currently using the application`

	var currentUsersFlagName string
	if cmdPrefix == "" {
		currentUsersFlagName = "currentUsers"
	} else {
		currentUsersFlagName = fmt.Sprintf("%v.currentUsers", cmdPrefix)
	}

	var currentUsersFlagDefault int32

	_ = cmd.PersistentFlags().Int32(currentUsersFlagName, currentUsersFlagDefault, currentUsersDescription)

	return nil
}

func registerSeatPropMaxUsers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxUsersDescription := `Required. Maximum of users allowed to use the application`

	var maxUsersFlagName string
	if cmdPrefix == "" {
		maxUsersFlagName = "maxUsers"
	} else {
		maxUsersFlagName = fmt.Sprintf("%v.maxUsers", cmdPrefix)
	}

	var maxUsersFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxUsersFlagName, maxUsersFlagDefault, maxUsersDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSeatFlags(depth int, m *models.Seat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, applicationAdded := retrieveSeatPropApplicationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || applicationAdded

	err, currentUsersAdded := retrieveSeatPropCurrentUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentUsersAdded

	err, maxUsersAdded := retrieveSeatPropMaxUsersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxUsersAdded

	return nil, retAdded
}

func retrieveSeatPropApplicationFlags(depth int, m *models.Seat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	applicationFlagName := fmt.Sprintf("%v.application", cmdPrefix)
	if cmd.Flags().Changed(applicationFlagName) {

		var applicationFlagName string
		if cmdPrefix == "" {
			applicationFlagName = "application"
		} else {
			applicationFlagName = fmt.Sprintf("%v.application", cmdPrefix)
		}

		applicationFlagValue, err := cmd.Flags().GetString(applicationFlagName)
		if err != nil {
			return err, false
		}
		m.Application = &applicationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSeatPropCurrentUsersFlags(depth int, m *models.Seat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentUsersFlagName := fmt.Sprintf("%v.currentUsers", cmdPrefix)
	if cmd.Flags().Changed(currentUsersFlagName) {

		var currentUsersFlagName string
		if cmdPrefix == "" {
			currentUsersFlagName = "currentUsers"
		} else {
			currentUsersFlagName = fmt.Sprintf("%v.currentUsers", cmdPrefix)
		}

		currentUsersFlagValue, err := cmd.Flags().GetInt32(currentUsersFlagName)
		if err != nil {
			return err, false
		}
		m.CurrentUsers = &currentUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSeatPropMaxUsersFlags(depth int, m *models.Seat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxUsersFlagName := fmt.Sprintf("%v.maxUsers", cmdPrefix)
	if cmd.Flags().Changed(maxUsersFlagName) {

		var maxUsersFlagName string
		if cmdPrefix == "" {
			maxUsersFlagName = "maxUsers"
		} else {
			maxUsersFlagName = fmt.Sprintf("%v.maxUsers", cmdPrefix)
		}

		maxUsersFlagValue, err := cmd.Flags().GetInt32(maxUsersFlagName)
		if err != nil {
			return err, false
		}
		m.MaxUsers = &maxUsersFlagValue

		retAdded = true
	}

	return nil, retAdded
}
