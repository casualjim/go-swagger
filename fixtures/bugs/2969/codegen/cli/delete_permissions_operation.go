// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/workspaces_permissions"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationWorkspacesPermissionsDeletePermissionsCmd returns a command to handle operation deletePermissions
func makeOperationWorkspacesPermissionsDeletePermissionsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "deletePermissions",
		Short: `Remove all permissions where user id is one from specified ones with request AND workspace is one from specified ones with request.
Special case: empty collection for users means that permissions for all users and specified workspaces will be deleted (and vise versa).`,
		RunE: runOperationWorkspacesPermissionsDeletePermissions,
	}

	if err := registerOperationWorkspacesPermissionsDeletePermissionsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWorkspacesPermissionsDeletePermissions uses cmd flags to call endpoint api
func runOperationWorkspacesPermissionsDeletePermissions(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := workspaces_permissions.NewDeletePermissionsParams()
	if err, _ = retrieveOperationWorkspacesPermissionsDeletePermissionsUserIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationWorkspacesPermissionsDeletePermissionsWorkspaceIdsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWorkspacesPermissionsDeletePermissionsResult(appCli.WorkspacesPermissions.DeletePermissions(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationWorkspacesPermissionsDeletePermissionsParamFlags registers all flags needed to fill params
func registerOperationWorkspacesPermissionsDeletePermissionsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWorkspacesPermissionsDeletePermissionsUserIdsParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWorkspacesPermissionsDeletePermissionsWorkspaceIdsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWorkspacesPermissionsDeletePermissionsUserIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	userIdsDescription := `User ids list used to compute permission intersections with specified workspaces.`

	var userIdsFlagName string
	if cmdPrefix == "" {
		userIdsFlagName = "userIds"
	} else {
		userIdsFlagName = fmt.Sprintf("%v.userIds", cmdPrefix)
	}

	var userIdsFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(userIdsFlagName, userIdsFlagDefault, userIdsDescription)

	return nil
}

func registerOperationWorkspacesPermissionsDeletePermissionsWorkspaceIdsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	workspaceIdsDescription := `Workspace ids list used to compute permission intersections with specified users.`

	var workspaceIdsFlagName string
	if cmdPrefix == "" {
		workspaceIdsFlagName = "workspaceIds"
	} else {
		workspaceIdsFlagName = fmt.Sprintf("%v.workspaceIds", cmdPrefix)
	}

	var workspaceIdsFlagDefault []string

	_ = cmd.PersistentFlags().StringSlice(workspaceIdsFlagName, workspaceIdsFlagDefault, workspaceIdsDescription)

	return nil
}

func retrieveOperationWorkspacesPermissionsDeletePermissionsUserIdsFlag(m *workspaces_permissions.DeletePermissionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("userIds") {

		var userIdsFlagName string
		if cmdPrefix == "" {
			userIdsFlagName = "userIds"
		} else {
			userIdsFlagName = fmt.Sprintf("%v.userIds", cmdPrefix)
		}

		userIdsFlagValues, err := cmd.Flags().GetStringSlice(userIdsFlagName)
		if err != nil {
			return err, false
		}
		m.UserIds = userIdsFlagValues

	}

	return nil, retAdded
}

func retrieveOperationWorkspacesPermissionsDeletePermissionsWorkspaceIdsFlag(m *workspaces_permissions.DeletePermissionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("workspaceIds") {

		var workspaceIdsFlagName string
		if cmdPrefix == "" {
			workspaceIdsFlagName = "workspaceIds"
		} else {
			workspaceIdsFlagName = fmt.Sprintf("%v.workspaceIds", cmdPrefix)
		}

		workspaceIdsFlagValues, err := cmd.Flags().GetStringSlice(workspaceIdsFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceIds = workspaceIdsFlagValues

	}

	return nil, retAdded
}

// parseOperationWorkspacesPermissionsDeletePermissionsResult parses request result and return the string content
func parseOperationWorkspacesPermissionsDeletePermissionsResult(resp0 *workspaces_permissions.DeletePermissionsNoContent, resp1 *workspaces_permissions.DeletePermissionsMultiStatus, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deletePermissionsNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*workspaces_permissions.DeletePermissionsMultiStatus)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*workspaces_permissions.DeletePermissionsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*workspaces_permissions.DeletePermissionsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*workspaces_permissions.DeletePermissionsNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deletePermissionsNoContent is not supported by go-swagger cli yet.

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr, err := json.Marshal(resp1.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
