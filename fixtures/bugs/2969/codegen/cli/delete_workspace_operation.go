// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/workspaces"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationWorkspacesDeleteWorkspaceCmd returns a command to handle operation deleteWorkspace
func makeOperationWorkspacesDeleteWorkspaceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteWorkspace",
		Short: ``,
		RunE:  runOperationWorkspacesDeleteWorkspace,
	}

	if err := registerOperationWorkspacesDeleteWorkspaceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWorkspacesDeleteWorkspace uses cmd flags to call endpoint api
func runOperationWorkspacesDeleteWorkspace(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := workspaces.NewDeleteWorkspaceParams()
	if err, _ = retrieveOperationWorkspacesDeleteWorkspaceWorkspaceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWorkspacesDeleteWorkspaceResult(appCli.Workspaces.DeleteWorkspace(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationWorkspacesDeleteWorkspaceParamFlags registers all flags needed to fill params
func registerOperationWorkspacesDeleteWorkspaceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWorkspacesDeleteWorkspaceWorkspaceIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWorkspacesDeleteWorkspaceWorkspaceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	workspaceIdDescription := `Required. `

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

func retrieveOperationWorkspacesDeleteWorkspaceWorkspaceIDFlag(m *workspaces.DeleteWorkspaceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("workspaceId") {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = workspaceIdFlagValue

	}

	return nil, retAdded
}

// parseOperationWorkspacesDeleteWorkspaceResult parses request result and return the string content
func parseOperationWorkspacesDeleteWorkspaceResult(respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*workspaces.DeleteWorkspaceUnauthorized)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*workspaces.DeleteWorkspaceForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning deleteWorkspaceNotFound is not supported

		// Non schema case: warning deleteWorkspaceConflict is not supported

		// Non schema case: warning deleteWorkspaceInternalServerError is not supported

		return "", respErr
	}
	return "", nil
}
