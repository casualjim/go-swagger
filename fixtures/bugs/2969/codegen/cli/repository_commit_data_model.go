// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for RepositoryCommitData

// register flags to command
func registerModelRepositoryCommitDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRepositoryCommitDataPropAuthor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRepositoryCommitDataPropDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRepositoryCommitDataPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRepositoryCommitDataPropAuthor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authorDescription := `Required. commit author`

	var authorFlagName string
	if cmdPrefix == "" {
		authorFlagName = "author"
	} else {
		authorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
	}

	var authorFlagDefault string

	_ = cmd.PersistentFlags().String(authorFlagName, authorFlagDefault, authorDescription)

	return nil
}

func registerRepositoryCommitDataPropDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dateDescription := `Required. commit date time`

	var dateFlagName string
	if cmdPrefix == "" {
		dateFlagName = "date"
	} else {
		dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(dateFlagName, "", dateDescription)

	return nil
}

func registerRepositoryCommitDataPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. commit id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRepositoryCommitDataFlags(depth int, m *models.RepositoryCommitData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authorAdded := retrieveRepositoryCommitDataPropAuthorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorAdded

	err, dateAdded := retrieveRepositoryCommitDataPropDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateAdded

	err, idAdded := retrieveRepositoryCommitDataPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	return nil, retAdded
}

func retrieveRepositoryCommitDataPropAuthorFlags(depth int, m *models.RepositoryCommitData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorFlagName := fmt.Sprintf("%v.author", cmdPrefix)
	if cmd.Flags().Changed(authorFlagName) {

		var authorFlagName string
		if cmdPrefix == "" {
			authorFlagName = "author"
		} else {
			authorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
		}

		authorFlagValue, err := cmd.Flags().GetString(authorFlagName)
		if err != nil {
			return err, false
		}
		m.Author = &authorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRepositoryCommitDataPropDateFlags(depth int, m *models.RepositoryCommitData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateFlagName := fmt.Sprintf("%v.date", cmdPrefix)
	if cmd.Flags().Changed(dateFlagName) {

		var dateFlagName string
		if cmdPrefix == "" {
			dateFlagName = "date"
		} else {
			dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
		}

		dateFlagValueStr, err := cmd.Flags().GetString(dateFlagName)
		if err != nil {
			return err, false
		}
		var dateFlagValue strfmt.DateTime
		if err := dateFlagValue.UnmarshalText([]byte(dateFlagValueStr)); err != nil {
			return err, false
		}
		m.Date = &dateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRepositoryCommitDataPropIDFlags(depth int, m *models.RepositoryCommitData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}
