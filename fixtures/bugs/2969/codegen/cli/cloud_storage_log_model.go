// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for CloudStorageLog

// register flags to command
func registerModelCloudStorageLogFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCloudStorageLogPropBundleName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCloudStorageLogPropBundleVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCloudStorageLogPropLogMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCloudStorageLogPropLogTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCloudStorageLogPropLogType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCloudStorageLogPropSeverity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCloudStorageLogPropBundleName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bundleNameDescription := ``

	var bundleNameFlagName string
	if cmdPrefix == "" {
		bundleNameFlagName = "bundleName"
	} else {
		bundleNameFlagName = fmt.Sprintf("%v.bundleName", cmdPrefix)
	}

	var bundleNameFlagDefault string

	_ = cmd.PersistentFlags().String(bundleNameFlagName, bundleNameFlagDefault, bundleNameDescription)

	return nil
}

func registerCloudStorageLogPropBundleVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	bundleVersionDescription := ``

	var bundleVersionFlagName string
	if cmdPrefix == "" {
		bundleVersionFlagName = "bundleVersion"
	} else {
		bundleVersionFlagName = fmt.Sprintf("%v.bundleVersion", cmdPrefix)
	}

	var bundleVersionFlagDefault string

	_ = cmd.PersistentFlags().String(bundleVersionFlagName, bundleVersionFlagDefault, bundleVersionDescription)

	return nil
}

func registerCloudStorageLogPropLogMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logMessageDescription := ``

	var logMessageFlagName string
	if cmdPrefix == "" {
		logMessageFlagName = "logMessage"
	} else {
		logMessageFlagName = fmt.Sprintf("%v.logMessage", cmdPrefix)
	}

	var logMessageFlagDefault string

	_ = cmd.PersistentFlags().String(logMessageFlagName, logMessageFlagDefault, logMessageDescription)

	return nil
}

func registerCloudStorageLogPropLogTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logTimestampDescription := ``

	var logTimestampFlagName string
	if cmdPrefix == "" {
		logTimestampFlagName = "logTimestamp"
	} else {
		logTimestampFlagName = fmt.Sprintf("%v.logTimestamp", cmdPrefix)
	}

	var logTimestampFlagDefault int64

	_ = cmd.PersistentFlags().Int64(logTimestampFlagName, logTimestampFlagDefault, logTimestampDescription)

	return nil
}

func registerCloudStorageLogPropLogType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logTypeDescription := ``

	var logTypeFlagName string
	if cmdPrefix == "" {
		logTypeFlagName = "logType"
	} else {
		logTypeFlagName = fmt.Sprintf("%v.logType", cmdPrefix)
	}

	var logTypeFlagDefault string

	_ = cmd.PersistentFlags().String(logTypeFlagName, logTypeFlagDefault, logTypeDescription)

	return nil
}

func registerCloudStorageLogPropSeverity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	severityDescription := ``

	var severityFlagName string
	if cmdPrefix == "" {
		severityFlagName = "severity"
	} else {
		severityFlagName = fmt.Sprintf("%v.severity", cmdPrefix)
	}

	var severityFlagDefault string

	_ = cmd.PersistentFlags().String(severityFlagName, severityFlagDefault, severityDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCloudStorageLogFlags(depth int, m *models.CloudStorageLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, bundleNameAdded := retrieveCloudStorageLogPropBundleNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bundleNameAdded

	err, bundleVersionAdded := retrieveCloudStorageLogPropBundleVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || bundleVersionAdded

	err, logMessageAdded := retrieveCloudStorageLogPropLogMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logMessageAdded

	err, logTimestampAdded := retrieveCloudStorageLogPropLogTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logTimestampAdded

	err, logTypeAdded := retrieveCloudStorageLogPropLogTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logTypeAdded

	err, severityAdded := retrieveCloudStorageLogPropSeverityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || severityAdded

	return nil, retAdded
}

func retrieveCloudStorageLogPropBundleNameFlags(depth int, m *models.CloudStorageLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bundleNameFlagName := fmt.Sprintf("%v.bundleName", cmdPrefix)
	if cmd.Flags().Changed(bundleNameFlagName) {

		var bundleNameFlagName string
		if cmdPrefix == "" {
			bundleNameFlagName = "bundleName"
		} else {
			bundleNameFlagName = fmt.Sprintf("%v.bundleName", cmdPrefix)
		}

		bundleNameFlagValue, err := cmd.Flags().GetString(bundleNameFlagName)
		if err != nil {
			return err, false
		}
		m.BundleName = bundleNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCloudStorageLogPropBundleVersionFlags(depth int, m *models.CloudStorageLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	bundleVersionFlagName := fmt.Sprintf("%v.bundleVersion", cmdPrefix)
	if cmd.Flags().Changed(bundleVersionFlagName) {

		var bundleVersionFlagName string
		if cmdPrefix == "" {
			bundleVersionFlagName = "bundleVersion"
		} else {
			bundleVersionFlagName = fmt.Sprintf("%v.bundleVersion", cmdPrefix)
		}

		bundleVersionFlagValue, err := cmd.Flags().GetString(bundleVersionFlagName)
		if err != nil {
			return err, false
		}
		m.BundleVersion = bundleVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCloudStorageLogPropLogMessageFlags(depth int, m *models.CloudStorageLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logMessageFlagName := fmt.Sprintf("%v.logMessage", cmdPrefix)
	if cmd.Flags().Changed(logMessageFlagName) {

		var logMessageFlagName string
		if cmdPrefix == "" {
			logMessageFlagName = "logMessage"
		} else {
			logMessageFlagName = fmt.Sprintf("%v.logMessage", cmdPrefix)
		}

		logMessageFlagValue, err := cmd.Flags().GetString(logMessageFlagName)
		if err != nil {
			return err, false
		}
		m.LogMessage = logMessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCloudStorageLogPropLogTimestampFlags(depth int, m *models.CloudStorageLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logTimestampFlagName := fmt.Sprintf("%v.logTimestamp", cmdPrefix)
	if cmd.Flags().Changed(logTimestampFlagName) {

		var logTimestampFlagName string
		if cmdPrefix == "" {
			logTimestampFlagName = "logTimestamp"
		} else {
			logTimestampFlagName = fmt.Sprintf("%v.logTimestamp", cmdPrefix)
		}

		logTimestampFlagValue, err := cmd.Flags().GetInt64(logTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.LogTimestamp = logTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCloudStorageLogPropLogTypeFlags(depth int, m *models.CloudStorageLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logTypeFlagName := fmt.Sprintf("%v.logType", cmdPrefix)
	if cmd.Flags().Changed(logTypeFlagName) {

		var logTypeFlagName string
		if cmdPrefix == "" {
			logTypeFlagName = "logType"
		} else {
			logTypeFlagName = fmt.Sprintf("%v.logType", cmdPrefix)
		}

		logTypeFlagValue, err := cmd.Flags().GetString(logTypeFlagName)
		if err != nil {
			return err, false
		}
		m.LogType = logTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCloudStorageLogPropSeverityFlags(depth int, m *models.CloudStorageLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	severityFlagName := fmt.Sprintf("%v.severity", cmdPrefix)
	if cmd.Flags().Changed(severityFlagName) {

		var severityFlagName string
		if cmdPrefix == "" {
			severityFlagName = "severity"
		} else {
			severityFlagName = fmt.Sprintf("%v.severity", cmdPrefix)
		}

		severityFlagValue, err := cmd.Flags().GetString(severityFlagName)
		if err != nil {
			return err, false
		}
		m.Severity = severityFlagValue

		retAdded = true
	}

	return nil, retAdded
}
