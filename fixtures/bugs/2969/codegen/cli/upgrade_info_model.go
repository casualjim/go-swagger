// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for UpgradeInfo

// register flags to command
func registerModelUpgradeInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpgradeInfoPropAutoUpgradeFailed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpgradeInfoPropUpgradable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpgradeInfoPropAutoUpgradeFailed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoUpgradeFailedDescription := ``

	var autoUpgradeFailedFlagName string
	if cmdPrefix == "" {
		autoUpgradeFailedFlagName = "autoUpgradeFailed"
	} else {
		autoUpgradeFailedFlagName = fmt.Sprintf("%v.autoUpgradeFailed", cmdPrefix)
	}

	var autoUpgradeFailedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoUpgradeFailedFlagName, autoUpgradeFailedFlagDefault, autoUpgradeFailedDescription)

	return nil
}

func registerUpgradeInfoPropUpgradable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	upgradableDescription := ``

	var upgradableFlagName string
	if cmdPrefix == "" {
		upgradableFlagName = "upgradable"
	} else {
		upgradableFlagName = fmt.Sprintf("%v.upgradable", cmdPrefix)
	}

	var upgradableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(upgradableFlagName, upgradableFlagDefault, upgradableDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpgradeInfoFlags(depth int, m *models.UpgradeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, autoUpgradeFailedAdded := retrieveUpgradeInfoPropAutoUpgradeFailedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpgradeFailedAdded

	err, upgradableAdded := retrieveUpgradeInfoPropUpgradableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradableAdded

	return nil, retAdded
}

func retrieveUpgradeInfoPropAutoUpgradeFailedFlags(depth int, m *models.UpgradeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpgradeFailedFlagName := fmt.Sprintf("%v.autoUpgradeFailed", cmdPrefix)
	if cmd.Flags().Changed(autoUpgradeFailedFlagName) {

		var autoUpgradeFailedFlagName string
		if cmdPrefix == "" {
			autoUpgradeFailedFlagName = "autoUpgradeFailed"
		} else {
			autoUpgradeFailedFlagName = fmt.Sprintf("%v.autoUpgradeFailed", cmdPrefix)
		}

		autoUpgradeFailedFlagValue, err := cmd.Flags().GetBool(autoUpgradeFailedFlagName)
		if err != nil {
			return err, false
		}
		m.AutoUpgradeFailed = autoUpgradeFailedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpgradeInfoPropUpgradableFlags(depth int, m *models.UpgradeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upgradableFlagName := fmt.Sprintf("%v.upgradable", cmdPrefix)
	if cmd.Flags().Changed(upgradableFlagName) {

		var upgradableFlagName string
		if cmdPrefix == "" {
			upgradableFlagName = "upgradable"
		} else {
			upgradableFlagName = fmt.Sprintf("%v.upgradable", cmdPrefix)
		}

		upgradableFlagValue, err := cmd.Flags().GetBool(upgradableFlagName)
		if err != nil {
			return err, false
		}
		m.Upgradable = upgradableFlagValue

		retAdded = true
	}

	return nil, retAdded
}
