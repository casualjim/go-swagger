// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for EngineRequest

// register flags to command
func registerModelEngineRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEngineRequestPropDebug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineRequestPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineRequestPropEnvironmentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineRequestPropEsbCompatibilityVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineRequestPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineRequestPropRunProfiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEngineRequestPropWorkspaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEngineRequestPropDebug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var debugFlagName string
	if cmdPrefix == "" {
		debugFlagName = "debug"
	} else {
		debugFlagName = fmt.Sprintf("%v.debug", cmdPrefix)
	}

	if err := registerModelEngineDebugFlags(depth+1, debugFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEngineRequestPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Engine|cluster description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerEngineRequestPropEnvironmentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentIdDescription := `Required. Id of engine environment`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerEngineRequestPropEsbCompatibilityVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	esbCompatibilityVersionDescription := `Data Service Runner/Talend Runtime version. Mandatory if TALEND_RUNTIME or MICROSERVICE profile selected`

	var esbCompatibilityVersionFlagName string
	if cmdPrefix == "" {
		esbCompatibilityVersionFlagName = "esbCompatibilityVersion"
	} else {
		esbCompatibilityVersionFlagName = fmt.Sprintf("%v.esbCompatibilityVersion", cmdPrefix)
	}

	var esbCompatibilityVersionFlagDefault string

	_ = cmd.PersistentFlags().String(esbCompatibilityVersionFlagName, esbCompatibilityVersionFlagDefault, esbCompatibilityVersionDescription)

	return nil
}

func registerEngineRequestPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Engine name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEngineRequestPropRunProfiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: runProfiles []string array type is not supported by go-swagger cli yet

	return nil
}

func registerEngineRequestPropWorkspaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceIdDescription := `Id of engine workspace`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEngineRequestFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, debugAdded := retrieveEngineRequestPropDebugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || debugAdded

	err, descriptionAdded := retrieveEngineRequestPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, environmentIdAdded := retrieveEngineRequestPropEnvironmentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentIdAdded

	err, esbCompatibilityVersionAdded := retrieveEngineRequestPropEsbCompatibilityVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || esbCompatibilityVersionAdded

	err, nameAdded := retrieveEngineRequestPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, runProfilesAdded := retrieveEngineRequestPropRunProfilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runProfilesAdded

	err, workspaceIdAdded := retrieveEngineRequestPropWorkspaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdAdded

	return nil, retAdded
}

func retrieveEngineRequestPropDebugFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	debugFlagName := fmt.Sprintf("%v.debug", cmdPrefix)
	if cmd.Flags().Changed(debugFlagName) {
		// info: complex object debug EngineDebug is retrieved outside this Changed() block
	}
	debugFlagValue := m.Debug
	if swag.IsZero(debugFlagValue) {
		debugFlagValue = &models.EngineDebug{}
	}

	err, debugAdded := retrieveModelEngineDebugFlags(depth+1, debugFlagValue, debugFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || debugAdded
	if debugAdded {
		m.Debug = debugFlagValue
	}

	return nil, retAdded
}

func retrieveEngineRequestPropDescriptionFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEngineRequestPropEnvironmentIDFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentIdFlagName := fmt.Sprintf("%v.environmentId", cmdPrefix)
	if cmd.Flags().Changed(environmentIdFlagName) {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = &environmentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEngineRequestPropEsbCompatibilityVersionFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	esbCompatibilityVersionFlagName := fmt.Sprintf("%v.esbCompatibilityVersion", cmdPrefix)
	if cmd.Flags().Changed(esbCompatibilityVersionFlagName) {

		var esbCompatibilityVersionFlagName string
		if cmdPrefix == "" {
			esbCompatibilityVersionFlagName = "esbCompatibilityVersion"
		} else {
			esbCompatibilityVersionFlagName = fmt.Sprintf("%v.esbCompatibilityVersion", cmdPrefix)
		}

		esbCompatibilityVersionFlagValue, err := cmd.Flags().GetString(esbCompatibilityVersionFlagName)
		if err != nil {
			return err, false
		}
		m.EsbCompatibilityVersion = esbCompatibilityVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEngineRequestPropNameFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEngineRequestPropRunProfilesFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runProfilesFlagName := fmt.Sprintf("%v.runProfiles", cmdPrefix)
	if cmd.Flags().Changed(runProfilesFlagName) {
		// warning: runProfiles array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEngineRequestPropWorkspaceIDFlags(depth int, m *models.EngineRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdFlagName := fmt.Sprintf("%v.workspaceId", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdFlagName) {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = workspaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
