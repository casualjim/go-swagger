// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PromotionExecutionDetails

// register flags to command
func registerModelPromotionExecutionDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPromotionExecutionDetailsPropContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionDetailsPropKeepTargetResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionDetailsPropKeepTargetRunProfiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionDetailsPropPromotionAdvancedInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutionDetailsPropContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contextDescription := ``

	var contextFlagName string
	if cmdPrefix == "" {
		contextFlagName = "context"
	} else {
		contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
	}

	var contextFlagDefault string

	_ = cmd.PersistentFlags().String(contextFlagName, contextFlagDefault, contextDescription)

	return nil
}

func registerPromotionExecutionDetailsPropKeepTargetResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepTargetResourcesDescription := ``

	var keepTargetResourcesFlagName string
	if cmdPrefix == "" {
		keepTargetResourcesFlagName = "keepTargetResources"
	} else {
		keepTargetResourcesFlagName = fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
	}

	var keepTargetResourcesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepTargetResourcesFlagName, keepTargetResourcesFlagDefault, keepTargetResourcesDescription)

	return nil
}

func registerPromotionExecutionDetailsPropKeepTargetRunProfiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepTargetRunProfilesDescription := ``

	var keepTargetRunProfilesFlagName string
	if cmdPrefix == "" {
		keepTargetRunProfilesFlagName = "keepTargetRunProfiles"
	} else {
		keepTargetRunProfilesFlagName = fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
	}

	var keepTargetRunProfilesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepTargetRunProfilesFlagName, keepTargetRunProfilesFlagDefault, keepTargetRunProfilesDescription)

	return nil
}

func registerPromotionExecutionDetailsPropPromotionAdvancedInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var promotionAdvancedInfoFlagName string
	if cmdPrefix == "" {
		promotionAdvancedInfoFlagName = "promotionAdvancedInfo"
	} else {
		promotionAdvancedInfoFlagName = fmt.Sprintf("%v.promotionAdvancedInfo", cmdPrefix)
	}

	if err := registerModelPromotionAdvancedInfoFlags(depth+1, promotionAdvancedInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPromotionExecutionDetailsFlags(depth int, m *models.PromotionExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, contextAdded := retrievePromotionExecutionDetailsPropContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextAdded

	err, keepTargetResourcesAdded := retrievePromotionExecutionDetailsPropKeepTargetResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepTargetResourcesAdded

	err, keepTargetRunProfilesAdded := retrievePromotionExecutionDetailsPropKeepTargetRunProfilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepTargetRunProfilesAdded

	err, promotionAdvancedInfoAdded := retrievePromotionExecutionDetailsPropPromotionAdvancedInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || promotionAdvancedInfoAdded

	return nil, retAdded
}

func retrievePromotionExecutionDetailsPropContextFlags(depth int, m *models.PromotionExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contextFlagName := fmt.Sprintf("%v.context", cmdPrefix)
	if cmd.Flags().Changed(contextFlagName) {

		var contextFlagName string
		if cmdPrefix == "" {
			contextFlagName = "context"
		} else {
			contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
		}

		contextFlagValue, err := cmd.Flags().GetString(contextFlagName)
		if err != nil {
			return err, false
		}
		m.Context = contextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionDetailsPropKeepTargetResourcesFlags(depth int, m *models.PromotionExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepTargetResourcesFlagName := fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
	if cmd.Flags().Changed(keepTargetResourcesFlagName) {

		var keepTargetResourcesFlagName string
		if cmdPrefix == "" {
			keepTargetResourcesFlagName = "keepTargetResources"
		} else {
			keepTargetResourcesFlagName = fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
		}

		keepTargetResourcesFlagValue, err := cmd.Flags().GetBool(keepTargetResourcesFlagName)
		if err != nil {
			return err, false
		}
		m.KeepTargetResources = keepTargetResourcesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionDetailsPropKeepTargetRunProfilesFlags(depth int, m *models.PromotionExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepTargetRunProfilesFlagName := fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
	if cmd.Flags().Changed(keepTargetRunProfilesFlagName) {

		var keepTargetRunProfilesFlagName string
		if cmdPrefix == "" {
			keepTargetRunProfilesFlagName = "keepTargetRunProfiles"
		} else {
			keepTargetRunProfilesFlagName = fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
		}

		keepTargetRunProfilesFlagValue, err := cmd.Flags().GetBool(keepTargetRunProfilesFlagName)
		if err != nil {
			return err, false
		}
		m.KeepTargetRunProfiles = keepTargetRunProfilesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionDetailsPropPromotionAdvancedInfoFlags(depth int, m *models.PromotionExecutionDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	promotionAdvancedInfoFlagName := fmt.Sprintf("%v.promotionAdvancedInfo", cmdPrefix)
	if cmd.Flags().Changed(promotionAdvancedInfoFlagName) {
		// info: complex object promotionAdvancedInfo PromotionAdvancedInfo is retrieved outside this Changed() block
	}
	promotionAdvancedInfoFlagValue := m.PromotionAdvancedInfo
	if swag.IsZero(promotionAdvancedInfoFlagValue) {
		promotionAdvancedInfoFlagValue = &models.PromotionAdvancedInfo{}
	}

	err, promotionAdvancedInfoAdded := retrieveModelPromotionAdvancedInfoFlags(depth+1, promotionAdvancedInfoFlagValue, promotionAdvancedInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || promotionAdvancedInfoAdded
	if promotionAdvancedInfoAdded {
		m.PromotionAdvancedInfo = promotionAdvancedInfoFlagValue
	}

	return nil, retAdded
}
