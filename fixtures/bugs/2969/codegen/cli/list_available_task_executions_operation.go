// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/tasks"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTasksListAvailableTaskExecutionsCmd returns a command to handle operation listAvailableTaskExecutions
func makeOperationTasksListAvailableTaskExecutionsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "listAvailableTaskExecutions",
		Short: `Get available Tasks Executions. Chosen date range cannot be more than 60 days`,
		RunE:  runOperationTasksListAvailableTaskExecutions,
	}

	if err := registerOperationTasksListAvailableTaskExecutionsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTasksListAvailableTaskExecutions uses cmd flags to call endpoint api
func runOperationTasksListAvailableTaskExecutions(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tasks.NewListAvailableTaskExecutionsParams()
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsEnvironmentIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsFromFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsLastDaysFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsToFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksListAvailableTaskExecutionsWorkspaceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTasksListAvailableTaskExecutionsResult(appCli.Tasks.ListAvailableTaskExecutions(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationTasksListAvailableTaskExecutionsParamFlags registers all flags needed to fill params
func registerOperationTasksListAvailableTaskExecutionsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTasksListAvailableTaskExecutionsEnvironmentIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksListAvailableTaskExecutionsFromParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksListAvailableTaskExecutionsLastDaysParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksListAvailableTaskExecutionsLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksListAvailableTaskExecutionsOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksListAvailableTaskExecutionsStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksListAvailableTaskExecutionsToParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksListAvailableTaskExecutionsWorkspaceIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTasksListAvailableTaskExecutionsEnvironmentIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	environmentIdDescription := `environment id`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerOperationTasksListAvailableTaskExecutionsFromParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	fromDescription := `from date time (milliseconds)`

	var fromFlagName string
	if cmdPrefix == "" {
		fromFlagName = "from"
	} else {
		fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
	}

	var fromFlagDefault int64

	_ = cmd.PersistentFlags().Int64(fromFlagName, fromFlagDefault, fromDescription)

	return nil
}

func registerOperationTasksListAvailableTaskExecutionsLastDaysParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	lastDaysDescription := `lastDays`

	var lastDaysFlagName string
	if cmdPrefix == "" {
		lastDaysFlagName = "lastDays"
	} else {
		lastDaysFlagName = fmt.Sprintf("%v.lastDays", cmdPrefix)
	}

	var lastDaysFlagDefault int32

	_ = cmd.PersistentFlags().Int32(lastDaysFlagName, lastDaysFlagDefault, lastDaysDescription)

	return nil
}

func registerOperationTasksListAvailableTaskExecutionsLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	limitDescription := `the number of items to return. Must be in range [1, 100]. Default value - 100`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}

func registerOperationTasksListAvailableTaskExecutionsOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetDescription := `the position of the first item. Must be greater than or equal to 0. Default value - 0`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}

func registerOperationTasksListAvailableTaskExecutionsStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	statusDescription := `Enum: ["dispatching","deploy_failed","executing","execution_successful","execution_rejected","execution_failed","terminated","terminated_timeout"]. execution status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["dispatching","deploy_failed","executing","execution_successful","execution_rejected","execution_failed","terminated","terminated_timeout"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerOperationTasksListAvailableTaskExecutionsToParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	toDescription := `to date time (milliseconds)`

	var toFlagName string
	if cmdPrefix == "" {
		toFlagName = "to"
	} else {
		toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
	}

	var toFlagDefault int64

	_ = cmd.PersistentFlags().Int64(toFlagName, toFlagDefault, toDescription)

	return nil
}

func registerOperationTasksListAvailableTaskExecutionsWorkspaceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	workspaceIdDescription := `workspace id`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

func retrieveOperationTasksListAvailableTaskExecutionsEnvironmentIDFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("environmentId") {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = &environmentIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksListAvailableTaskExecutionsFromFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("from") {

		var fromFlagName string
		if cmdPrefix == "" {
			fromFlagName = "from"
		} else {
			fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
		}

		fromFlagValue, err := cmd.Flags().GetInt64(fromFlagName)
		if err != nil {
			return err, false
		}
		m.From = &fromFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksListAvailableTaskExecutionsLastDaysFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("lastDays") {

		var lastDaysFlagName string
		if cmdPrefix == "" {
			lastDaysFlagName = "lastDays"
		} else {
			lastDaysFlagName = fmt.Sprintf("%v.lastDays", cmdPrefix)
		}

		lastDaysFlagValue, err := cmd.Flags().GetInt32(lastDaysFlagName)
		if err != nil {
			return err, false
		}
		m.LastDays = &lastDaysFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksListAvailableTaskExecutionsLimitFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt32(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = &limitFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksListAvailableTaskExecutionsOffsetFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = &offsetFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksListAvailableTaskExecutionsStatusFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("status") {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksListAvailableTaskExecutionsToFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("to") {

		var toFlagName string
		if cmdPrefix == "" {
			toFlagName = "to"
		} else {
			toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
		}

		toFlagValue, err := cmd.Flags().GetInt64(toFlagName)
		if err != nil {
			return err, false
		}
		m.To = &toFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksListAvailableTaskExecutionsWorkspaceIDFlag(m *tasks.ListAvailableTaskExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("workspaceId") {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = &workspaceIdFlagValue

	}

	return nil, retAdded
}

// parseOperationTasksListAvailableTaskExecutionsResult parses request result and return the string content
func parseOperationTasksListAvailableTaskExecutionsResult(resp0 *tasks.ListAvailableTaskExecutionsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*tasks.ListAvailableTaskExecutionsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*tasks.ListAvailableTaskExecutionsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*tasks.ListAvailableTaskExecutionsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*tasks.ListAvailableTaskExecutionsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*tasks.ListAvailableTaskExecutionsInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
