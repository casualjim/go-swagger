// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/plans_executables"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPlansExecutablesGetPlanScheduleMultipleTriggersCmd returns a command to handle operation getPlanScheduleMultipleTriggers
func makeOperationPlansExecutablesGetPlanScheduleMultipleTriggersCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getPlanScheduleMultipleTriggers",
		Short: `Get plan schedule multiple triggers`,
		RunE:  runOperationPlansExecutablesGetPlanScheduleMultipleTriggers,
	}

	if err := registerOperationPlansExecutablesGetPlanScheduleMultipleTriggersParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPlansExecutablesGetPlanScheduleMultipleTriggers uses cmd flags to call endpoint api
func runOperationPlansExecutablesGetPlanScheduleMultipleTriggers(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := plans_executables.NewGetPlanScheduleMultipleTriggersParams()
	if err, _ = retrieveOperationPlansExecutablesGetPlanScheduleMultipleTriggersPlanIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPlansExecutablesGetPlanScheduleMultipleTriggersResult(appCli.PlansExecutables.GetPlanScheduleMultipleTriggers(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationPlansExecutablesGetPlanScheduleMultipleTriggersParamFlags registers all flags needed to fill params
func registerOperationPlansExecutablesGetPlanScheduleMultipleTriggersParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPlansExecutablesGetPlanScheduleMultipleTriggersPlanIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPlansExecutablesGetPlanScheduleMultipleTriggersPlanIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	planIdDescription := `Required. plan id`

	var planIdFlagName string
	if cmdPrefix == "" {
		planIdFlagName = "planId"
	} else {
		planIdFlagName = fmt.Sprintf("%v.planId", cmdPrefix)
	}

	var planIdFlagDefault string

	_ = cmd.PersistentFlags().String(planIdFlagName, planIdFlagDefault, planIdDescription)

	return nil
}

func retrieveOperationPlansExecutablesGetPlanScheduleMultipleTriggersPlanIDFlag(m *plans_executables.GetPlanScheduleMultipleTriggersParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("planId") {

		var planIdFlagName string
		if cmdPrefix == "" {
			planIdFlagName = "planId"
		} else {
			planIdFlagName = fmt.Sprintf("%v.planId", cmdPrefix)
		}

		planIdFlagValue, err := cmd.Flags().GetString(planIdFlagName)
		if err != nil {
			return err, false
		}
		m.PlanID = planIdFlagValue

	}

	return nil, retAdded
}

// parseOperationPlansExecutablesGetPlanScheduleMultipleTriggersResult parses request result and return the string content
func parseOperationPlansExecutablesGetPlanScheduleMultipleTriggersResult(resp0 *plans_executables.GetPlanScheduleMultipleTriggersOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*plans_executables.GetPlanScheduleMultipleTriggersOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*plans_executables.GetPlanScheduleMultipleTriggersBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*plans_executables.GetPlanScheduleMultipleTriggersUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*plans_executables.GetPlanScheduleMultipleTriggersForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*plans_executables.GetPlanScheduleMultipleTriggersNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*plans_executables.GetPlanScheduleMultipleTriggersInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
