// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/promotions_executions"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPromotionsExecutionsExecutePromotionCmd returns a command to handle operation executePromotion
func makeOperationPromotionsExecutionsExecutePromotionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "executePromotion",
		Short: `Execute a Promotion`,
		RunE:  runOperationPromotionsExecutionsExecutePromotion,
	}

	if err := registerOperationPromotionsExecutionsExecutePromotionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPromotionsExecutionsExecutePromotion uses cmd flags to call endpoint api
func runOperationPromotionsExecutionsExecutePromotion(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := promotions_executions.NewExecutePromotionParams()
	if err, _ = retrieveOperationPromotionsExecutionsExecutePromotionBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPromotionsExecutionsExecutePromotionResult(appCli.PromotionsExecutions.ExecutePromotion(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationPromotionsExecutionsExecutePromotionParamFlags registers all flags needed to fill params
func registerOperationPromotionsExecutionsExecutePromotionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPromotionsExecutionsExecutePromotionBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPromotionsExecutionsExecutePromotionBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. Executable task")

	// add flags for body
	if err := registerModelPromotionExecutableTaskFlags(0, "promotionExecutableTask", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationPromotionsExecutionsExecutePromotionBodyFlag(m *promotions_executions.ExecutePromotionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.PromotionExecutableTask{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.PromotionExecutableTask: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.PromotionExecutableTask{}
	}
	err, added := retrieveModelPromotionExecutableTaskFlags(0, bodyValueModel, "promotionExecutableTask", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}

	if dryRun && debug {
		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationPromotionsExecutionsExecutePromotionResult parses request result and return the string content
func parseOperationPromotionsExecutionsExecutePromotionResult(resp0 *promotions_executions.ExecutePromotionCreated, resp1 *promotions_executions.ExecutePromotionAccepted, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*promotions_executions.ExecutePromotionCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning executePromotionAccepted is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*promotions_executions.ExecutePromotionBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*promotions_executions.ExecutePromotionUnauthorized)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*promotions_executions.ExecutePromotionForbidden)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*promotions_executions.ExecutePromotionNotFound)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*promotions_executions.ExecutePromotionInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp7 interface{} = respErr
		resp7, ok := iResp7.(*promotions_executions.ExecutePromotionNotImplemented)
		if ok {
			if !swag.IsZero(resp7) && !swag.IsZero(resp7.Payload) {
				msgStr, err := json.Marshal(resp7.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	// warning: non schema response executePromotionAccepted is not supported by go-swagger cli yet.

	return "", nil
}
