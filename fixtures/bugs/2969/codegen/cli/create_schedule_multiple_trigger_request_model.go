// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for CreateScheduleMultipleTriggerRequest

// register flags to command
func registerModelCreateScheduleMultipleTriggerRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCreateScheduleMultipleTriggerRequestPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreateScheduleMultipleTriggerRequestPropEnvironmentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreateScheduleMultipleTriggerRequestPropTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCreateScheduleMultipleTriggerRequestPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Some description related to the usage of the scheduler`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerCreateScheduleMultipleTriggerRequestPropEnvironmentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentIdDescription := `Required. Environment where this schedule will be available`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerCreateScheduleMultipleTriggerRequestPropTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	if err := registerModelMultipleTriggerFlags(depth+1, triggerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCreateScheduleMultipleTriggerRequestFlags(depth int, m *models.CreateScheduleMultipleTriggerRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveCreateScheduleMultipleTriggerRequestPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, environmentIdAdded := retrieveCreateScheduleMultipleTriggerRequestPropEnvironmentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentIdAdded

	err, triggerAdded := retrieveCreateScheduleMultipleTriggerRequestPropTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded

	return nil, retAdded
}

func retrieveCreateScheduleMultipleTriggerRequestPropDescriptionFlags(depth int, m *models.CreateScheduleMultipleTriggerRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCreateScheduleMultipleTriggerRequestPropEnvironmentIDFlags(depth int, m *models.CreateScheduleMultipleTriggerRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentIdFlagName := fmt.Sprintf("%v.environmentId", cmdPrefix)
	if cmd.Flags().Changed(environmentIdFlagName) {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = &environmentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCreateScheduleMultipleTriggerRequestPropTriggerFlags(depth int, m *models.CreateScheduleMultipleTriggerRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerFlagName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(triggerFlagName) {
		// info: complex object trigger MultipleTrigger is retrieved outside this Changed() block
	}
	triggerFlagValue := m.Trigger
	if swag.IsZero(triggerFlagValue) {
		triggerFlagValue = &models.MultipleTrigger{}
	}

	err, triggerAdded := retrieveModelMultipleTriggerFlags(depth+1, triggerFlagValue, triggerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded
	if triggerAdded {
		m.Trigger = triggerFlagValue
	}

	return nil, retAdded
}
