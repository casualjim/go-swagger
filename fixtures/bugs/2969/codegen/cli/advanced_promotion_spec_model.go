// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for AdvancedPromotionSpec

// register flags to command
func registerModelAdvancedPromotionSpecFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAdvancedPromotionSpecPropArtifactID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAdvancedPromotionSpecPropArtifactType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAdvancedPromotionSpecPropArtifactID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	artifactIdDescription := `Advanced Promotion Artifact Id`

	var artifactIdFlagName string
	if cmdPrefix == "" {
		artifactIdFlagName = "artifactId"
	} else {
		artifactIdFlagName = fmt.Sprintf("%v.artifactId", cmdPrefix)
	}

	var artifactIdFlagDefault string

	_ = cmd.PersistentFlags().String(artifactIdFlagName, artifactIdFlagDefault, artifactIdDescription)

	return nil
}

func registerAdvancedPromotionSpecPropArtifactType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	artifactTypeDescription := `Enum: ["WORKSPACE","PLAN","FLOW","ACTION"]. Advanced Promotion Artifact Type. In the following list of allowed values, 'ACTION' refers to Artifacts, 'FLOW' refers to Tasks, 'PLAN' refers to Plans and 'WORKSPACE' refers to Workspaces`

	var artifactTypeFlagName string
	if cmdPrefix == "" {
		artifactTypeFlagName = "artifactType"
	} else {
		artifactTypeFlagName = fmt.Sprintf("%v.artifactType", cmdPrefix)
	}

	var artifactTypeFlagDefault string

	_ = cmd.PersistentFlags().String(artifactTypeFlagName, artifactTypeFlagDefault, artifactTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(artifactTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["WORKSPACE","PLAN","FLOW","ACTION"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAdvancedPromotionSpecFlags(depth int, m *models.AdvancedPromotionSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, artifactIdAdded := retrieveAdvancedPromotionSpecPropArtifactIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactIdAdded

	err, artifactTypeAdded := retrieveAdvancedPromotionSpecPropArtifactTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactTypeAdded

	return nil, retAdded
}

func retrieveAdvancedPromotionSpecPropArtifactIDFlags(depth int, m *models.AdvancedPromotionSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactIdFlagName := fmt.Sprintf("%v.artifactId", cmdPrefix)
	if cmd.Flags().Changed(artifactIdFlagName) {

		var artifactIdFlagName string
		if cmdPrefix == "" {
			artifactIdFlagName = "artifactId"
		} else {
			artifactIdFlagName = fmt.Sprintf("%v.artifactId", cmdPrefix)
		}

		artifactIdFlagValue, err := cmd.Flags().GetString(artifactIdFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactID = artifactIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAdvancedPromotionSpecPropArtifactTypeFlags(depth int, m *models.AdvancedPromotionSpec, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactTypeFlagName := fmt.Sprintf("%v.artifactType", cmdPrefix)
	if cmd.Flags().Changed(artifactTypeFlagName) {

		var artifactTypeFlagName string
		if cmdPrefix == "" {
			artifactTypeFlagName = "artifactType"
		} else {
			artifactTypeFlagName = fmt.Sprintf("%v.artifactType", cmdPrefix)
		}

		artifactTypeFlagValue, err := cmd.Flags().GetString(artifactTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactType = artifactTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
