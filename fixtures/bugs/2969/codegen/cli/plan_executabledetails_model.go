// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for PlanExecutabledetails

// register flags to command
func registerModelPlanExecutabledetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanExecutabledetailsPropChart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutabledetailsPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutabledetailsPropExecutable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutabledetailsPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutabledetailsPropPlanPauseDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutabledetailsPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutabledetailsPropWorkspace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanExecutabledetailsPropChart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var chartFlagName string
	if cmdPrefix == "" {
		chartFlagName = "chart"
	} else {
		chartFlagName = fmt.Sprintf("%v.chart", cmdPrefix)
	}

	if err := registerModelExecutionStepFlags(depth+1, chartFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanExecutabledetailsPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Executable description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerPlanExecutabledetailsPropExecutable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executableDescription := `Required. Executable identifier`

	var executableFlagName string
	if cmdPrefix == "" {
		executableFlagName = "executable"
	} else {
		executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
	}

	var executableFlagDefault string

	_ = cmd.PersistentFlags().String(executableFlagName, executableFlagDefault, executableDescription)

	return nil
}

func registerPlanExecutabledetailsPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Executable name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPlanExecutabledetailsPropPlanPauseDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var planPauseDetailsFlagName string
	if cmdPrefix == "" {
		planPauseDetailsFlagName = "planPauseDetails"
	} else {
		planPauseDetailsFlagName = fmt.Sprintf("%v.planPauseDetails", cmdPrefix)
	}

	if err := registerModelPlanPauseDetailsFlags(depth+1, planPauseDetailsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanExecutabledetailsPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["executing","execution_successful","execution_failed"]. Plan execution status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["executing","execution_successful","execution_failed"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerPlanExecutabledetailsPropWorkspace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var workspaceFlagName string
	if cmdPrefix == "" {
		workspaceFlagName = "workspace"
	} else {
		workspaceFlagName = fmt.Sprintf("%v.workspace", cmdPrefix)
	}

	if err := registerModelWorkspaceInfoFlags(depth+1, workspaceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanExecutabledetailsFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, chartAdded := retrievePlanExecutabledetailsPropChartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded

	err, descriptionAdded := retrievePlanExecutabledetailsPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, executableAdded := retrievePlanExecutabledetailsPropExecutableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executableAdded

	err, nameAdded := retrievePlanExecutabledetailsPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, planPauseDetailsAdded := retrievePlanExecutabledetailsPropPlanPauseDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planPauseDetailsAdded

	err, statusAdded := retrievePlanExecutabledetailsPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, workspaceAdded := retrievePlanExecutabledetailsPropWorkspaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded

	return nil, retAdded
}

func retrievePlanExecutabledetailsPropChartFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chartFlagName := fmt.Sprintf("%v.chart", cmdPrefix)
	if cmd.Flags().Changed(chartFlagName) {
		// info: complex object chart ExecutionStep is retrieved outside this Changed() block
	}
	chartFlagValue := m.Chart
	if swag.IsZero(chartFlagValue) {
		chartFlagValue = &models.ExecutionStep{}
	}

	err, chartAdded := retrieveModelExecutionStepFlags(depth+1, chartFlagValue, chartFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded
	if chartAdded {
		m.Chart = chartFlagValue
	}

	return nil, retAdded
}

func retrievePlanExecutabledetailsPropDescriptionFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutabledetailsPropExecutableFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executableFlagName := fmt.Sprintf("%v.executable", cmdPrefix)
	if cmd.Flags().Changed(executableFlagName) {

		var executableFlagName string
		if cmdPrefix == "" {
			executableFlagName = "executable"
		} else {
			executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
		}

		executableFlagValue, err := cmd.Flags().GetString(executableFlagName)
		if err != nil {
			return err, false
		}
		m.Executable = &executableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutabledetailsPropNameFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutabledetailsPropPlanPauseDetailsFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	planPauseDetailsFlagName := fmt.Sprintf("%v.planPauseDetails", cmdPrefix)
	if cmd.Flags().Changed(planPauseDetailsFlagName) {
		// info: complex object planPauseDetails PlanPauseDetails is retrieved outside this Changed() block
	}
	planPauseDetailsFlagValue := m.PlanPauseDetails
	if swag.IsZero(planPauseDetailsFlagValue) {
		planPauseDetailsFlagValue = &models.PlanPauseDetails{}
	}

	err, planPauseDetailsAdded := retrieveModelPlanPauseDetailsFlags(depth+1, planPauseDetailsFlagValue, planPauseDetailsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planPauseDetailsAdded
	if planPauseDetailsAdded {
		m.PlanPauseDetails = planPauseDetailsFlagValue
	}

	return nil, retAdded
}

func retrievePlanExecutabledetailsPropStatusFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutabledetailsPropWorkspaceFlags(depth int, m *models.PlanExecutabledetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceFlagName := fmt.Sprintf("%v.workspace", cmdPrefix)
	if cmd.Flags().Changed(workspaceFlagName) {
		// info: complex object workspace WorkspaceInfo is retrieved outside this Changed() block
	}
	workspaceFlagValue := m.Workspace
	if swag.IsZero(workspaceFlagValue) {
		workspaceFlagValue = &models.WorkspaceInfo{}
	}

	err, workspaceAdded := retrieveModelWorkspaceInfoFlags(depth+1, workspaceFlagValue, workspaceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded
	if workspaceAdded {
		m.Workspace = workspaceFlagValue
	}

	return nil, retAdded
}
