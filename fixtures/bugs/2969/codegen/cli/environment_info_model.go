// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for EnvironmentInfo

// register flags to command
func registerModelEnvironmentInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEnvironmentInfoPropDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnvironmentInfoPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnvironmentInfoPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnvironmentInfoPropMaxCloudContainers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnvironmentInfoPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEnvironmentInfoPropDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultDescription := `Default environment flag`

	var defaultFlagName string
	if cmdPrefix == "" {
		defaultFlagName = "default"
	} else {
		defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
	}

	var defaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defaultFlagName, defaultFlagDefault, defaultDescription)

	return nil
}

func registerEnvironmentInfoPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Environment description (not returned when querying a list of objects)`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerEnvironmentInfoPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Environment identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerEnvironmentInfoPropMaxCloudContainers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxCloudContainersDescription := `Max cloud containers`

	var maxCloudContainersFlagName string
	if cmdPrefix == "" {
		maxCloudContainersFlagName = "maxCloudContainers"
	} else {
		maxCloudContainersFlagName = fmt.Sprintf("%v.maxCloudContainers", cmdPrefix)
	}

	var maxCloudContainersFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxCloudContainersFlagName, maxCloudContainersFlagDefault, maxCloudContainersDescription)

	return nil
}

func registerEnvironmentInfoPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Environment name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEnvironmentInfoFlags(depth int, m *models.EnvironmentInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, defaultAdded := retrieveEnvironmentInfoPropDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultAdded

	err, descriptionAdded := retrieveEnvironmentInfoPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrieveEnvironmentInfoPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, maxCloudContainersAdded := retrieveEnvironmentInfoPropMaxCloudContainersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxCloudContainersAdded

	err, nameAdded := retrieveEnvironmentInfoPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveEnvironmentInfoPropDefaultFlags(depth int, m *models.EnvironmentInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultFlagName := fmt.Sprintf("%v.default", cmdPrefix)
	if cmd.Flags().Changed(defaultFlagName) {

		var defaultFlagName string
		if cmdPrefix == "" {
			defaultFlagName = "default"
		} else {
			defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
		}

		defaultFlagValue, err := cmd.Flags().GetBool(defaultFlagName)
		if err != nil {
			return err, false
		}
		m.Default = defaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnvironmentInfoPropDescriptionFlags(depth int, m *models.EnvironmentInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnvironmentInfoPropIDFlags(depth int, m *models.EnvironmentInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnvironmentInfoPropMaxCloudContainersFlags(depth int, m *models.EnvironmentInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxCloudContainersFlagName := fmt.Sprintf("%v.maxCloudContainers", cmdPrefix)
	if cmd.Flags().Changed(maxCloudContainersFlagName) {

		var maxCloudContainersFlagName string
		if cmdPrefix == "" {
			maxCloudContainersFlagName = "maxCloudContainers"
		} else {
			maxCloudContainersFlagName = fmt.Sprintf("%v.maxCloudContainers", cmdPrefix)
		}

		maxCloudContainersFlagValue, err := cmd.Flags().GetInt32(maxCloudContainersFlagName)
		if err != nil {
			return err, false
		}
		m.MaxCloudContainers = maxCloudContainersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnvironmentInfoPropNameFlags(depth int, m *models.EnvironmentInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
