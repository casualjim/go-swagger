// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Runtime

// register flags to command
func registerModelRuntimeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRuntimePropClusterID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRuntimePropEngineID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRuntimePropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRuntimePropRunProfileID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRuntimePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRuntimePropClusterID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clusterIdDescription := `Remote engine cluster id`

	var clusterIdFlagName string
	if cmdPrefix == "" {
		clusterIdFlagName = "clusterId"
	} else {
		clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
	}

	var clusterIdFlagDefault string

	_ = cmd.PersistentFlags().String(clusterIdFlagName, clusterIdFlagDefault, clusterIdDescription)

	return nil
}

func registerRuntimePropEngineID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	engineIdDescription := `Remote engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerRuntimePropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Runtime id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerRuntimePropRunProfileID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runProfileIdDescription := `Engine run profile ID`

	var runProfileIdFlagName string
	if cmdPrefix == "" {
		runProfileIdFlagName = "runProfileId"
	} else {
		runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
	}

	var runProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(runProfileIdFlagName, runProfileIdFlagDefault, runProfileIdDescription)

	return nil
}

func registerRuntimePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["CLOUD","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER","CLOUD_EXCLUSIVE"]. Type of runtime`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["CLOUD","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER","CLOUD_EXCLUSIVE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRuntimeFlags(depth int, m *models.Runtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clusterIdAdded := retrieveRuntimePropClusterIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clusterIdAdded

	err, engineIdAdded := retrieveRuntimePropEngineIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineIdAdded

	err, idAdded := retrieveRuntimePropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, runProfileIdAdded := retrieveRuntimePropRunProfileIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runProfileIdAdded

	err, typeAdded := retrieveRuntimePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveRuntimePropClusterIDFlags(depth int, m *models.Runtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clusterIdFlagName := fmt.Sprintf("%v.clusterId", cmdPrefix)
	if cmd.Flags().Changed(clusterIdFlagName) {

		var clusterIdFlagName string
		if cmdPrefix == "" {
			clusterIdFlagName = "clusterId"
		} else {
			clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
		}

		clusterIdFlagValue, err := cmd.Flags().GetString(clusterIdFlagName)
		if err != nil {
			return err, false
		}
		m.ClusterID = clusterIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRuntimePropEngineIDFlags(depth int, m *models.Runtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	engineIdFlagName := fmt.Sprintf("%v.engineId", cmdPrefix)
	if cmd.Flags().Changed(engineIdFlagName) {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRuntimePropIDFlags(depth int, m *models.Runtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRuntimePropRunProfileIDFlags(depth int, m *models.Runtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runProfileIdFlagName := fmt.Sprintf("%v.runProfileId", cmdPrefix)
	if cmd.Flags().Changed(runProfileIdFlagName) {

		var runProfileIdFlagName string
		if cmdPrefix == "" {
			runProfileIdFlagName = "runProfileId"
		} else {
			runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
		}

		runProfileIdFlagValue, err := cmd.Flags().GetString(runProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.RunProfileID = runProfileIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRuntimePropTypeFlags(depth int, m *models.Runtime, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
