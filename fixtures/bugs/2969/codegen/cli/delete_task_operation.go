// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/tasks"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTasksDeleteTaskCmd returns a command to handle operation deleteTask
func makeOperationTasksDeleteTaskCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteTask",
		Short: `Delete Task`,
		RunE:  runOperationTasksDeleteTask,
	}

	if err := registerOperationTasksDeleteTaskParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTasksDeleteTask uses cmd flags to call endpoint api
func runOperationTasksDeleteTask(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tasks.NewDeleteTaskParams()
	if err, _ = retrieveOperationTasksDeleteTaskTaskIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksDeleteTaskTerminateExecutionsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTasksDeleteTaskResult(appCli.Tasks.DeleteTask(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationTasksDeleteTaskParamFlags registers all flags needed to fill params
func registerOperationTasksDeleteTaskParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTasksDeleteTaskTaskIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksDeleteTaskTerminateExecutionsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTasksDeleteTaskTaskIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	taskIdDescription := `Required. task ID`

	var taskIdFlagName string
	if cmdPrefix == "" {
		taskIdFlagName = "taskId"
	} else {
		taskIdFlagName = fmt.Sprintf("%v.taskId", cmdPrefix)
	}

	var taskIdFlagDefault string

	_ = cmd.PersistentFlags().String(taskIdFlagName, taskIdFlagDefault, taskIdDescription)

	return nil
}

func registerOperationTasksDeleteTaskTerminateExecutionsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	terminateExecutionsDescription := `terminate task executions`

	var terminateExecutionsFlagName string
	if cmdPrefix == "" {
		terminateExecutionsFlagName = "terminateExecutions"
	} else {
		terminateExecutionsFlagName = fmt.Sprintf("%v.terminateExecutions", cmdPrefix)
	}

	var terminateExecutionsFlagDefault bool

	_ = cmd.PersistentFlags().Bool(terminateExecutionsFlagName, terminateExecutionsFlagDefault, terminateExecutionsDescription)

	return nil
}

func retrieveOperationTasksDeleteTaskTaskIDFlag(m *tasks.DeleteTaskParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("taskId") {

		var taskIdFlagName string
		if cmdPrefix == "" {
			taskIdFlagName = "taskId"
		} else {
			taskIdFlagName = fmt.Sprintf("%v.taskId", cmdPrefix)
		}

		taskIdFlagValue, err := cmd.Flags().GetString(taskIdFlagName)
		if err != nil {
			return err, false
		}
		m.TaskID = taskIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksDeleteTaskTerminateExecutionsFlag(m *tasks.DeleteTaskParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("terminateExecutions") {

		var terminateExecutionsFlagName string
		if cmdPrefix == "" {
			terminateExecutionsFlagName = "terminateExecutions"
		} else {
			terminateExecutionsFlagName = fmt.Sprintf("%v.terminateExecutions", cmdPrefix)
		}

		terminateExecutionsFlagValue, err := cmd.Flags().GetBool(terminateExecutionsFlagName)
		if err != nil {
			return err, false
		}
		m.TerminateExecutions = &terminateExecutionsFlagValue

	}

	return nil, retAdded
}

// parseOperationTasksDeleteTaskResult parses request result and return the string content
func parseOperationTasksDeleteTaskResult(resp0 *tasks.DeleteTaskNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteTaskNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*tasks.DeleteTaskBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*tasks.DeleteTaskUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*tasks.DeleteTaskForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*tasks.DeleteTaskNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*tasks.DeleteTaskConflict)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*tasks.DeleteTaskInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteTaskNoContent is not supported by go-swagger cli yet.

	return "", nil
}
