// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PromotionExecutableDetails

// register flags to command
func registerModelPromotionExecutableDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPromotionExecutableDetailsPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableDetailsPropExecutable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableDetailsPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableDetailsPropSourceEnvironment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableDetailsPropTargetEnvironment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutableDetailsPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Promotion description (not returned when querying a list of objects)`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerPromotionExecutableDetailsPropExecutable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executableDescription := `Required. Executable identifier`

	var executableFlagName string
	if cmdPrefix == "" {
		executableFlagName = "executable"
	} else {
		executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
	}

	var executableFlagDefault string

	_ = cmd.PersistentFlags().String(executableFlagName, executableFlagDefault, executableDescription)

	return nil
}

func registerPromotionExecutableDetailsPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Executable name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPromotionExecutableDetailsPropSourceEnvironment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var sourceEnvironmentFlagName string
	if cmdPrefix == "" {
		sourceEnvironmentFlagName = "sourceEnvironment"
	} else {
		sourceEnvironmentFlagName = fmt.Sprintf("%v.sourceEnvironment", cmdPrefix)
	}

	if err := registerModelEnvironmentInfoFlags(depth+1, sourceEnvironmentFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutableDetailsPropTargetEnvironment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var targetEnvironmentFlagName string
	if cmdPrefix == "" {
		targetEnvironmentFlagName = "targetEnvironment"
	} else {
		targetEnvironmentFlagName = fmt.Sprintf("%v.targetEnvironment", cmdPrefix)
	}

	if err := registerModelEnvironmentInfoFlags(depth+1, targetEnvironmentFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPromotionExecutableDetailsFlags(depth int, m *models.PromotionExecutableDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrievePromotionExecutableDetailsPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, executableAdded := retrievePromotionExecutableDetailsPropExecutableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executableAdded

	err, nameAdded := retrievePromotionExecutableDetailsPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, sourceEnvironmentAdded := retrievePromotionExecutableDetailsPropSourceEnvironmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sourceEnvironmentAdded

	err, targetEnvironmentAdded := retrievePromotionExecutableDetailsPropTargetEnvironmentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetEnvironmentAdded

	return nil, retAdded
}

func retrievePromotionExecutableDetailsPropDescriptionFlags(depth int, m *models.PromotionExecutableDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutableDetailsPropExecutableFlags(depth int, m *models.PromotionExecutableDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executableFlagName := fmt.Sprintf("%v.executable", cmdPrefix)
	if cmd.Flags().Changed(executableFlagName) {

		var executableFlagName string
		if cmdPrefix == "" {
			executableFlagName = "executable"
		} else {
			executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
		}

		executableFlagValue, err := cmd.Flags().GetString(executableFlagName)
		if err != nil {
			return err, false
		}
		m.Executable = &executableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutableDetailsPropNameFlags(depth int, m *models.PromotionExecutableDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutableDetailsPropSourceEnvironmentFlags(depth int, m *models.PromotionExecutableDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sourceEnvironmentFlagName := fmt.Sprintf("%v.sourceEnvironment", cmdPrefix)
	if cmd.Flags().Changed(sourceEnvironmentFlagName) {
		// info: complex object sourceEnvironment EnvironmentInfo is retrieved outside this Changed() block
	}
	sourceEnvironmentFlagValue := m.SourceEnvironment
	if swag.IsZero(sourceEnvironmentFlagValue) {
		sourceEnvironmentFlagValue = &models.EnvironmentInfo{}
	}

	err, sourceEnvironmentAdded := retrieveModelEnvironmentInfoFlags(depth+1, sourceEnvironmentFlagValue, sourceEnvironmentFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sourceEnvironmentAdded
	if sourceEnvironmentAdded {
		m.SourceEnvironment = sourceEnvironmentFlagValue
	}

	return nil, retAdded
}

func retrievePromotionExecutableDetailsPropTargetEnvironmentFlags(depth int, m *models.PromotionExecutableDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	targetEnvironmentFlagName := fmt.Sprintf("%v.targetEnvironment", cmdPrefix)
	if cmd.Flags().Changed(targetEnvironmentFlagName) {
		// info: complex object targetEnvironment EnvironmentInfo is retrieved outside this Changed() block
	}
	targetEnvironmentFlagValue := m.TargetEnvironment
	if swag.IsZero(targetEnvironmentFlagValue) {
		targetEnvironmentFlagValue = &models.EnvironmentInfo{}
	}

	err, targetEnvironmentAdded := retrieveModelEnvironmentInfoFlags(depth+1, targetEnvironmentFlagValue, targetEnvironmentFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetEnvironmentAdded
	if targetEnvironmentAdded {
		m.TargetEnvironment = targetEnvironmentFlagValue
	}

	return nil, retAdded
}
