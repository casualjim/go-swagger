// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/runtime_pipeline_engines_run_profiles_databricks"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksCmd returns a command to handle operation updateRunProfileDatabricks
func makeOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateRunProfileDatabricks",
		Short: ``,
		RunE:  runOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricks,
	}

	if err := registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricks uses cmd flags to call endpoint api
func runOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricks(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := runtime_pipeline_engines_run_profiles_databricks.NewUpdateRunProfileDatabricksParams()
	if err, _ = retrieveOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksEngineIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksRunProfileIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksResult(appCli.RuntimePipelineEnginesRunProfilesDatabricks.UpdateRunProfileDatabricks(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksParamFlags registers all flags needed to fill params
func registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksEngineIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksRunProfileIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. run profile")

	// add flags for body
	if err := registerModelDatabricksRunProfileFlags(0, "databricksRunProfile", cmd); err != nil {
		return err
	}

	return nil
}

func registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksEngineIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	engineIdDescription := `Required. engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksRunProfileIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	runProfileIdDescription := `Required. run profile id`

	var runProfileIdFlagName string
	if cmdPrefix == "" {
		runProfileIdFlagName = "runProfileId"
	} else {
		runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
	}

	var runProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(runProfileIdFlagName, runProfileIdFlagDefault, runProfileIdDescription)

	return nil
}

func retrieveOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksBodyFlag(m *runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := models.DatabricksRunProfile{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in models.DatabricksRunProfile: %v", err), false
		}
		m.Body = &bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = &models.DatabricksRunProfile{}
	}
	err, added := retrieveModelDatabricksRunProfileFlags(0, bodyValueModel, "databricksRunProfile", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}

	if dryRun && debug {
		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

func retrieveOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksEngineIDFlag(m *runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("engineId") {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksRunProfileIDFlag(m *runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("runProfileId") {

		var runProfileIdFlagName string
		if cmdPrefix == "" {
			runProfileIdFlagName = "runProfileId"
		} else {
			runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
		}

		runProfileIdFlagValue, err := cmd.Flags().GetString(runProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.RunProfileID = runProfileIdFlagValue

	}

	return nil, retAdded
}

// parseOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksResult parses request result and return the string content
func parseOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksResult(resp0 *runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateRunProfileDatabricksNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*runtime_pipeline_engines_run_profiles_databricks.UpdateRunProfileDatabricksInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updateRunProfileDatabricksNoContent is not supported by go-swagger cli yet.

	return "", nil
}
