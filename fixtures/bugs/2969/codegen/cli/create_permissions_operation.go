// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/workspaces_permissions"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationWorkspacesPermissionsCreatePermissionsCmd returns a command to handle operation createPermissions
func makeOperationWorkspacesPermissionsCreatePermissionsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createPermissions",
		Short: `Create sets of workspace permissions on the current system. Allows to upload list of workspace permissions to be created.Creation actions will be applied in the same order as defined in the list`,
		RunE:  runOperationWorkspacesPermissionsCreatePermissions,
	}

	if err := registerOperationWorkspacesPermissionsCreatePermissionsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWorkspacesPermissionsCreatePermissions uses cmd flags to call endpoint api
func runOperationWorkspacesPermissionsCreatePermissions(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := workspaces_permissions.NewCreatePermissionsParams()
	if err, _ = retrieveOperationWorkspacesPermissionsCreatePermissionsBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWorkspacesPermissionsCreatePermissionsResult(appCli.WorkspacesPermissions.CreatePermissions(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationWorkspacesPermissionsCreatePermissionsParamFlags registers all flags needed to fill params
func registerOperationWorkspacesPermissionsCreatePermissionsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWorkspacesPermissionsCreatePermissionsBodyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWorkspacesPermissionsCreatePermissionsBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: array body []*models.Permission is not supported by go-swagger cli yet

	return nil
}

func retrieveOperationWorkspacesPermissionsCreatePermissionsBodyFlag(m *workspaces_permissions.CreatePermissionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {

		// warning: array body []*models.Permission is not supported by go-swagger cli yet

	}

	return nil, retAdded
}

// parseOperationWorkspacesPermissionsCreatePermissionsResult parses request result and return the string content
func parseOperationWorkspacesPermissionsCreatePermissionsResult(resp0 *workspaces_permissions.CreatePermissionsNoContent, resp1 *workspaces_permissions.CreatePermissionsMultiStatus, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning createPermissionsNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*workspaces_permissions.CreatePermissionsMultiStatus)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*workspaces_permissions.CreatePermissionsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*workspaces_permissions.CreatePermissionsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*workspaces_permissions.CreatePermissionsNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response createPermissionsNoContent is not supported by go-swagger cli yet.

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr, err := json.Marshal(resp1.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
