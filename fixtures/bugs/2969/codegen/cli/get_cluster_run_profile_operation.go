// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/runtime_clusters_run_profiles"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRuntimeClustersRunProfilesGetClusterRunProfileCmd returns a command to handle operation getClusterRunProfile
func makeOperationRuntimeClustersRunProfilesGetClusterRunProfileCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getClusterRunProfile",
		Short: `Get cluster run profile`,
		RunE:  runOperationRuntimeClustersRunProfilesGetClusterRunProfile,
	}

	if err := registerOperationRuntimeClustersRunProfilesGetClusterRunProfileParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRuntimeClustersRunProfilesGetClusterRunProfile uses cmd flags to call endpoint api
func runOperationRuntimeClustersRunProfilesGetClusterRunProfile(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := runtime_clusters_run_profiles.NewGetClusterRunProfileParams()
	if err, _ = retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfileClusterIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfileRunProfileIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRuntimeClustersRunProfilesGetClusterRunProfileResult(appCli.RuntimeClustersRunProfiles.GetClusterRunProfile(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationRuntimeClustersRunProfilesGetClusterRunProfileParamFlags registers all flags needed to fill params
func registerOperationRuntimeClustersRunProfilesGetClusterRunProfileParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRuntimeClustersRunProfilesGetClusterRunProfileClusterIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimeClustersRunProfilesGetClusterRunProfileRunProfileIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRuntimeClustersRunProfilesGetClusterRunProfileClusterIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	clusterIdDescription := `Required. cluster id`

	var clusterIdFlagName string
	if cmdPrefix == "" {
		clusterIdFlagName = "clusterId"
	} else {
		clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
	}

	var clusterIdFlagDefault string

	_ = cmd.PersistentFlags().String(clusterIdFlagName, clusterIdFlagDefault, clusterIdDescription)

	return nil
}

func registerOperationRuntimeClustersRunProfilesGetClusterRunProfileRunProfileIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	runProfileIdDescription := `Required. run profile id`

	var runProfileIdFlagName string
	if cmdPrefix == "" {
		runProfileIdFlagName = "runProfileId"
	} else {
		runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
	}

	var runProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(runProfileIdFlagName, runProfileIdFlagDefault, runProfileIdDescription)

	return nil
}

func retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfileClusterIDFlag(m *runtime_clusters_run_profiles.GetClusterRunProfileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clusterId") {

		var clusterIdFlagName string
		if cmdPrefix == "" {
			clusterIdFlagName = "clusterId"
		} else {
			clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
		}

		clusterIdFlagValue, err := cmd.Flags().GetString(clusterIdFlagName)
		if err != nil {
			return err, false
		}
		m.ClusterID = clusterIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfileRunProfileIDFlag(m *runtime_clusters_run_profiles.GetClusterRunProfileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("runProfileId") {

		var runProfileIdFlagName string
		if cmdPrefix == "" {
			runProfileIdFlagName = "runProfileId"
		} else {
			runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
		}

		runProfileIdFlagValue, err := cmd.Flags().GetString(runProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.RunProfileID = runProfileIdFlagValue

	}

	return nil, retAdded
}

// parseOperationRuntimeClustersRunProfilesGetClusterRunProfileResult parses request result and return the string content
func parseOperationRuntimeClustersRunProfilesGetClusterRunProfileResult(resp0 *runtime_clusters_run_profiles.GetClusterRunProfileOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*runtime_clusters_run_profiles.GetClusterRunProfileOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*runtime_clusters_run_profiles.GetClusterRunProfileForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*runtime_clusters_run_profiles.GetClusterRunProfileNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
