// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for TimeSchedule

// register flags to command
func registerModelTimeScheduleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTimeSchedulePropEndTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeSchedulePropInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeSchedulePropStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeSchedulePropTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeSchedulePropTimes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTimeSchedulePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTimeSchedulePropEndTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endTimeDescription := `Interval end timestamp, required only if type of schedule at times equal to AT_INTERVALS`

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "endTime"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.endTime", cmdPrefix)
	}

	var endTimeFlagDefault string

	_ = cmd.PersistentFlags().String(endTimeFlagName, endTimeFlagDefault, endTimeDescription)

	return nil
}

func registerTimeSchedulePropInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	intervalDescription := `Duration of interval in minutes, required only if type of schedule at times equal to AT_INTERVALS`

	var intervalFlagName string
	if cmdPrefix == "" {
		intervalFlagName = "interval"
	} else {
		intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
	}

	var intervalFlagDefault int32

	_ = cmd.PersistentFlags().Int32(intervalFlagName, intervalFlagDefault, intervalDescription)

	return nil
}

func registerTimeSchedulePropStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := `Interval start timestamp, required only if type of schedule at times equal to AT_INTERVALS`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "startTime"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
	}

	var startTimeFlagDefault string

	_ = cmd.PersistentFlags().String(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func registerTimeSchedulePropTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeDescription := `Timestamp to run task/plan, required only if type of schedule at times equal to AT_TIME`

	var timeFlagName string
	if cmdPrefix == "" {
		timeFlagName = "time"
	} else {
		timeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
	}

	var timeFlagDefault string

	_ = cmd.PersistentFlags().String(timeFlagName, timeFlagDefault, timeDescription)

	return nil
}

func registerTimeSchedulePropTimes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: times []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTimeSchedulePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["AT_TIME","AT_SPECIFIC_TIMES","AT_INTERVALS"]. Required. Type of schedule at times`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["AT_TIME","AT_SPECIFIC_TIMES","AT_INTERVALS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTimeScheduleFlags(depth int, m *models.TimeSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endTimeAdded := retrieveTimeSchedulePropEndTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endTimeAdded

	err, intervalAdded := retrieveTimeSchedulePropIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || intervalAdded

	err, startTimeAdded := retrieveTimeSchedulePropStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, timeAdded := retrieveTimeSchedulePropTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeAdded

	err, timesAdded := retrieveTimeSchedulePropTimesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timesAdded

	err, typeAdded := retrieveTimeSchedulePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveTimeSchedulePropEndTimeFlags(depth int, m *models.TimeSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endTimeFlagName := fmt.Sprintf("%v.endTime", cmdPrefix)
	if cmd.Flags().Changed(endTimeFlagName) {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "endTime"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.endTime", cmdPrefix)
		}

		endTimeFlagValue, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		m.EndTime = endTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeSchedulePropIntervalFlags(depth int, m *models.TimeSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	intervalFlagName := fmt.Sprintf("%v.interval", cmdPrefix)
	if cmd.Flags().Changed(intervalFlagName) {

		var intervalFlagName string
		if cmdPrefix == "" {
			intervalFlagName = "interval"
		} else {
			intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
		}

		intervalFlagValue, err := cmd.Flags().GetInt32(intervalFlagName)
		if err != nil {
			return err, false
		}
		m.Interval = intervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeSchedulePropStartTimeFlags(depth int, m *models.TimeSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.startTime", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "startTime"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeSchedulePropTimeFlags(depth int, m *models.TimeSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeFlagName := fmt.Sprintf("%v.time", cmdPrefix)
	if cmd.Flags().Changed(timeFlagName) {

		var timeFlagName string
		if cmdPrefix == "" {
			timeFlagName = "time"
		} else {
			timeFlagName = fmt.Sprintf("%v.time", cmdPrefix)
		}

		timeFlagValue, err := cmd.Flags().GetString(timeFlagName)
		if err != nil {
			return err, false
		}
		m.Time = timeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTimeSchedulePropTimesFlags(depth int, m *models.TimeSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timesFlagName := fmt.Sprintf("%v.times", cmdPrefix)
	if cmd.Flags().Changed(timesFlagName) {
		// warning: times array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTimeSchedulePropTypeFlags(depth int, m *models.TimeSchedule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
