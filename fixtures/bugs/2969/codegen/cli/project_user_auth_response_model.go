// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProjectUserAuthResponse

// register flags to command
func registerModelProjectUserAuthResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectUserAuthResponsePropProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectUserAuthResponsePropUserIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectUserAuthResponsePropProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectIdDescription := ``

	var projectIdFlagName string
	if cmdPrefix == "" {
		projectIdFlagName = "projectId"
	} else {
		projectIdFlagName = fmt.Sprintf("%v.projectId", cmdPrefix)
	}

	var projectIdFlagDefault string

	_ = cmd.PersistentFlags().String(projectIdFlagName, projectIdFlagDefault, projectIdDescription)

	return nil
}

func registerProjectUserAuthResponsePropUserIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: userIds []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectUserAuthResponseFlags(depth int, m *models.ProjectUserAuthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, projectIdAdded := retrieveProjectUserAuthResponsePropProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectIdAdded

	err, userIdsAdded := retrieveProjectUserAuthResponsePropUserIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdsAdded

	return nil, retAdded
}

func retrieveProjectUserAuthResponsePropProjectIDFlags(depth int, m *models.ProjectUserAuthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectIdFlagName := fmt.Sprintf("%v.projectId", cmdPrefix)
	if cmd.Flags().Changed(projectIdFlagName) {

		var projectIdFlagName string
		if cmdPrefix == "" {
			projectIdFlagName = "projectId"
		} else {
			projectIdFlagName = fmt.Sprintf("%v.projectId", cmdPrefix)
		}

		projectIdFlagValue, err := cmd.Flags().GetString(projectIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectID = projectIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectUserAuthResponsePropUserIdsFlags(depth int, m *models.ProjectUserAuthResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdsFlagName := fmt.Sprintf("%v.userIds", cmdPrefix)
	if cmd.Flags().Changed(userIdsFlagName) {
		// warning: userIds array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
