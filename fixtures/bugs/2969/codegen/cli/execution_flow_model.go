// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ExecutionFlow

// register flags to command
func registerModelExecutionFlowFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExecutionFlowPropAbstractPlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropArtifactShortVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropDestination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropJobType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropPauseDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropPlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropUpgradeInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionFlowPropWorkspaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExecutionFlowPropAbstractPlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	abstractPlanIdDescription := ``

	var abstractPlanIdFlagName string
	if cmdPrefix == "" {
		abstractPlanIdFlagName = "abstractPlanId"
	} else {
		abstractPlanIdFlagName = fmt.Sprintf("%v.abstractPlanId", cmdPrefix)
	}

	var abstractPlanIdFlagDefault string

	_ = cmd.PersistentFlags().String(abstractPlanIdFlagName, abstractPlanIdFlagDefault, abstractPlanIdDescription)

	return nil
}

func registerExecutionFlowPropArtifactShortVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var artifactShortVersionFlagName string
	if cmdPrefix == "" {
		artifactShortVersionFlagName = "artifactShortVersion"
	} else {
		artifactShortVersionFlagName = fmt.Sprintf("%v.artifactShortVersion", cmdPrefix)
	}

	if err := registerModelArtifactVersionFlags(depth+1, artifactShortVersionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerExecutionFlowPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerExecutionFlowPropDestination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	destinationDescription := ``

	var destinationFlagName string
	if cmdPrefix == "" {
		destinationFlagName = "destination"
	} else {
		destinationFlagName = fmt.Sprintf("%v.destination", cmdPrefix)
	}

	var destinationFlagDefault string

	_ = cmd.PersistentFlags().String(destinationFlagName, destinationFlagDefault, destinationDescription)

	return nil
}

func registerExecutionFlowPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerExecutionFlowPropJobType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobTypeDescription := `Enum: ["STANDARD","BIG_DATA_STREAMING","BIG_DATA_BATCH","ROUTE","DATA_SERVICE","PIPELINE","DATA_FABRIC"]. `

	var jobTypeFlagName string
	if cmdPrefix == "" {
		jobTypeFlagName = "jobType"
	} else {
		jobTypeFlagName = fmt.Sprintf("%v.jobType", cmdPrefix)
	}

	var jobTypeFlagDefault string

	_ = cmd.PersistentFlags().String(jobTypeFlagName, jobTypeFlagDefault, jobTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(jobTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["STANDARD","BIG_DATA_STREAMING","BIG_DATA_BATCH","ROUTE","DATA_SERVICE","PIPELINE","DATA_FABRIC"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerExecutionFlowPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerExecutionFlowPropPauseDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var pauseDetailsFlagName string
	if cmdPrefix == "" {
		pauseDetailsFlagName = "pauseDetails"
	} else {
		pauseDetailsFlagName = fmt.Sprintf("%v.pauseDetails", cmdPrefix)
	}

	if err := registerModelExecutionPauseDetailsFlags(depth+1, pauseDetailsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerExecutionFlowPropPlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	planDescription := ``

	var planFlagName string
	if cmdPrefix == "" {
		planFlagName = "plan"
	} else {
		planFlagName = fmt.Sprintf("%v.plan", cmdPrefix)
	}

	var planFlagDefault bool

	_ = cmd.PersistentFlags().Bool(planFlagName, planFlagDefault, planDescription)

	return nil
}

func registerExecutionFlowPropUpgradeInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var upgradeInfoFlagName string
	if cmdPrefix == "" {
		upgradeInfoFlagName = "upgradeInfo"
	} else {
		upgradeInfoFlagName = fmt.Sprintf("%v.upgradeInfo", cmdPrefix)
	}

	if err := registerModelUpgradeInfoFlags(depth+1, upgradeInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerExecutionFlowPropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := ``

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerExecutionFlowPropWorkspaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceIdDescription := ``

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExecutionFlowFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, abstractPlanIdAdded := retrieveExecutionFlowPropAbstractPlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || abstractPlanIdAdded

	err, artifactShortVersionAdded := retrieveExecutionFlowPropArtifactShortVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactShortVersionAdded

	err, descriptionAdded := retrieveExecutionFlowPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, destinationAdded := retrieveExecutionFlowPropDestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || destinationAdded

	err, idAdded := retrieveExecutionFlowPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, jobTypeAdded := retrieveExecutionFlowPropJobTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobTypeAdded

	err, nameAdded := retrieveExecutionFlowPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pauseDetailsAdded := retrieveExecutionFlowPropPauseDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pauseDetailsAdded

	err, planAdded := retrieveExecutionFlowPropPlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planAdded

	err, upgradeInfoAdded := retrieveExecutionFlowPropUpgradeInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradeInfoAdded

	err, versionAdded := retrieveExecutionFlowPropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, workspaceIdAdded := retrieveExecutionFlowPropWorkspaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdAdded

	return nil, retAdded
}

func retrieveExecutionFlowPropAbstractPlanIDFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	abstractPlanIdFlagName := fmt.Sprintf("%v.abstractPlanId", cmdPrefix)
	if cmd.Flags().Changed(abstractPlanIdFlagName) {

		var abstractPlanIdFlagName string
		if cmdPrefix == "" {
			abstractPlanIdFlagName = "abstractPlanId"
		} else {
			abstractPlanIdFlagName = fmt.Sprintf("%v.abstractPlanId", cmdPrefix)
		}

		abstractPlanIdFlagValue, err := cmd.Flags().GetString(abstractPlanIdFlagName)
		if err != nil {
			return err, false
		}
		m.AbstractPlanID = abstractPlanIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropArtifactShortVersionFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactShortVersionFlagName := fmt.Sprintf("%v.artifactShortVersion", cmdPrefix)
	if cmd.Flags().Changed(artifactShortVersionFlagName) {
		// info: complex object artifactShortVersion ArtifactVersion is retrieved outside this Changed() block
	}
	artifactShortVersionFlagValue := m.ArtifactShortVersion
	if swag.IsZero(artifactShortVersionFlagValue) {
		artifactShortVersionFlagValue = &models.ArtifactVersion{}
	}

	err, artifactShortVersionAdded := retrieveModelArtifactVersionFlags(depth+1, artifactShortVersionFlagValue, artifactShortVersionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactShortVersionAdded
	if artifactShortVersionAdded {
		m.ArtifactShortVersion = artifactShortVersionFlagValue
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropDescriptionFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropDestinationFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	destinationFlagName := fmt.Sprintf("%v.destination", cmdPrefix)
	if cmd.Flags().Changed(destinationFlagName) {

		var destinationFlagName string
		if cmdPrefix == "" {
			destinationFlagName = "destination"
		} else {
			destinationFlagName = fmt.Sprintf("%v.destination", cmdPrefix)
		}

		destinationFlagValue, err := cmd.Flags().GetString(destinationFlagName)
		if err != nil {
			return err, false
		}
		m.Destination = destinationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropIDFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropJobTypeFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobTypeFlagName := fmt.Sprintf("%v.jobType", cmdPrefix)
	if cmd.Flags().Changed(jobTypeFlagName) {

		var jobTypeFlagName string
		if cmdPrefix == "" {
			jobTypeFlagName = "jobType"
		} else {
			jobTypeFlagName = fmt.Sprintf("%v.jobType", cmdPrefix)
		}

		jobTypeFlagValue, err := cmd.Flags().GetString(jobTypeFlagName)
		if err != nil {
			return err, false
		}
		m.JobType = jobTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropNameFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropPauseDetailsFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pauseDetailsFlagName := fmt.Sprintf("%v.pauseDetails", cmdPrefix)
	if cmd.Flags().Changed(pauseDetailsFlagName) {
		// info: complex object pauseDetails ExecutionPauseDetails is retrieved outside this Changed() block
	}
	pauseDetailsFlagValue := m.PauseDetails
	if swag.IsZero(pauseDetailsFlagValue) {
		pauseDetailsFlagValue = &models.ExecutionPauseDetails{}
	}

	err, pauseDetailsAdded := retrieveModelExecutionPauseDetailsFlags(depth+1, pauseDetailsFlagValue, pauseDetailsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pauseDetailsAdded
	if pauseDetailsAdded {
		m.PauseDetails = pauseDetailsFlagValue
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropPlanFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	planFlagName := fmt.Sprintf("%v.plan", cmdPrefix)
	if cmd.Flags().Changed(planFlagName) {

		var planFlagName string
		if cmdPrefix == "" {
			planFlagName = "plan"
		} else {
			planFlagName = fmt.Sprintf("%v.plan", cmdPrefix)
		}

		planFlagValue, err := cmd.Flags().GetBool(planFlagName)
		if err != nil {
			return err, false
		}
		m.Plan = planFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropUpgradeInfoFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	upgradeInfoFlagName := fmt.Sprintf("%v.upgradeInfo", cmdPrefix)
	if cmd.Flags().Changed(upgradeInfoFlagName) {
		// info: complex object upgradeInfo UpgradeInfo is retrieved outside this Changed() block
	}
	upgradeInfoFlagValue := m.UpgradeInfo
	if swag.IsZero(upgradeInfoFlagValue) {
		upgradeInfoFlagValue = &models.UpgradeInfo{}
	}

	err, upgradeInfoAdded := retrieveModelUpgradeInfoFlags(depth+1, upgradeInfoFlagValue, upgradeInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || upgradeInfoAdded
	if upgradeInfoAdded {
		m.UpgradeInfo = upgradeInfoFlagValue
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropVersionFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionFlowPropWorkspaceIDFlags(depth int, m *models.ExecutionFlow, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdFlagName := fmt.Sprintf("%v.workspaceId", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdFlagName) {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = workspaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
