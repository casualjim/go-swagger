// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for PromotionExecutionReport

// register flags to command
func registerModelPromotionExecutionReportFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPromotionExecutionReportPropExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionReportPropExecutionReport(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutionReportPropExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := `Required. Execution identifier`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "executionId"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
	}

	var executionIdFlagDefault string

	_ = cmd.PersistentFlags().String(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerPromotionExecutionReportPropExecutionReport(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var executionReportFlagName string
	if cmdPrefix == "" {
		executionReportFlagName = "executionReport"
	} else {
		executionReportFlagName = fmt.Sprintf("%v.executionReport", cmdPrefix)
	}

	if err := registerModelPromotionExecutionStatusFlags(depth+1, executionReportFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPromotionExecutionReportFlags(depth int, m *models.PromotionExecutionReport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, executionIdAdded := retrievePromotionExecutionReportPropExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, executionReportAdded := retrievePromotionExecutionReportPropExecutionReportFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionReportAdded

	return nil, retAdded
}

func retrievePromotionExecutionReportPropExecutionIDFlags(depth int, m *models.PromotionExecutionReport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.executionId", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "executionId"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetString(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = &executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionReportPropExecutionReportFlags(depth int, m *models.PromotionExecutionReport, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionReportFlagName := fmt.Sprintf("%v.executionReport", cmdPrefix)
	if cmd.Flags().Changed(executionReportFlagName) {
		// info: complex object executionReport PromotionExecutionStatus is retrieved outside this Changed() block
	}
	executionReportFlagValue := m.ExecutionReport
	if swag.IsZero(executionReportFlagValue) {
		executionReportFlagValue = &models.PromotionExecutionStatus{}
	}

	err, executionReportAdded := retrieveModelPromotionExecutionStatusFlags(depth+1, executionReportFlagValue, executionReportFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionReportAdded
	if executionReportAdded {
		m.ExecutionReport = executionReportFlagValue
	}

	return nil, retAdded
}
