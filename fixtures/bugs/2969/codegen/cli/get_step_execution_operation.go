// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/plans_executions"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPlansExecutionsGetStepExecutionCmd returns a command to handle operation getStepExecution
func makeOperationPlansExecutionsGetStepExecutionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getStepExecution",
		Short: `Get Step execution status`,
		RunE:  runOperationPlansExecutionsGetStepExecution,
	}

	if err := registerOperationPlansExecutionsGetStepExecutionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPlansExecutionsGetStepExecution uses cmd flags to call endpoint api
func runOperationPlansExecutionsGetStepExecution(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := plans_executions.NewGetStepExecutionParams()
	if err, _ = retrieveOperationPlansExecutionsGetStepExecutionPlanExecutionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationPlansExecutionsGetStepExecutionStepExecutionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPlansExecutionsGetStepExecutionResult(appCli.PlansExecutions.GetStepExecution(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationPlansExecutionsGetStepExecutionParamFlags registers all flags needed to fill params
func registerOperationPlansExecutionsGetStepExecutionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPlansExecutionsGetStepExecutionPlanExecutionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPlansExecutionsGetStepExecutionStepExecutionIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPlansExecutionsGetStepExecutionPlanExecutionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	planExecutionIdDescription := `Required. Plan execution ID`

	var planExecutionIdFlagName string
	if cmdPrefix == "" {
		planExecutionIdFlagName = "planExecutionId"
	} else {
		planExecutionIdFlagName = fmt.Sprintf("%v.planExecutionId", cmdPrefix)
	}

	var planExecutionIdFlagDefault string

	_ = cmd.PersistentFlags().String(planExecutionIdFlagName, planExecutionIdFlagDefault, planExecutionIdDescription)

	return nil
}

func registerOperationPlansExecutionsGetStepExecutionStepExecutionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	stepExecutionIdDescription := `Required. Step execution ID`

	var stepExecutionIdFlagName string
	if cmdPrefix == "" {
		stepExecutionIdFlagName = "stepExecutionId"
	} else {
		stepExecutionIdFlagName = fmt.Sprintf("%v.stepExecutionId", cmdPrefix)
	}

	var stepExecutionIdFlagDefault string

	_ = cmd.PersistentFlags().String(stepExecutionIdFlagName, stepExecutionIdFlagDefault, stepExecutionIdDescription)

	return nil
}

func retrieveOperationPlansExecutionsGetStepExecutionPlanExecutionIDFlag(m *plans_executions.GetStepExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("planExecutionId") {

		var planExecutionIdFlagName string
		if cmdPrefix == "" {
			planExecutionIdFlagName = "planExecutionId"
		} else {
			planExecutionIdFlagName = fmt.Sprintf("%v.planExecutionId", cmdPrefix)
		}

		planExecutionIdFlagValue, err := cmd.Flags().GetString(planExecutionIdFlagName)
		if err != nil {
			return err, false
		}
		m.PlanExecutionID = planExecutionIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationPlansExecutionsGetStepExecutionStepExecutionIDFlag(m *plans_executions.GetStepExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("stepExecutionId") {

		var stepExecutionIdFlagName string
		if cmdPrefix == "" {
			stepExecutionIdFlagName = "stepExecutionId"
		} else {
			stepExecutionIdFlagName = fmt.Sprintf("%v.stepExecutionId", cmdPrefix)
		}

		stepExecutionIdFlagValue, err := cmd.Flags().GetString(stepExecutionIdFlagName)
		if err != nil {
			return err, false
		}
		m.StepExecutionID = stepExecutionIdFlagValue

	}

	return nil, retAdded
}

// parseOperationPlansExecutionsGetStepExecutionResult parses request result and return the string content
func parseOperationPlansExecutionsGetStepExecutionResult(resp0 *plans_executions.GetStepExecutionOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*plans_executions.GetStepExecutionOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*plans_executions.GetStepExecutionBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*plans_executions.GetStepExecutionUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*plans_executions.GetStepExecutionForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*plans_executions.GetStepExecutionNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*plans_executions.GetStepExecutionInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
