// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/runtime_clusters_run_profiles"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRuntimeClustersRunProfilesGetClusterRunProfilesCmd returns a command to handle operation getClusterRunProfiles
func makeOperationRuntimeClustersRunProfilesGetClusterRunProfilesCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getClusterRunProfiles",
		Short: `Get cluster run profiles`,
		RunE:  runOperationRuntimeClustersRunProfilesGetClusterRunProfiles,
	}

	if err := registerOperationRuntimeClustersRunProfilesGetClusterRunProfilesParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRuntimeClustersRunProfilesGetClusterRunProfiles uses cmd flags to call endpoint api
func runOperationRuntimeClustersRunProfilesGetClusterRunProfiles(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := runtime_clusters_run_profiles.NewGetClusterRunProfilesParams()
	if err, _ = retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfilesClusterIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfilesTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRuntimeClustersRunProfilesGetClusterRunProfilesResult(appCli.RuntimeClustersRunProfiles.GetClusterRunProfiles(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationRuntimeClustersRunProfilesGetClusterRunProfilesParamFlags registers all flags needed to fill params
func registerOperationRuntimeClustersRunProfilesGetClusterRunProfilesParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRuntimeClustersRunProfilesGetClusterRunProfilesClusterIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimeClustersRunProfilesGetClusterRunProfilesTypeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRuntimeClustersRunProfilesGetClusterRunProfilesClusterIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	clusterIdDescription := `Required. cluster id`

	var clusterIdFlagName string
	if cmdPrefix == "" {
		clusterIdFlagName = "clusterId"
	} else {
		clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
	}

	var clusterIdFlagDefault string

	_ = cmd.PersistentFlags().String(clusterIdFlagName, clusterIdFlagDefault, clusterIdDescription)

	return nil
}

func registerOperationRuntimeClustersRunProfilesGetClusterRunProfilesTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	typeDescription := `Enum: ["JOB_SERVER","MICROSERVICE","TALEND_RUNTIME"]. Type of run profiles to be returned. By default returns all`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["JOB_SERVER","MICROSERVICE","TALEND_RUNTIME"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfilesClusterIDFlag(m *runtime_clusters_run_profiles.GetClusterRunProfilesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clusterId") {

		var clusterIdFlagName string
		if cmdPrefix == "" {
			clusterIdFlagName = "clusterId"
		} else {
			clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
		}

		clusterIdFlagValue, err := cmd.Flags().GetString(clusterIdFlagName)
		if err != nil {
			return err, false
		}
		m.ClusterID = clusterIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationRuntimeClustersRunProfilesGetClusterRunProfilesTypeFlag(m *runtime_clusters_run_profiles.GetClusterRunProfilesParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("type") {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

	}

	return nil, retAdded
}

// parseOperationRuntimeClustersRunProfilesGetClusterRunProfilesResult parses request result and return the string content
func parseOperationRuntimeClustersRunProfilesGetClusterRunProfilesResult(resp0 *runtime_clusters_run_profiles.GetClusterRunProfilesOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*runtime_clusters_run_profiles.GetClusterRunProfilesOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*runtime_clusters_run_profiles.GetClusterRunProfilesForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*runtime_clusters_run_profiles.GetClusterRunProfilesNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
