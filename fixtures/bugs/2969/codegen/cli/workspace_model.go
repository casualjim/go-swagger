// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Workspace

// register flags to command
func registerModelWorkspaceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWorkspacePropCreateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropEnvironmentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropOwner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropOwnerFullName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropProtectedTaskArtifactUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePropUpdateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWorkspacePropCreateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createDateDescription := ``

	var createDateFlagName string
	if cmdPrefix == "" {
		createDateFlagName = "createDate"
	} else {
		createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createDateFlagName, "", createDateDescription)

	return nil
}

func registerWorkspacePropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerWorkspacePropEnvironmentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentIdDescription := ``

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerWorkspacePropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerWorkspacePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerWorkspacePropOwner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerDescription := ``

	var ownerFlagName string
	if cmdPrefix == "" {
		ownerFlagName = "owner"
	} else {
		ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
	}

	var ownerFlagDefault string

	_ = cmd.PersistentFlags().String(ownerFlagName, ownerFlagDefault, ownerDescription)

	return nil
}

func registerWorkspacePropOwnerFullName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerFullNameDescription := ``

	var ownerFullNameFlagName string
	if cmdPrefix == "" {
		ownerFullNameFlagName = "ownerFullName"
	} else {
		ownerFullNameFlagName = fmt.Sprintf("%v.ownerFullName", cmdPrefix)
	}

	var ownerFullNameFlagDefault string

	_ = cmd.PersistentFlags().String(ownerFullNameFlagName, ownerFullNameFlagDefault, ownerFullNameDescription)

	return nil
}

func registerWorkspacePropProtectedTaskArtifactUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protectedTaskArtifactUpdateDescription := ``

	var protectedTaskArtifactUpdateFlagName string
	if cmdPrefix == "" {
		protectedTaskArtifactUpdateFlagName = "protectedTaskArtifactUpdate"
	} else {
		protectedTaskArtifactUpdateFlagName = fmt.Sprintf("%v.protectedTaskArtifactUpdate", cmdPrefix)
	}

	var protectedTaskArtifactUpdateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(protectedTaskArtifactUpdateFlagName, protectedTaskArtifactUpdateFlagDefault, protectedTaskArtifactUpdateDescription)

	return nil
}

func registerWorkspacePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["Shared","Personal","Custom"]. `

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Shared","Personal","Custom"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWorkspacePropUpdateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateDateDescription := ``

	var updateDateFlagName string
	if cmdPrefix == "" {
		updateDateFlagName = "updateDate"
	} else {
		updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateDateFlagName, "", updateDateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWorkspaceFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createDateAdded := retrieveWorkspacePropCreateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createDateAdded

	err, descriptionAdded := retrieveWorkspacePropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, environmentIdAdded := retrieveWorkspacePropEnvironmentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentIdAdded

	err, idAdded := retrieveWorkspacePropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveWorkspacePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, ownerAdded := retrieveWorkspacePropOwnerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerAdded

	err, ownerFullNameAdded := retrieveWorkspacePropOwnerFullNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerFullNameAdded

	err, protectedTaskArtifactUpdateAdded := retrieveWorkspacePropProtectedTaskArtifactUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protectedTaskArtifactUpdateAdded

	err, typeAdded := retrieveWorkspacePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, updateDateAdded := retrieveWorkspacePropUpdateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateDateAdded

	return nil, retAdded
}

func retrieveWorkspacePropCreateDateFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createDateFlagName := fmt.Sprintf("%v.createDate", cmdPrefix)
	if cmd.Flags().Changed(createDateFlagName) {

		var createDateFlagName string
		if cmdPrefix == "" {
			createDateFlagName = "createDate"
		} else {
			createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
		}

		createDateFlagValueStr, err := cmd.Flags().GetString(createDateFlagName)
		if err != nil {
			return err, false
		}
		var createDateFlagValue strfmt.DateTime
		if err := createDateFlagValue.UnmarshalText([]byte(createDateFlagValueStr)); err != nil {
			return err, false
		}
		m.CreateDate = createDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropDescriptionFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropEnvironmentIDFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentIdFlagName := fmt.Sprintf("%v.environmentId", cmdPrefix)
	if cmd.Flags().Changed(environmentIdFlagName) {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = environmentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropIDFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropNameFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropOwnerFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerFlagName := fmt.Sprintf("%v.owner", cmdPrefix)
	if cmd.Flags().Changed(ownerFlagName) {

		var ownerFlagName string
		if cmdPrefix == "" {
			ownerFlagName = "owner"
		} else {
			ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
		}

		ownerFlagValue, err := cmd.Flags().GetString(ownerFlagName)
		if err != nil {
			return err, false
		}
		m.Owner = ownerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropOwnerFullNameFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerFullNameFlagName := fmt.Sprintf("%v.ownerFullName", cmdPrefix)
	if cmd.Flags().Changed(ownerFullNameFlagName) {

		var ownerFullNameFlagName string
		if cmdPrefix == "" {
			ownerFullNameFlagName = "ownerFullName"
		} else {
			ownerFullNameFlagName = fmt.Sprintf("%v.ownerFullName", cmdPrefix)
		}

		ownerFullNameFlagValue, err := cmd.Flags().GetString(ownerFullNameFlagName)
		if err != nil {
			return err, false
		}
		m.OwnerFullName = ownerFullNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropProtectedTaskArtifactUpdateFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protectedTaskArtifactUpdateFlagName := fmt.Sprintf("%v.protectedTaskArtifactUpdate", cmdPrefix)
	if cmd.Flags().Changed(protectedTaskArtifactUpdateFlagName) {

		var protectedTaskArtifactUpdateFlagName string
		if cmdPrefix == "" {
			protectedTaskArtifactUpdateFlagName = "protectedTaskArtifactUpdate"
		} else {
			protectedTaskArtifactUpdateFlagName = fmt.Sprintf("%v.protectedTaskArtifactUpdate", cmdPrefix)
		}

		protectedTaskArtifactUpdateFlagValue, err := cmd.Flags().GetBool(protectedTaskArtifactUpdateFlagName)
		if err != nil {
			return err, false
		}
		m.ProtectedTaskArtifactUpdate = protectedTaskArtifactUpdateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropTypeFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePropUpdateDateFlags(depth int, m *models.Workspace, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateDateFlagName := fmt.Sprintf("%v.updateDate", cmdPrefix)
	if cmd.Flags().Changed(updateDateFlagName) {

		var updateDateFlagName string
		if cmdPrefix == "" {
			updateDateFlagName = "updateDate"
		} else {
			updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
		}

		updateDateFlagValueStr, err := cmd.Flags().GetString(updateDateFlagName)
		if err != nil {
			return err, false
		}
		var updateDateFlagValue strfmt.DateTime
		if err := updateDateFlagValue.UnmarshalText([]byte(updateDateFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateDate = updateDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
