// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Report

// register flags to command
func registerModelReportFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReportPropMessages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReportPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReportPropMessages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: messages []*Message array type is not supported by go-swagger cli yet

	return nil
}

func registerReportPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["CREATED","REPLACED","REUSED","FAILED","SKIPPED"]. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["CREATED","REPLACED","REUSED","FAILED","SKIPPED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReportFlags(depth int, m *models.Report, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, messagesAdded := retrieveReportPropMessagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messagesAdded

	err, statusAdded := retrieveReportPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveReportPropMessagesFlags(depth int, m *models.Report, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messagesFlagName := fmt.Sprintf("%v.messages", cmdPrefix)
	if cmd.Flags().Changed(messagesFlagName) {
		// warning: messages array type []*Message is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReportPropStatusFlags(depth int, m *models.Report, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
