// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for TaskRunConfig

// register flags to command
func registerModelTaskRunConfigFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskRunConfigPropLogLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskRunConfigPropParallelExecutionAllowed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskRunConfigPropRemoteRunAsUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskRunConfigPropRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskRunConfigPropTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskRunConfigPropLogLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logLevelDescription := `Enum: ["OFF","ERROR","WARN","INFO"]. Execution log level. 'WARN' by default`

	var logLevelFlagName string
	if cmdPrefix == "" {
		logLevelFlagName = "logLevel"
	} else {
		logLevelFlagName = fmt.Sprintf("%v.logLevel", cmdPrefix)
	}

	var logLevelFlagDefault string

	_ = cmd.PersistentFlags().String(logLevelFlagName, logLevelFlagDefault, logLevelDescription)

	if err := cmd.RegisterFlagCompletionFunc(logLevelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["OFF","ERROR","WARN","INFO"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerTaskRunConfigPropParallelExecutionAllowed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	parallelExecutionAllowedDescription := `Indicates whether this executable is allowed to run in parallel (for REMOTE_ENGINE available from V2.6). 'false' by default`

	var parallelExecutionAllowedFlagName string
	if cmdPrefix == "" {
		parallelExecutionAllowedFlagName = "parallelExecutionAllowed"
	} else {
		parallelExecutionAllowedFlagName = fmt.Sprintf("%v.parallelExecutionAllowed", cmdPrefix)
	}

	var parallelExecutionAllowedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(parallelExecutionAllowedFlagName, parallelExecutionAllowedFlagDefault, parallelExecutionAllowedDescription)

	return nil
}

func registerTaskRunConfigPropRemoteRunAsUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteRunAsUserDescription := `Remote run user`

	var remoteRunAsUserFlagName string
	if cmdPrefix == "" {
		remoteRunAsUserFlagName = "remoteRunAsUser"
	} else {
		remoteRunAsUserFlagName = fmt.Sprintf("%v.remoteRunAsUser", cmdPrefix)
	}

	var remoteRunAsUserFlagDefault string

	_ = cmd.PersistentFlags().String(remoteRunAsUserFlagName, remoteRunAsUserFlagDefault, remoteRunAsUserDescription)

	return nil
}

func registerTaskRunConfigPropRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var runtimeFlagName string
	if cmdPrefix == "" {
		runtimeFlagName = "runtime"
	} else {
		runtimeFlagName = fmt.Sprintf("%v.runtime", cmdPrefix)
	}

	if err := registerModelRuntimeFlags(depth+1, runtimeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskRunConfigPropTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	if err := registerModelTriggerFlags(depth+1, triggerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskRunConfigFlags(depth int, m *models.TaskRunConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, logLevelAdded := retrieveTaskRunConfigPropLogLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logLevelAdded

	err, parallelExecutionAllowedAdded := retrieveTaskRunConfigPropParallelExecutionAllowedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parallelExecutionAllowedAdded

	err, remoteRunAsUserAdded := retrieveTaskRunConfigPropRemoteRunAsUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteRunAsUserAdded

	err, runtimeAdded := retrieveTaskRunConfigPropRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeAdded

	err, triggerAdded := retrieveTaskRunConfigPropTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded

	return nil, retAdded
}

func retrieveTaskRunConfigPropLogLevelFlags(depth int, m *models.TaskRunConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logLevelFlagName := fmt.Sprintf("%v.logLevel", cmdPrefix)
	if cmd.Flags().Changed(logLevelFlagName) {

		var logLevelFlagName string
		if cmdPrefix == "" {
			logLevelFlagName = "logLevel"
		} else {
			logLevelFlagName = fmt.Sprintf("%v.logLevel", cmdPrefix)
		}

		logLevelFlagValue, err := cmd.Flags().GetString(logLevelFlagName)
		if err != nil {
			return err, false
		}
		m.LogLevel = logLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskRunConfigPropParallelExecutionAllowedFlags(depth int, m *models.TaskRunConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parallelExecutionAllowedFlagName := fmt.Sprintf("%v.parallelExecutionAllowed", cmdPrefix)
	if cmd.Flags().Changed(parallelExecutionAllowedFlagName) {

		var parallelExecutionAllowedFlagName string
		if cmdPrefix == "" {
			parallelExecutionAllowedFlagName = "parallelExecutionAllowed"
		} else {
			parallelExecutionAllowedFlagName = fmt.Sprintf("%v.parallelExecutionAllowed", cmdPrefix)
		}

		parallelExecutionAllowedFlagValue, err := cmd.Flags().GetBool(parallelExecutionAllowedFlagName)
		if err != nil {
			return err, false
		}
		m.ParallelExecutionAllowed = parallelExecutionAllowedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskRunConfigPropRemoteRunAsUserFlags(depth int, m *models.TaskRunConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteRunAsUserFlagName := fmt.Sprintf("%v.remoteRunAsUser", cmdPrefix)
	if cmd.Flags().Changed(remoteRunAsUserFlagName) {

		var remoteRunAsUserFlagName string
		if cmdPrefix == "" {
			remoteRunAsUserFlagName = "remoteRunAsUser"
		} else {
			remoteRunAsUserFlagName = fmt.Sprintf("%v.remoteRunAsUser", cmdPrefix)
		}

		remoteRunAsUserFlagValue, err := cmd.Flags().GetString(remoteRunAsUserFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteRunAsUser = remoteRunAsUserFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskRunConfigPropRuntimeFlags(depth int, m *models.TaskRunConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeFlagName := fmt.Sprintf("%v.runtime", cmdPrefix)
	if cmd.Flags().Changed(runtimeFlagName) {
		// info: complex object runtime Runtime is retrieved outside this Changed() block
	}
	runtimeFlagValue := m.Runtime
	if swag.IsZero(runtimeFlagValue) {
		runtimeFlagValue = &models.Runtime{}
	}

	err, runtimeAdded := retrieveModelRuntimeFlags(depth+1, runtimeFlagValue, runtimeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeAdded
	if runtimeAdded {
		m.Runtime = runtimeFlagValue
	}

	return nil, retAdded
}

func retrieveTaskRunConfigPropTriggerFlags(depth int, m *models.TaskRunConfig, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerFlagName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(triggerFlagName) {
		// info: complex object trigger Trigger is retrieved outside this Changed() block
	}
	triggerFlagValue := m.Trigger
	if swag.IsZero(triggerFlagValue) {
		triggerFlagValue = &models.Trigger{}
	}

	err, triggerAdded := retrieveModelTriggerFlags(depth+1, triggerFlagValue, triggerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded
	if triggerAdded {
		m.Trigger = triggerFlagValue
	}

	return nil, retAdded
}
