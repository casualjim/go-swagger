// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for TokensStatus

// register flags to command
func registerModelTokensStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTokensStatusPropConsumed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokensStatusPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTokensStatusPropConsumed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	consumedDescription := `Required. Number of token currently consumed by the account`

	var consumedFlagName string
	if cmdPrefix == "" {
		consumedFlagName = "consumed"
	} else {
		consumedFlagName = fmt.Sprintf("%v.consumed", cmdPrefix)
	}

	var consumedFlagDefault int32

	_ = cmd.PersistentFlags().Int32(consumedFlagName, consumedFlagDefault, consumedDescription)

	return nil
}

func registerTokensStatusPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDescription := `Required. Number of token allowed for the account`

	var totalFlagName string
	if cmdPrefix == "" {
		totalFlagName = "total"
	} else {
		totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var totalFlagDefault int32

	_ = cmd.PersistentFlags().Int32(totalFlagName, totalFlagDefault, totalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTokensStatusFlags(depth int, m *models.TokensStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, consumedAdded := retrieveTokensStatusPropConsumedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || consumedAdded

	err, totalAdded := retrieveTokensStatusPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalAdded

	return nil, retAdded
}

func retrieveTokensStatusPropConsumedFlags(depth int, m *models.TokensStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	consumedFlagName := fmt.Sprintf("%v.consumed", cmdPrefix)
	if cmd.Flags().Changed(consumedFlagName) {

		var consumedFlagName string
		if cmdPrefix == "" {
			consumedFlagName = "consumed"
		} else {
			consumedFlagName = fmt.Sprintf("%v.consumed", cmdPrefix)
		}

		consumedFlagValue, err := cmd.Flags().GetInt32(consumedFlagName)
		if err != nil {
			return err, false
		}
		m.Consumed = &consumedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokensStatusPropTotalFlags(depth int, m *models.TokensStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(totalFlagName) {

		var totalFlagName string
		if cmdPrefix == "" {
			totalFlagName = "total"
		} else {
			totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		totalFlagValue, err := cmd.Flags().GetInt32(totalFlagName)
		if err != nil {
			return err, false
		}
		m.Total = &totalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
