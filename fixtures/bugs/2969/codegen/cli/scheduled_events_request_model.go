// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ScheduledEventsRequest

// register flags to command
func registerModelScheduledEventsRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerScheduledEventsRequestPropEnvironmentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsRequestPropFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsRequestPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsRequestPropOffset(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsRequestPropRuntime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsRequestPropTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsRequestPropTo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsRequestPropWorkspaceIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerScheduledEventsRequestPropEnvironmentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentIdDescription := `Required. Environment id`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerScheduledEventsRequestPropFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fromDescription := `From date time (milliseconds).Default value - now`

	var fromFlagName string
	if cmdPrefix == "" {
		fromFlagName = "from"
	} else {
		fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
	}

	var fromFlagDefault int64

	_ = cmd.PersistentFlags().Int64(fromFlagName, fromFlagDefault, fromDescription)

	return nil
}

func registerScheduledEventsRequestPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	limitDescription := `The number of items to return. Must be in range [1, 100]. Default value - 100`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}

func registerScheduledEventsRequestPropOffset(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	offsetDescription := `The position of the first item. Must be greater than or equal to 0. Default value - 0`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}

func registerScheduledEventsRequestPropRuntime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var runtimeFlagName string
	if cmdPrefix == "" {
		runtimeFlagName = "runtime"
	} else {
		runtimeFlagName = fmt.Sprintf("%v.runtime", cmdPrefix)
	}

	if err := registerModelScheduledEventsRequestRuntimeFlags(depth+1, runtimeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerScheduledEventsRequestPropTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerScheduledEventsRequestPropTo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	toDescription := `Required. To date time (milliseconds)`

	var toFlagName string
	if cmdPrefix == "" {
		toFlagName = "to"
	} else {
		toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
	}

	var toFlagDefault int64

	_ = cmd.PersistentFlags().Int64(toFlagName, toFlagDefault, toDescription)

	return nil
}

func registerScheduledEventsRequestPropWorkspaceIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: workspaceIds []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelScheduledEventsRequestFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, environmentIdAdded := retrieveScheduledEventsRequestPropEnvironmentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentIdAdded

	err, fromAdded := retrieveScheduledEventsRequestPropFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fromAdded

	err, limitAdded := retrieveScheduledEventsRequestPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || limitAdded

	err, offsetAdded := retrieveScheduledEventsRequestPropOffsetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || offsetAdded

	err, runtimeAdded := retrieveScheduledEventsRequestPropRuntimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeAdded

	err, tagsAdded := retrieveScheduledEventsRequestPropTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, toAdded := retrieveScheduledEventsRequestPropToFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || toAdded

	err, workspaceIdsAdded := retrieveScheduledEventsRequestPropWorkspaceIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdsAdded

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropEnvironmentIDFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentIdFlagName := fmt.Sprintf("%v.environmentId", cmdPrefix)
	if cmd.Flags().Changed(environmentIdFlagName) {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = &environmentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropFromFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fromFlagName := fmt.Sprintf("%v.from", cmdPrefix)
	if cmd.Flags().Changed(fromFlagName) {

		var fromFlagName string
		if cmdPrefix == "" {
			fromFlagName = "from"
		} else {
			fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
		}

		fromFlagValue, err := cmd.Flags().GetInt64(fromFlagName)
		if err != nil {
			return err, false
		}
		m.From = fromFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropLimitFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	limitFlagName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(limitFlagName) {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt32(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = limitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropOffsetFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	offsetFlagName := fmt.Sprintf("%v.offset", cmdPrefix)
	if cmd.Flags().Changed(offsetFlagName) {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = offsetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropRuntimeFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeFlagName := fmt.Sprintf("%v.runtime", cmdPrefix)
	if cmd.Flags().Changed(runtimeFlagName) {
		// info: complex object runtime ScheduledEventsRequestRuntime is retrieved outside this Changed() block
	}
	runtimeFlagValue := m.Runtime
	if swag.IsZero(runtimeFlagValue) {
		runtimeFlagValue = &models.ScheduledEventsRequestRuntime{}
	}

	err, runtimeAdded := retrieveModelScheduledEventsRequestRuntimeFlags(depth+1, runtimeFlagValue, runtimeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeAdded
	if runtimeAdded {
		m.Runtime = runtimeFlagValue
	}

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropTagsFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropToFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	toFlagName := fmt.Sprintf("%v.to", cmdPrefix)
	if cmd.Flags().Changed(toFlagName) {

		var toFlagName string
		if cmdPrefix == "" {
			toFlagName = "to"
		} else {
			toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
		}

		toFlagValue, err := cmd.Flags().GetInt64(toFlagName)
		if err != nil {
			return err, false
		}
		m.To = &toFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsRequestPropWorkspaceIdsFlags(depth int, m *models.ScheduledEventsRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdsFlagName := fmt.Sprintf("%v.workspaceIds", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdsFlagName) {
		// warning: workspaceIds array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
