// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var (
	// debug flag indicating that cli should output debug logs
	debug bool

	// config file location
	configFile string

	// dry run flag
	dryRun bool

	// name of the executable
	exeName = filepath.Base(os.Args[0])
)

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, _ []string) (*client.TalendManagementConsolePublicAPI, error) {
	hostname := viper.GetString("hostname")
	viper.SetDefault("base_path", client.DefaultBasePath)
	basePath := viper.GetString("base_path")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, basePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	r.Consumers["application/json"] = runtime.JSONConsumer()

	// warning: consumes multipart/form-data is not supported by go-swagger cli yet

	r.Producers["application/json"] = runtime.JSONProducer()

	// warning: produces text/plain is not supported by go-swagger cli yet

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	if err := viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname")); err != nil {
		return nil, err
	}
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	if err := viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme")); err != nil {
		return nil, err
	}
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	rootCmd.PersistentFlags().String("base-path", client.DefaultBasePath, fmt.Sprintf("For example: %v", client.DefaultBasePath))
	if err := viper.BindPFlag("base_path", rootCmd.PersistentFlags().Lookup("base-path")); err != nil {
		return nil, err
	}

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	if err := registerAuthInoWriterFlags(rootCmd); err != nil {
		return nil, err
	}
	// add all operation groups
	c0, err := makeGroupOfOperationsAccountSubscriptionCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c0)
	c1, err := makeGroupOfOperationsArtifactsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c1)
	c2, err := makeGroupOfOperationsConnectionsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c2)
	c3, err := makeGroupOfOperationsEnvironmentsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c3)
	c4, err := makeGroupOfOperationsExecutionsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c4)
	c5, err := makeGroupOfOperationsExecutionsLogsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c5)
	c6, err := makeGroupOfOperationsPlansExecutablesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c6)
	c7, err := makeGroupOfOperationsPlansExecutionsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c7)
	c8, err := makeGroupOfOperationsProjectsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c8)
	c9, err := makeGroupOfOperationsProjectsAuthorizationCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c9)
	c10, err := makeGroupOfOperationsPromotionsExecutablesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c10)
	c11, err := makeGroupOfOperationsPromotionsExecutablesAuthorizationCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c11)
	c12, err := makeGroupOfOperationsPromotionsExecutionsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c12)
	c13, err := makeGroupOfOperationsResourcesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c13)
	c14, err := makeGroupOfOperationsRuntimeClustersCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c14)
	c15, err := makeGroupOfOperationsRuntimeClustersRunProfilesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c15)
	c16, err := makeGroupOfOperationsRuntimeEnginesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c16)
	c17, err := makeGroupOfOperationsRuntimeEnginesRunProfilesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c17)
	c18, err := makeGroupOfOperationsRuntimePipelineEnginesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c18)
	c19, err := makeGroupOfOperationsRuntimePipelineEnginesRunProfilesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c19)
	c20, err := makeGroupOfOperationsRuntimePipelineEnginesRunProfilesAdvancedCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c20)
	c21, err := makeGroupOfOperationsRuntimePipelineEnginesRunProfilesBigDataCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c21)
	c22, err := makeGroupOfOperationsRuntimePipelineEnginesRunProfilesDataIntegrationCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c22)
	c23, err := makeGroupOfOperationsRuntimePipelineEnginesRunProfilesDatabricksCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c23)
	c24, err := makeGroupOfOperationsRuntimePipelineEnginesRunProfilesStandardCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c24)
	c25, err := makeGroupOfOperationsSchedulesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c25)
	c26, err := makeGroupOfOperationsTasksCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c26)
	c27, err := makeGroupOfOperationsWorkspacesCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c27)
	c28, err := makeGroupOfOperationsWorkspacesPermissionsCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(c28)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		// look for default config (OS-specific, e.g. ".config" on linux)
		configdir, err := os.UserConfigDir()
		if err != nil {
			// fallback and try finding the home directory.
			home, err := os.UserHomeDir()
			cobra.CheckErr(err)
			configDir = path.Join(home, ".config")
		}

		// Search config in the config directory with name of the CLI binary (without extension).
		configDir = path.Join(configDir, exeName)
		viper.AddConfigPath(configDir)
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

// registerAuthInoWriterFlags registers all flags needed to perform authentication
func registerAuthInoWriterFlags(cmd *cobra.Command) error {
	/*Authorization */
	cmd.PersistentFlags().String("Authorization", "", ``)
	if err := viper.BindPFlag("Authorization", cmd.PersistentFlags().Lookup("Authorization")); err != nil {
		return err
	}
	return nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	auths := []runtime.ClientAuthInfoWriter{}
	// Authorization
	if viper.IsSet("Authorization") {
		AuthorizationKey := viper.GetString("Authorization")
		auths = append(auths, httptransport.APIKeyAuth("Authorization", "header", AuthorizationKey))
	}

	if len(auths) == 0 {
		logDebugf("Warning: No auth params detected.")
		return nil, nil
	}

	// compose all auths together
	return httptransport.Compose(auths...), nil
}

// makeGroupOfOperationsAccountSubscriptionCmd returns a parent command to handle all operations with tag "account_subscription"
func makeGroupOfOperationsAccountSubscriptionCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "account_subscription",
		Long: ``,
	}

	sub0, err := makeOperationAccountSubscriptionSubscriptionGetCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	return parent, nil
}

// makeGroupOfOperationsArtifactsCmd returns a parent command to handle all operations with tag "artifacts"
func makeGroupOfOperationsArtifactsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "artifacts",
		Long: ``,
	}

	sub0, err := makeOperationArtifactsDeleteArtifactCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationArtifactsDeleteArtifactOfVersionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationArtifactsGetArtifactCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationArtifactsGetArtifactOfVersionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationArtifactsGetArtifactsAvailableCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	return parent, nil
}

// makeGroupOfOperationsConnectionsCmd returns a parent command to handle all operations with tag "connections"
func makeGroupOfOperationsConnectionsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "connections",
		Long: ``,
	}

	sub0, err := makeOperationConnectionsCreateConnectionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationConnectionsDeleteConnectionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationConnectionsGetConnectionDetailsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationConnectionsGetConnectionsPageCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationConnectionsUpdateConnectionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	return parent, nil
}

// makeGroupOfOperationsEnvironmentsCmd returns a parent command to handle all operations with tag "environments"
func makeGroupOfOperationsEnvironmentsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "environments",
		Long: ``,
	}

	sub0, err := makeOperationEnvironmentsCreateEnvironmentCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationEnvironmentsDeleteEnvironmentCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationEnvironmentsGetEnvironmentsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationEnvironmentsUpdateEnvironmentCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	return parent, nil
}

// makeGroupOfOperationsExecutionsCmd returns a parent command to handle all operations with tag "executions"
func makeGroupOfOperationsExecutionsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "executions",
		Long: ``,
	}

	sub0, err := makeOperationExecutionsExecuteCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationExecutionsGetTaskExecutionStatusCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationExecutionsStopExecutionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsExecutionsLogsCmd returns a parent command to handle all operations with tag "executions_logs"
func makeGroupOfOperationsExecutionsLogsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "executions_logs",
		Long: ``,
	}

	sub0, err := makeOperationExecutionsLogsCheckDownloadTokenStatusCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationExecutionsLogsGenerateFullTaskExecutionLogsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationExecutionsLogsGetTaskExecutionLogCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsPlansExecutablesCmd returns a parent command to handle all operations with tag "plans_executables"
func makeGroupOfOperationsPlansExecutablesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "plans_executables",
		Long: ``,
	}

	sub0, err := makeOperationPlansExecutablesConfigurePlanExecutionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationPlansExecutablesCreatePlanCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationPlansExecutablesDeletePlanCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationPlansExecutablesGetAvailablePlansCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationPlansExecutablesGetExecutableDetailsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationPlansExecutablesGetPlanRunConfigurationCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	sub6, err := makeOperationPlansExecutablesGetPlanScheduleMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub6)

	sub7, err := makeOperationPlansExecutablesGetPlanScheduledEventsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub7)

	sub8, err := makeOperationPlansExecutablesLinkPlanScheduleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub8)

	sub9, err := makeOperationPlansExecutablesPausePlanExecutionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub9)

	sub10, err := makeOperationPlansExecutablesStopScheduleForPlanCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub10)

	sub11, err := makeOperationPlansExecutablesUnlinkPlanScheduleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub11)

	sub12, err := makeOperationPlansExecutablesUpdatePlanCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub12)

	return parent, nil
}

// makeGroupOfOperationsPlansExecutionsCmd returns a parent command to handle all operations with tag "plans_executions"
func makeGroupOfOperationsPlansExecutionsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "plans_executions",
		Long: ``,
	}

	sub0, err := makeOperationPlansExecutionsExecutePlanCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationPlansExecutionsGetAllStepExecutionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationPlansExecutionsGetPlanExecutionStatusCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationPlansExecutionsGetStepExecutionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationPlansExecutionsGetStepHandlerExecutionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationPlansExecutionsListAvailablePlansExecutionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	sub6, err := makeOperationPlansExecutionsListPlanExecutionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub6)

	return parent, nil
}

// makeGroupOfOperationsProjectsCmd returns a parent command to handle all operations with tag "projects"
func makeGroupOfOperationsProjectsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "projects",
		Long: ``,
	}

	sub0, err := makeOperationProjectsCreateProjectCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationProjectsDeleteProjectCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationProjectsGetProjectCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationProjectsGetProjectsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationProjectsUpdateProjectCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	return parent, nil
}

// makeGroupOfOperationsProjectsAuthorizationCmd returns a parent command to handle all operations with tag "projects_authorization"
func makeGroupOfOperationsProjectsAuthorizationCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "projects_authorization",
		Long: ``,
	}

	sub0, err := makeOperationProjectsAuthorizationAddGroupProjectAuthorizationCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationProjectsAuthorizationAddUserProjectAuthorizationCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationProjectsAuthorizationDeleteGroupProjectAuthorizationsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationProjectsAuthorizationDeleteUserProjectAuthorizationsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationProjectsAuthorizationGetGroupProjectAuthorizationsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationProjectsAuthorizationGetUserProjectAuthorizationsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	return parent, nil
}

// makeGroupOfOperationsPromotionsExecutablesCmd returns a parent command to handle all operations with tag "promotions_executables"
func makeGroupOfOperationsPromotionsExecutablesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "promotions_executables",
		Long: ``,
	}

	sub0, err := makeOperationPromotionsExecutablesCreatePromotionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationPromotionsExecutablesDeletePromotionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationPromotionsExecutablesGetAvailablePromotionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationPromotionsExecutablesGetPromotionDetailsByIDCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationPromotionsExecutablesPerformPromotionAnalysisCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationPromotionsExecutablesUpdatePromotionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	return parent, nil
}

// makeGroupOfOperationsPromotionsExecutablesAuthorizationCmd returns a parent command to handle all operations with tag "promotions_executables_authorization"
func makeGroupOfOperationsPromotionsExecutablesAuthorizationCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "promotions_executables_authorization",
		Long: ``,
	}

	sub0, err := makeOperationPromotionsExecutablesAuthorizationAddPromotionUserCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationPromotionsExecutablesAuthorizationDeletePromotionUserCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationPromotionsExecutablesAuthorizationGetPromotionUsersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsPromotionsExecutionsCmd returns a parent command to handle all operations with tag "promotions_executions"
func makeGroupOfOperationsPromotionsExecutionsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "promotions_executions",
		Long: ``,
	}

	sub0, err := makeOperationPromotionsExecutionsExecutePromotionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationPromotionsExecutionsGetPromotionExecutionStatusCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationPromotionsExecutionsPerformPromotionAnalysisDeprecatedCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsResourcesCmd returns a parent command to handle all operations with tag "resources"
func makeGroupOfOperationsResourcesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "resources",
		Long: ``,
	}

	sub0, err := makeOperationResourcesCreateResourceCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationResourcesDeleteResourceCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationResourcesGetResourceCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationResourcesGetResourcesCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationResourcesUpdateResourceCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationResourcesUpdateResourceAttachmentCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	return parent, nil
}

// makeGroupOfOperationsRuntimeClustersCmd returns a parent command to handle all operations with tag "runtime_clusters"
func makeGroupOfOperationsRuntimeClustersCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_clusters",
		Long: ``,
	}

	sub0, err := makeOperationRuntimeClustersAddRemoteEngineToClusterCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimeClustersCreateRemoteEngineClusterCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimeClustersDeleteRemoteEngineClusterCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationRuntimeClustersGetEngineClustersAvailableCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationRuntimeClustersGetRemoteEngineClusterCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationRuntimeClustersRemoveRemoteEngineFromClusterCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	return parent, nil
}

// makeGroupOfOperationsRuntimeClustersRunProfilesCmd returns a parent command to handle all operations with tag "runtime_clusters_run_profiles"
func makeGroupOfOperationsRuntimeClustersRunProfilesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_clusters_run_profiles",
		Long: ``,
	}

	sub0, err := makeOperationRuntimeClustersRunProfilesCreateClusterRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimeClustersRunProfilesDeleteClusterRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimeClustersRunProfilesGetClusterRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationRuntimeClustersRunProfilesGetClusterRunProfilesCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationRuntimeClustersRunProfilesUpdateClusterRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	return parent, nil
}

// makeGroupOfOperationsRuntimeEnginesCmd returns a parent command to handle all operations with tag "runtime_engines"
func makeGroupOfOperationsRuntimeEnginesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_engines",
		Long: ``,
	}

	sub0, err := makeOperationRuntimeEnginesCreateRemoteEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimeEnginesDebugRemoteEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimeEnginesDeleteRemoteEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationRuntimeEnginesGetRemoteEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationRuntimeEnginesGetRemoteEnginesCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationRuntimeEnginesUnpairRemoteEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	return parent, nil
}

// makeGroupOfOperationsRuntimeEnginesRunProfilesCmd returns a parent command to handle all operations with tag "runtime_engines_run_profiles"
func makeGroupOfOperationsRuntimeEnginesRunProfilesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_engines_run_profiles",
		Long: ``,
	}

	sub0, err := makeOperationRuntimeEnginesRunProfilesCreateEngineRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimeEnginesRunProfilesGetEngineRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationRuntimeEnginesRunProfilesGetEngineRunProfilesCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationRuntimeEnginesRunProfilesUpdateEngineRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	return parent, nil
}

// makeGroupOfOperationsRuntimePipelineEnginesCmd returns a parent command to handle all operations with tag "runtime_pipeline_engines"
func makeGroupOfOperationsRuntimePipelineEnginesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_pipeline_engines",
		Long: ``,
	}

	sub0, err := makeOperationRuntimePipelineEnginesCreatePipelineEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimePipelineEnginesDeletePipelineEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimePipelineEnginesGetPipelineEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationRuntimePipelineEnginesGetPipelineEnginesCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationRuntimePipelineEnginesUnpairPipelineEngineCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	return parent, nil
}

// makeGroupOfOperationsRuntimePipelineEnginesRunProfilesCmd returns a parent command to handle all operations with tag "runtime_pipeline_engines_run_profiles"
func makeGroupOfOperationsRuntimePipelineEnginesRunProfilesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_pipeline_engines_run_profiles",
		Long: ``,
	}

	sub0, err := makeOperationRuntimePipelineEnginesRunProfilesDeletePipelineRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimePipelineEnginesRunProfilesGetRunProfileByEngineIDCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	return parent, nil
}

// makeGroupOfOperationsRuntimePipelineEnginesRunProfilesAdvancedCmd returns a parent command to handle all operations with tag "runtime_pipeline_engines_run_profiles_advanced"
func makeGroupOfOperationsRuntimePipelineEnginesRunProfilesAdvancedCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_pipeline_engines_run_profiles_advanced",
		Long: ``,
	}

	sub0, err := makeOperationRuntimePipelineEnginesRunProfilesAdvancedCreateRunProfileAdvancedCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimePipelineEnginesRunProfilesAdvancedGetAdvancedRunProfileByIDCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimePipelineEnginesRunProfilesAdvancedUpdateRunProfileAdvancedCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsRuntimePipelineEnginesRunProfilesBigDataCmd returns a parent command to handle all operations with tag "runtime_pipeline_engines_run_profiles_big_data"
func makeGroupOfOperationsRuntimePipelineEnginesRunProfilesBigDataCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_pipeline_engines_run_profiles_big_data",
		Long: ``,
	}

	sub0, err := makeOperationRuntimePipelineEnginesRunProfilesBigDataCreateRunProfileBigDataCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimePipelineEnginesRunProfilesBigDataGetBigDataRunProfileByIDCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimePipelineEnginesRunProfilesBigDataUpdateRunProfileBigDataCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsRuntimePipelineEnginesRunProfilesDataIntegrationCmd returns a parent command to handle all operations with tag "runtime_pipeline_engines_run_profiles_data_integration"
func makeGroupOfOperationsRuntimePipelineEnginesRunProfilesDataIntegrationCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_pipeline_engines_run_profiles_data_integration",
		Long: ``,
	}

	sub0, err := makeOperationRuntimePipelineEnginesRunProfilesDataIntegrationCreateDataIntegrationRunProfileCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimePipelineEnginesRunProfilesDataIntegrationGetDataIntegrationRunProfileByIDCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimePipelineEnginesRunProfilesDataIntegrationUpdateRunProfileDataIntegrationCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsRuntimePipelineEnginesRunProfilesDatabricksCmd returns a parent command to handle all operations with tag "runtime_pipeline_engines_run_profiles_databricks"
func makeGroupOfOperationsRuntimePipelineEnginesRunProfilesDatabricksCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_pipeline_engines_run_profiles_databricks",
		Long: ``,
	}

	sub0, err := makeOperationRuntimePipelineEnginesRunProfilesDatabricksCreateRunProfileDatabricksCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimePipelineEnginesRunProfilesDatabricksGetDatabricksRunProfileByIDCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimePipelineEnginesRunProfilesDatabricksUpdateRunProfileDatabricksCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsRuntimePipelineEnginesRunProfilesStandardCmd returns a parent command to handle all operations with tag "runtime_pipeline_engines_run_profiles_standard"
func makeGroupOfOperationsRuntimePipelineEnginesRunProfilesStandardCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "runtime_pipeline_engines_run_profiles_standard",
		Long: ``,
	}

	sub0, err := makeOperationRuntimePipelineEnginesRunProfilesStandardCreateRunProfileStandardCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationRuntimePipelineEnginesRunProfilesStandardGetStandardRunProfileByIDCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationRuntimePipelineEnginesRunProfilesStandardUpdateRunProfileStandardCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	return parent, nil
}

// makeGroupOfOperationsSchedulesCmd returns a parent command to handle all operations with tag "schedules"
func makeGroupOfOperationsSchedulesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "schedules",
		Long: ``,
	}

	sub0, err := makeOperationSchedulesAppendTriggerToScheduleMultipleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationSchedulesCloneScheduleMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationSchedulesCreateScheduleMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationSchedulesDeleteScheduleMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationSchedulesDeleteTriggerFromScheduleMultipleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationSchedulesGetAllSchedulesMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	sub6, err := makeOperationSchedulesGetScheduleMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub6)

	sub7, err := makeOperationSchedulesSimulateNextTriggeredEventsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub7)

	sub8, err := makeOperationSchedulesUpdateScheduleMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub8)

	sub9, err := makeOperationSchedulesUpdateTriggerInScheduleMultipleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub9)

	return parent, nil
}

// makeGroupOfOperationsTasksCmd returns a parent command to handle all operations with tag "tasks"
func makeGroupOfOperationsTasksCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "tasks",
		Long: ``,
	}

	sub0, err := makeOperationTasksConfigureTaskExecutionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationTasksCreateTaskCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationTasksDeleteTaskCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationTasksExecutablelistAvailableTaskExecutionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationTasksGetAvailableTasksCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationTasksGetScheduledEventsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	sub6, err := makeOperationTasksGetTaskCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub6)

	sub7, err := makeOperationTasksGetTaskConfigurationCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub7)

	sub8, err := makeOperationTasksGetTaskScheduleMultipleTriggersCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub8)

	sub9, err := makeOperationTasksGetTaskScheduledEventsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub9)

	sub10, err := makeOperationTasksLinkTaskScheduleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub10)

	sub11, err := makeOperationTasksListAvailableTaskExecutionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub11)

	sub12, err := makeOperationTasksListTaskExecutionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub12)

	sub13, err := makeOperationTasksPauseTaskExecutionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub13)

	sub14, err := makeOperationTasksSearchTasksCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub14)

	sub15, err := makeOperationTasksStopScheduleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub15)

	sub16, err := makeOperationTasksUnlinkTaskScheduleCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub16)

	sub17, err := makeOperationTasksUpdateTaskCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub17)

	return parent, nil
}

// makeGroupOfOperationsWorkspacesCmd returns a parent command to handle all operations with tag "workspaces"
func makeGroupOfOperationsWorkspacesCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "workspaces",
		Long: ``,
	}

	sub0, err := makeOperationWorkspacesCreateCustomWorkspaceCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationWorkspacesDeleteWorkspaceCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationWorkspacesGetWorkspacesCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationWorkspacesUpdateCustomWorkspaceCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	return parent, nil
}

// makeGroupOfOperationsWorkspacesPermissionsCmd returns a parent command to handle all operations with tag "workspaces_permissions"
func makeGroupOfOperationsWorkspacesPermissionsCmd() (*cobra.Command, error) {
	parent := &cobra.Command{
		Use:  "workspaces_permissions",
		Long: ``,
	}

	sub0, err := makeOperationWorkspacesPermissionsCreatePermissionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub0)

	sub1, err := makeOperationWorkspacesPermissionsCreateWorkspacePermissionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub1)

	sub2, err := makeOperationWorkspacesPermissionsDeletePermissionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub2)

	sub3, err := makeOperationWorkspacesPermissionsDeleteWorkspacePermissionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub3)

	sub4, err := makeOperationWorkspacesPermissionsGetPermissionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub4)

	sub5, err := makeOperationWorkspacesPermissionsGetWorkspacePermissionCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub5)

	sub6, err := makeOperationWorkspacesPermissionsUpdatePermissionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub6)

	sub7, err := makeOperationWorkspacesPermissionsUpdateWorkspacePermissionsCmd()
	if err != nil {
		return nil, err
	}
	parent.AddCommand(sub7)

	return parent, nil
}
