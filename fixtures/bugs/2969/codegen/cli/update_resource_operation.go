// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/resources"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationResourcesUpdateResourceCmd returns a command to handle operation updateResource
func makeOperationResourcesUpdateResourceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateResource",
		Short: ``,
		RunE:  runOperationResourcesUpdateResource,
	}

	if err := registerOperationResourcesUpdateResourceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationResourcesUpdateResource uses cmd flags to call endpoint api
func runOperationResourcesUpdateResource(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := resources.NewUpdateResourceParams()
	if err, _ = retrieveOperationResourcesUpdateResourceResourceDetailFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationResourcesUpdateResourceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationResourcesUpdateResourceResult(appCli.Resources.UpdateResource(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationResourcesUpdateResourceParamFlags registers all flags needed to fill params
func registerOperationResourcesUpdateResourceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationResourcesUpdateResourceResourceDetailParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationResourcesUpdateResourceIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationResourcesUpdateResourceResourceDetailParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var resourceDetailFlagName string
	if cmdPrefix == "" {
		resourceDetailFlagName = "Resource detail"
	} else {
		resourceDetailFlagName = fmt.Sprintf("%v.Resource detail", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(resourceDetailFlagName, "", "Optional json string for [Resource detail]. Resource detail")

	// add flags for body
	if err := registerModelUpdateResourceRequestFlags(0, "updateResourceRequest", cmd); err != nil {
		return err
	}

	return nil
}

func registerOperationResourcesUpdateResourceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Resource ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationResourcesUpdateResourceResourceDetailFlag(m *resources.UpdateResourceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("Resource detail") {
		// Read Resource detail string from cmd and unmarshal
		resourceDetailValueStr, err := cmd.Flags().GetString("Resource detail")
		if err != nil {
			return err, false
		}

		resourceDetailValue := models.UpdateResourceRequest{}
		if err := json.Unmarshal([]byte(resourceDetailValueStr), &resourceDetailValue); err != nil {
			return fmt.Errorf("cannot unmarshal Resource detail string in models.UpdateResourceRequest: %v", err), false
		}
		m.ResourceDetail = &resourceDetailValue
	}
	resourceDetailValueModel := m.ResourceDetail
	if swag.IsZero(resourceDetailValueModel) {
		resourceDetailValueModel = &models.UpdateResourceRequest{}
	}
	err, added := retrieveModelUpdateResourceRequestFlags(0, resourceDetailValueModel, "updateResourceRequest", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.ResourceDetail = resourceDetailValueModel
	}

	if dryRun && debug {
		resourceDetailValueDebugBytes, err := json.Marshal(m.ResourceDetail)
		if err != nil {
			return err, false
		}
		logDebugf("ResourceDetail dry-run payload: %v", string(resourceDetailValueDebugBytes))
	}

	retAdded = retAdded || added

	return nil, retAdded
}

func retrieveOperationResourcesUpdateResourceIDFlag(m *resources.UpdateResourceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}

	return nil, retAdded
}

// parseOperationResourcesUpdateResourceResult parses request result and return the string content
func parseOperationResourcesUpdateResourceResult(resp0 *resources.UpdateResourceNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateResourceNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*resources.UpdateResourceBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*resources.UpdateResourceUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*resources.UpdateResourceForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*resources.UpdateResourceNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*resources.UpdateResourceInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updateResourceNoContent is not supported by go-swagger cli yet.

	return "", nil
}
