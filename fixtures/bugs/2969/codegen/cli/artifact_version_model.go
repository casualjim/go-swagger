// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ArtifactVersion

// register flags to command
func registerModelArtifactVersionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerArtifactVersionPropCreateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropMarketplaceProduct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropPublisher(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropUpdateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactVersionPropWorkspace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerArtifactVersionPropCreateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createDateDescription := `Created on`

	var createDateFlagName string
	if cmdPrefix == "" {
		createDateFlagName = "createDate"
	} else {
		createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createDateFlagName, "", createDateDescription)

	return nil
}

func registerArtifactVersionPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Artifact description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerArtifactVersionPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Id of artifact`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerArtifactVersionPropMarketplaceProduct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	marketplaceProductDescription := `Required. Marketplace product`

	var marketplaceProductFlagName string
	if cmdPrefix == "" {
		marketplaceProductFlagName = "marketplaceProduct"
	} else {
		marketplaceProductFlagName = fmt.Sprintf("%v.marketplaceProduct", cmdPrefix)
	}

	var marketplaceProductFlagDefault string

	_ = cmd.PersistentFlags().String(marketplaceProductFlagName, marketplaceProductFlagDefault, marketplaceProductDescription)

	return nil
}

func registerArtifactVersionPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name of artifact`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerArtifactVersionPropParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters []*ArtifactParameter array type is not supported by go-swagger cli yet

	return nil
}

func registerArtifactVersionPropPublisher(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publisherDescription := `Required. Artifact publisher`

	var publisherFlagName string
	if cmdPrefix == "" {
		publisherFlagName = "publisher"
	} else {
		publisherFlagName = fmt.Sprintf("%v.publisher", cmdPrefix)
	}

	var publisherFlagDefault string

	_ = cmd.PersistentFlags().String(publisherFlagName, publisherFlagDefault, publisherDescription)

	return nil
}

func registerArtifactVersionPropRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var repositoryFlagName string
	if cmdPrefix == "" {
		repositoryFlagName = "repository"
	} else {
		repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
	}

	if err := registerModelSourcesRepositoryDataFlags(depth+1, repositoryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerArtifactVersionPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["standard","big_data_streaming","big_data_batch","route","data-service"]. Required. Artifact type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["standard","big_data_streaming","big_data_batch","route","data-service"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerArtifactVersionPropUpdateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateDateDescription := `Updated on`

	var updateDateFlagName string
	if cmdPrefix == "" {
		updateDateFlagName = "updateDate"
	} else {
		updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateDateFlagName, "", updateDateDescription)

	return nil
}

func registerArtifactVersionPropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Required. Artifact version`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerArtifactVersionPropWorkspace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var workspaceFlagName string
	if cmdPrefix == "" {
		workspaceFlagName = "workspace"
	} else {
		workspaceFlagName = fmt.Sprintf("%v.workspace", cmdPrefix)
	}

	if err := registerModelWorkspaceInfoFlags(depth+1, workspaceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelArtifactVersionFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createDateAdded := retrieveArtifactVersionPropCreateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createDateAdded

	err, descriptionAdded := retrieveArtifactVersionPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrieveArtifactVersionPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, marketplaceProductAdded := retrieveArtifactVersionPropMarketplaceProductFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || marketplaceProductAdded

	err, nameAdded := retrieveArtifactVersionPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, parametersAdded := retrieveArtifactVersionPropParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, publisherAdded := retrieveArtifactVersionPropPublisherFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publisherAdded

	err, repositoryAdded := retrieveArtifactVersionPropRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded

	err, typeAdded := retrieveArtifactVersionPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, updateDateAdded := retrieveArtifactVersionPropUpdateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateDateAdded

	err, versionAdded := retrieveArtifactVersionPropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, workspaceAdded := retrieveArtifactVersionPropWorkspaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded

	return nil, retAdded
}

func retrieveArtifactVersionPropCreateDateFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createDateFlagName := fmt.Sprintf("%v.createDate", cmdPrefix)
	if cmd.Flags().Changed(createDateFlagName) {

		var createDateFlagName string
		if cmdPrefix == "" {
			createDateFlagName = "createDate"
		} else {
			createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
		}

		createDateFlagValueStr, err := cmd.Flags().GetString(createDateFlagName)
		if err != nil {
			return err, false
		}
		var createDateFlagValue strfmt.DateTime
		if err := createDateFlagValue.UnmarshalText([]byte(createDateFlagValueStr)); err != nil {
			return err, false
		}
		m.CreateDate = createDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropDescriptionFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropIDFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropMarketplaceProductFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	marketplaceProductFlagName := fmt.Sprintf("%v.marketplaceProduct", cmdPrefix)
	if cmd.Flags().Changed(marketplaceProductFlagName) {

		var marketplaceProductFlagName string
		if cmdPrefix == "" {
			marketplaceProductFlagName = "marketplaceProduct"
		} else {
			marketplaceProductFlagName = fmt.Sprintf("%v.marketplaceProduct", cmdPrefix)
		}

		marketplaceProductFlagValue, err := cmd.Flags().GetString(marketplaceProductFlagName)
		if err != nil {
			return err, false
		}
		m.MarketplaceProduct = &marketplaceProductFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropNameFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropParametersFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters array type []*ArtifactParameter is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropPublisherFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publisherFlagName := fmt.Sprintf("%v.publisher", cmdPrefix)
	if cmd.Flags().Changed(publisherFlagName) {

		var publisherFlagName string
		if cmdPrefix == "" {
			publisherFlagName = "publisher"
		} else {
			publisherFlagName = fmt.Sprintf("%v.publisher", cmdPrefix)
		}

		publisherFlagValue, err := cmd.Flags().GetString(publisherFlagName)
		if err != nil {
			return err, false
		}
		m.Publisher = &publisherFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropRepositoryFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryFlagName := fmt.Sprintf("%v.repository", cmdPrefix)
	if cmd.Flags().Changed(repositoryFlagName) {
		// info: complex object repository SourcesRepositoryData is retrieved outside this Changed() block
	}
	repositoryFlagValue := m.Repository
	if swag.IsZero(repositoryFlagValue) {
		repositoryFlagValue = &models.SourcesRepositoryData{}
	}

	err, repositoryAdded := retrieveModelSourcesRepositoryDataFlags(depth+1, repositoryFlagValue, repositoryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded
	if repositoryAdded {
		m.Repository = repositoryFlagValue
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropTypeFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropUpdateDateFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateDateFlagName := fmt.Sprintf("%v.updateDate", cmdPrefix)
	if cmd.Flags().Changed(updateDateFlagName) {

		var updateDateFlagName string
		if cmdPrefix == "" {
			updateDateFlagName = "updateDate"
		} else {
			updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
		}

		updateDateFlagValueStr, err := cmd.Flags().GetString(updateDateFlagName)
		if err != nil {
			return err, false
		}
		var updateDateFlagValue strfmt.DateTime
		if err := updateDateFlagValue.UnmarshalText([]byte(updateDateFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateDate = updateDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropVersionFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactVersionPropWorkspaceFlags(depth int, m *models.ArtifactVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceFlagName := fmt.Sprintf("%v.workspace", cmdPrefix)
	if cmd.Flags().Changed(workspaceFlagName) {
		// info: complex object workspace WorkspaceInfo is retrieved outside this Changed() block
	}
	workspaceFlagValue := m.Workspace
	if swag.IsZero(workspaceFlagValue) {
		workspaceFlagValue = &models.WorkspaceInfo{}
	}

	err, workspaceAdded := retrieveModelWorkspaceInfoFlags(depth+1, workspaceFlagValue, workspaceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded
	if workspaceAdded {
		m.Workspace = workspaceFlagValue
	}

	return nil, retAdded
}
