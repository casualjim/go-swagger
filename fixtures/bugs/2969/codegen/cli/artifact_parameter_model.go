// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for ArtifactParameter

// register flags to command
func registerModelArtifactParameterFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerArtifactParameterPropComment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactParameterPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactParameterPropRequired(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactParameterPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerArtifactParameterPropValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerArtifactParameterPropComment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commentDescription := `Comment about parameter`

	var commentFlagName string
	if cmdPrefix == "" {
		commentFlagName = "comment"
	} else {
		commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
	}

	var commentFlagDefault string

	_ = cmd.PersistentFlags().String(commentFlagName, commentFlagDefault, commentDescription)

	return nil
}

func registerArtifactParameterPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Parameter name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerArtifactParameterPropRequired(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	requiredDescription := `Required. Is parameter required or not`

	var requiredFlagName string
	if cmdPrefix == "" {
		requiredFlagName = "required"
	} else {
		requiredFlagName = fmt.Sprintf("%v.required", cmdPrefix)
	}

	var requiredFlagDefault bool

	_ = cmd.PersistentFlags().Bool(requiredFlagName, requiredFlagDefault, requiredDescription)

	return nil
}

func registerArtifactParameterPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Required. Parameter value`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerArtifactParameterPropValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `Parameter value`

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault string

	_ = cmd.PersistentFlags().String(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelArtifactParameterFlags(depth int, m *models.ArtifactParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, commentAdded := retrieveArtifactParameterPropCommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commentAdded

	err, nameAdded := retrieveArtifactParameterPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, requiredAdded := retrieveArtifactParameterPropRequiredFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || requiredAdded

	err, typeAdded := retrieveArtifactParameterPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, valueAdded := retrieveArtifactParameterPropValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveArtifactParameterPropCommentFlags(depth int, m *models.ArtifactParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commentFlagName := fmt.Sprintf("%v.comment", cmdPrefix)
	if cmd.Flags().Changed(commentFlagName) {

		var commentFlagName string
		if cmdPrefix == "" {
			commentFlagName = "comment"
		} else {
			commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
		}

		commentFlagValue, err := cmd.Flags().GetString(commentFlagName)
		if err != nil {
			return err, false
		}
		m.Comment = commentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactParameterPropNameFlags(depth int, m *models.ArtifactParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactParameterPropRequiredFlags(depth int, m *models.ArtifactParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	requiredFlagName := fmt.Sprintf("%v.required", cmdPrefix)
	if cmd.Flags().Changed(requiredFlagName) {

		var requiredFlagName string
		if cmdPrefix == "" {
			requiredFlagName = "required"
		} else {
			requiredFlagName = fmt.Sprintf("%v.required", cmdPrefix)
		}

		requiredFlagValue, err := cmd.Flags().GetBool(requiredFlagName)
		if err != nil {
			return err, false
		}
		m.Required = &requiredFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactParameterPropTypeFlags(depth int, m *models.ArtifactParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveArtifactParameterPropValueFlags(depth int, m *models.ArtifactParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetString(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
