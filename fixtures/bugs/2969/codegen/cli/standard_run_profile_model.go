// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for StandardRunProfile

// register flags to command
func registerModelStandardRunProfileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStandardRunProfilePropConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfilePropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfilePropEngineID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfilePropExecutionFramework(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfilePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfilePropPushdownPreferenceEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfilePropWarehouseName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStandardRunProfilePropConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var configurationFlagName string
	if cmdPrefix == "" {
		configurationFlagName = "configuration"
	} else {
		configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
	}

	if err := registerModelConfigurationFlags(depth+1, configurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStandardRunProfilePropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerStandardRunProfilePropEngineID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	engineIdDescription := `Pipeline engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerStandardRunProfilePropExecutionFramework(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionFrameworkDescription := `Required. Execution framework`

	var executionFrameworkFlagName string
	if cmdPrefix == "" {
		executionFrameworkFlagName = "executionFramework"
	} else {
		executionFrameworkFlagName = fmt.Sprintf("%v.executionFramework", cmdPrefix)
	}

	var executionFrameworkFlagDefault string

	_ = cmd.PersistentFlags().String(executionFrameworkFlagName, executionFrameworkFlagDefault, executionFrameworkDescription)

	return nil
}

func registerStandardRunProfilePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerStandardRunProfilePropPushdownPreferenceEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pushdownPreferenceEnabledDescription := `Pushdown enable`

	var pushdownPreferenceEnabledFlagName string
	if cmdPrefix == "" {
		pushdownPreferenceEnabledFlagName = "pushdownPreferenceEnabled"
	} else {
		pushdownPreferenceEnabledFlagName = fmt.Sprintf("%v.pushdownPreferenceEnabled", cmdPrefix)
	}

	var pushdownPreferenceEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pushdownPreferenceEnabledFlagName, pushdownPreferenceEnabledFlagDefault, pushdownPreferenceEnabledDescription)

	return nil
}

func registerStandardRunProfilePropWarehouseName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	warehouseNameDescription := `Data warehouse name`

	var warehouseNameFlagName string
	if cmdPrefix == "" {
		warehouseNameFlagName = "warehouseName"
	} else {
		warehouseNameFlagName = fmt.Sprintf("%v.warehouseName", cmdPrefix)
	}

	var warehouseNameFlagDefault string

	_ = cmd.PersistentFlags().String(warehouseNameFlagName, warehouseNameFlagDefault, warehouseNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStandardRunProfileFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, configurationAdded := retrieveStandardRunProfilePropConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configurationAdded

	err, descriptionAdded := retrieveStandardRunProfilePropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, engineIdAdded := retrieveStandardRunProfilePropEngineIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineIdAdded

	err, executionFrameworkAdded := retrieveStandardRunProfilePropExecutionFrameworkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionFrameworkAdded

	err, nameAdded := retrieveStandardRunProfilePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pushdownPreferenceEnabledAdded := retrieveStandardRunProfilePropPushdownPreferenceEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pushdownPreferenceEnabledAdded

	err, warehouseNameAdded := retrieveStandardRunProfilePropWarehouseNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || warehouseNameAdded

	return nil, retAdded
}

func retrieveStandardRunProfilePropConfigurationFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configurationFlagName := fmt.Sprintf("%v.configuration", cmdPrefix)
	if cmd.Flags().Changed(configurationFlagName) {
		// info: complex object configuration Configuration is retrieved outside this Changed() block
	}
	configurationFlagValue := m.Configuration
	if swag.IsZero(configurationFlagValue) {
		configurationFlagValue = &models.Configuration{}
	}

	err, configurationAdded := retrieveModelConfigurationFlags(depth+1, configurationFlagValue, configurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configurationAdded
	if configurationAdded {
		m.Configuration = configurationFlagValue
	}

	return nil, retAdded
}

func retrieveStandardRunProfilePropDescriptionFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfilePropEngineIDFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	engineIdFlagName := fmt.Sprintf("%v.engineId", cmdPrefix)
	if cmd.Flags().Changed(engineIdFlagName) {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfilePropExecutionFrameworkFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionFrameworkFlagName := fmt.Sprintf("%v.executionFramework", cmdPrefix)
	if cmd.Flags().Changed(executionFrameworkFlagName) {

		var executionFrameworkFlagName string
		if cmdPrefix == "" {
			executionFrameworkFlagName = "executionFramework"
		} else {
			executionFrameworkFlagName = fmt.Sprintf("%v.executionFramework", cmdPrefix)
		}

		executionFrameworkFlagValue, err := cmd.Flags().GetString(executionFrameworkFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionFramework = &executionFrameworkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfilePropNameFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfilePropPushdownPreferenceEnabledFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pushdownPreferenceEnabledFlagName := fmt.Sprintf("%v.pushdownPreferenceEnabled", cmdPrefix)
	if cmd.Flags().Changed(pushdownPreferenceEnabledFlagName) {

		var pushdownPreferenceEnabledFlagName string
		if cmdPrefix == "" {
			pushdownPreferenceEnabledFlagName = "pushdownPreferenceEnabled"
		} else {
			pushdownPreferenceEnabledFlagName = fmt.Sprintf("%v.pushdownPreferenceEnabled", cmdPrefix)
		}

		pushdownPreferenceEnabledFlagValue, err := cmd.Flags().GetBool(pushdownPreferenceEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PushdownPreferenceEnabled = pushdownPreferenceEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfilePropWarehouseNameFlags(depth int, m *models.StandardRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	warehouseNameFlagName := fmt.Sprintf("%v.warehouseName", cmdPrefix)
	if cmd.Flags().Changed(warehouseNameFlagName) {

		var warehouseNameFlagName string
		if cmdPrefix == "" {
			warehouseNameFlagName = "warehouseName"
		} else {
			warehouseNameFlagName = fmt.Sprintf("%v.warehouseName", cmdPrefix)
		}

		warehouseNameFlagValue, err := cmd.Flags().GetString(warehouseNameFlagName)
		if err != nil {
			return err, false
		}
		m.WarehouseName = warehouseNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
