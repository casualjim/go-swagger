// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for DatabricksRunProfile

// register flags to command
func registerModelDatabricksRunProfileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDatabricksRunProfilePropDatabricks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksRunProfilePropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksRunProfilePropEngineID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksRunProfilePropMicroBatchInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksRunProfilePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksRunProfilePropParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDatabricksRunProfilePropDatabricks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var databricksFlagName string
	if cmdPrefix == "" {
		databricksFlagName = "databricks"
	} else {
		databricksFlagName = fmt.Sprintf("%v.databricks", cmdPrefix)
	}

	if err := registerModelDatabrickFlags(depth+1, databricksFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDatabricksRunProfilePropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerDatabricksRunProfilePropEngineID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	engineIdDescription := `Pipeline engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerDatabricksRunProfilePropMicroBatchInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	microBatchIntervalDescription := `Required. Micro-batch interval (in ms)`

	var microBatchIntervalFlagName string
	if cmdPrefix == "" {
		microBatchIntervalFlagName = "microBatchInterval"
	} else {
		microBatchIntervalFlagName = fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
	}

	var microBatchIntervalFlagDefault int32

	_ = cmd.PersistentFlags().Int32(microBatchIntervalFlagName, microBatchIntervalFlagDefault, microBatchIntervalDescription)

	return nil
}

func registerDatabricksRunProfilePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDatabricksRunProfilePropParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDatabricksRunProfileFlags(depth int, m *models.DatabricksRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, databricksAdded := retrieveDatabricksRunProfilePropDatabricksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || databricksAdded

	err, descriptionAdded := retrieveDatabricksRunProfilePropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, engineIdAdded := retrieveDatabricksRunProfilePropEngineIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineIdAdded

	err, microBatchIntervalAdded := retrieveDatabricksRunProfilePropMicroBatchIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || microBatchIntervalAdded

	err, nameAdded := retrieveDatabricksRunProfilePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, parametersAdded := retrieveDatabricksRunProfilePropParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	return nil, retAdded
}

func retrieveDatabricksRunProfilePropDatabricksFlags(depth int, m *models.DatabricksRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	databricksFlagName := fmt.Sprintf("%v.databricks", cmdPrefix)
	if cmd.Flags().Changed(databricksFlagName) {
		// info: complex object databricks Databrick is retrieved outside this Changed() block
	}
	databricksFlagValue := m.Databricks
	if swag.IsZero(databricksFlagValue) {
		databricksFlagValue = &models.Databrick{}
	}

	err, databricksAdded := retrieveModelDatabrickFlags(depth+1, databricksFlagValue, databricksFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || databricksAdded
	if databricksAdded {
		m.Databricks = databricksFlagValue
	}

	return nil, retAdded
}

func retrieveDatabricksRunProfilePropDescriptionFlags(depth int, m *models.DatabricksRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksRunProfilePropEngineIDFlags(depth int, m *models.DatabricksRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	engineIdFlagName := fmt.Sprintf("%v.engineId", cmdPrefix)
	if cmd.Flags().Changed(engineIdFlagName) {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksRunProfilePropMicroBatchIntervalFlags(depth int, m *models.DatabricksRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	microBatchIntervalFlagName := fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
	if cmd.Flags().Changed(microBatchIntervalFlagName) {

		var microBatchIntervalFlagName string
		if cmdPrefix == "" {
			microBatchIntervalFlagName = "microBatchInterval"
		} else {
			microBatchIntervalFlagName = fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
		}

		microBatchIntervalFlagValue, err := cmd.Flags().GetInt32(microBatchIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.MicroBatchInterval = &microBatchIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksRunProfilePropNameFlags(depth int, m *models.DatabricksRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksRunProfilePropParametersFlags(depth int, m *models.DatabricksRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
