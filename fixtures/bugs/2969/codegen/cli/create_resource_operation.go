// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/resources"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationResourcesCreateResourceCmd returns a command to handle operation createResource
func makeOperationResourcesCreateResourceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createResource",
		Short: ``,
		RunE:  runOperationResourcesCreateResource,
	}

	if err := registerOperationResourcesCreateResourceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationResourcesCreateResource uses cmd flags to call endpoint api
func runOperationResourcesCreateResource(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := resources.NewCreateResourceParams()
	if err, _ = retrieveOperationResourcesCreateResourceFileFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationResourcesCreateResourceResourceFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationResourcesCreateResourceResult(appCli.Resources.CreateResource(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationResourcesCreateResourceParamFlags registers all flags needed to fill params
func registerOperationResourcesCreateResourceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationResourcesCreateResourceFileParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationResourcesCreateResourceResourceParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationResourcesCreateResourceFileParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	return nil
}

func registerOperationResourcesCreateResourceResourceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	resourceDescription := `Required. Resource detail`

	var resourceFlagName string
	if cmdPrefix == "" {
		resourceFlagName = "resource"
	} else {
		resourceFlagName = fmt.Sprintf("%v.resource", cmdPrefix)
	}

	var resourceFlagDefault string

	_ = cmd.PersistentFlags().String(resourceFlagName, resourceFlagDefault, resourceDescription)

	return nil
}

func retrieveOperationResourcesCreateResourceFileFlag(m *resources.CreateResourceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("file") {

		// warning: primitive file io.ReadCloser is not supported by go-swagger cli yet

	}

	return nil, retAdded
}

func retrieveOperationResourcesCreateResourceResourceFlag(m *resources.CreateResourceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("resource") {

		var resourceFlagName string
		if cmdPrefix == "" {
			resourceFlagName = "resource"
		} else {
			resourceFlagName = fmt.Sprintf("%v.resource", cmdPrefix)
		}

		resourceFlagValue, err := cmd.Flags().GetString(resourceFlagName)
		if err != nil {
			return err, false
		}
		m.Resource = resourceFlagValue

	}

	return nil, retAdded
}

// parseOperationResourcesCreateResourceResult parses request result and return the string content
func parseOperationResourcesCreateResourceResult(resp0 *resources.CreateResourceOK, resp1 *resources.CreateResourceCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*resources.CreateResourceOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*resources.CreateResourceCreated)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*resources.CreateResourceBadRequest)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*resources.CreateResourceUnauthorized)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*resources.CreateResourceForbidden)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*resources.CreateResourceNotFound)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*resources.CreateResourceConflict)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp7 interface{} = respErr
		resp7, ok := iResp7.(*resources.CreateResourceRequestEntityTooLarge)
		if ok {
			if !swag.IsZero(resp7) && !swag.IsZero(resp7.Payload) {
				msgStr, err := json.Marshal(resp7.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp8 interface{} = respErr
		resp8, ok := iResp8.(*resources.CreateResourceInternalServerError)
		if ok {
			if !swag.IsZero(resp8) && !swag.IsZero(resp8.Payload) {
				msgStr, err := json.Marshal(resp8.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
		msgStr, err := json.Marshal(resp1.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
