// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/artifacts"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationArtifactsGetArtifactsAvailableCmd returns a command to handle operation getArtifactsAvailable
func makeOperationArtifactsGetArtifactsAvailableCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getArtifactsAvailable",
		Short: `Get available Artifacts`,
		RunE:  runOperationArtifactsGetArtifactsAvailable,
	}

	if err := registerOperationArtifactsGetArtifactsAvailableParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationArtifactsGetArtifactsAvailable uses cmd flags to call endpoint api
func runOperationArtifactsGetArtifactsAvailable(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := artifacts.NewGetArtifactsAvailableParams()
	if err, _ = retrieveOperationArtifactsGetArtifactsAvailableEnvironmentIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationArtifactsGetArtifactsAvailableLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationArtifactsGetArtifactsAvailableNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationArtifactsGetArtifactsAvailableOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationArtifactsGetArtifactsAvailableWorkspaceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationArtifactsGetArtifactsAvailableResult(appCli.Artifacts.GetArtifactsAvailable(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationArtifactsGetArtifactsAvailableParamFlags registers all flags needed to fill params
func registerOperationArtifactsGetArtifactsAvailableParamFlags(cmd *cobra.Command) error {
	if err := registerOperationArtifactsGetArtifactsAvailableEnvironmentIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactsGetArtifactsAvailableLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactsGetArtifactsAvailableNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactsGetArtifactsAvailableOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactsGetArtifactsAvailableWorkspaceIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationArtifactsGetArtifactsAvailableEnvironmentIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	environmentIdDescription := `environment id`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerOperationArtifactsGetArtifactsAvailableLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	limitDescription := `the number of items to return. Must be in range [1, 100]. Default value - 100`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}

func registerOperationArtifactsGetArtifactsAvailableNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `artifact name filter`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerOperationArtifactsGetArtifactsAvailableOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetDescription := `the position of the first item. Must be greater than or equal to 0. Default value - 0`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}

func registerOperationArtifactsGetArtifactsAvailableWorkspaceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	workspaceIdDescription := `workspace id`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

func retrieveOperationArtifactsGetArtifactsAvailableEnvironmentIDFlag(m *artifacts.GetArtifactsAvailableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("environmentId") {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = &environmentIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationArtifactsGetArtifactsAvailableLimitFlag(m *artifacts.GetArtifactsAvailableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt32(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = &limitFlagValue

	}

	return nil, retAdded
}

func retrieveOperationArtifactsGetArtifactsAvailableNameFlag(m *artifacts.GetArtifactsAvailableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

	}

	return nil, retAdded
}

func retrieveOperationArtifactsGetArtifactsAvailableOffsetFlag(m *artifacts.GetArtifactsAvailableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = &offsetFlagValue

	}

	return nil, retAdded
}

func retrieveOperationArtifactsGetArtifactsAvailableWorkspaceIDFlag(m *artifacts.GetArtifactsAvailableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("workspaceId") {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = &workspaceIdFlagValue

	}

	return nil, retAdded
}

// parseOperationArtifactsGetArtifactsAvailableResult parses request result and return the string content
func parseOperationArtifactsGetArtifactsAvailableResult(resp0 *artifacts.GetArtifactsAvailableOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*artifacts.GetArtifactsAvailableOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*artifacts.GetArtifactsAvailableBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*artifacts.GetArtifactsAvailableUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*artifacts.GetArtifactsAvailableForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*artifacts.GetArtifactsAvailableNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*artifacts.GetArtifactsAvailableInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
