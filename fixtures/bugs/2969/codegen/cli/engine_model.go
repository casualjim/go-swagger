// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for Engine

// register flags to command
func registerModelEngineFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerEnginePropAvailability(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropClusterID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropCreateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropDebug(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropEsbCompatibilityVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropManaged(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropPreAuthorizedKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropRunProfiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropRuntimeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropUpdateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerEnginePropWorkspace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerEnginePropAvailability(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	availabilityDescription := `Enum: ["AVAILABLE","NOT_AVAILABLE","RETIRED"]. Availability status of engine|cluster`

	var availabilityFlagName string
	if cmdPrefix == "" {
		availabilityFlagName = "availability"
	} else {
		availabilityFlagName = fmt.Sprintf("%v.availability", cmdPrefix)
	}

	var availabilityFlagDefault string

	_ = cmd.PersistentFlags().String(availabilityFlagName, availabilityFlagDefault, availabilityDescription)

	if err := cmd.RegisterFlagCompletionFunc(availabilityFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["AVAILABLE","NOT_AVAILABLE","RETIRED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerEnginePropClusterID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clusterIdDescription := `cluster that this engine is part of`

	var clusterIdFlagName string
	if cmdPrefix == "" {
		clusterIdFlagName = "clusterId"
	} else {
		clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
	}

	var clusterIdFlagDefault string

	_ = cmd.PersistentFlags().String(clusterIdFlagName, clusterIdFlagDefault, clusterIdDescription)

	return nil
}

func registerEnginePropCreateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createDateDescription := `Created on`

	var createDateFlagName string
	if cmdPrefix == "" {
		createDateFlagName = "createDate"
	} else {
		createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createDateFlagName, "", createDateDescription)

	return nil
}

func registerEnginePropDebug(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var debugFlagName string
	if cmdPrefix == "" {
		debugFlagName = "debug"
	} else {
		debugFlagName = fmt.Sprintf("%v.debug", cmdPrefix)
	}

	if err := registerModelEngineDebugFlags(depth+1, debugFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerEnginePropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Resource description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerEnginePropEsbCompatibilityVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	esbCompatibilityVersionDescription := `ESB compatibility version`

	var esbCompatibilityVersionFlagName string
	if cmdPrefix == "" {
		esbCompatibilityVersionFlagName = "esbCompatibilityVersion"
	} else {
		esbCompatibilityVersionFlagName = fmt.Sprintf("%v.esbCompatibilityVersion", cmdPrefix)
	}

	var esbCompatibilityVersionFlagDefault string

	_ = cmd.PersistentFlags().String(esbCompatibilityVersionFlagName, esbCompatibilityVersionFlagDefault, esbCompatibilityVersionDescription)

	return nil
}

func registerEnginePropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Resource id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerEnginePropManaged(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	managedDescription := `Indicates whether target runtime (engine/cluster) is managed or not`

	var managedFlagName string
	if cmdPrefix == "" {
		managedFlagName = "managed"
	} else {
		managedFlagName = fmt.Sprintf("%v.managed", cmdPrefix)
	}

	var managedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(managedFlagName, managedFlagDefault, managedDescription)

	return nil
}

func registerEnginePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Resource name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerEnginePropPreAuthorizedKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	preAuthorizedKeyDescription := `Preauthorized key (only for not paired engine)`

	var preAuthorizedKeyFlagName string
	if cmdPrefix == "" {
		preAuthorizedKeyFlagName = "preAuthorizedKey"
	} else {
		preAuthorizedKeyFlagName = fmt.Sprintf("%v.preAuthorizedKey", cmdPrefix)
	}

	var preAuthorizedKeyFlagDefault string

	_ = cmd.PersistentFlags().String(preAuthorizedKeyFlagName, preAuthorizedKeyFlagDefault, preAuthorizedKeyDescription)

	return nil
}

func registerEnginePropRunProfiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: runProfiles []string array type is not supported by go-swagger cli yet

	return nil
}

func registerEnginePropRuntimeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runtimeIdDescription := `Required. Resource runtime id`

	var runtimeIdFlagName string
	if cmdPrefix == "" {
		runtimeIdFlagName = "runtimeId"
	} else {
		runtimeIdFlagName = fmt.Sprintf("%v.runtimeId", cmdPrefix)
	}

	var runtimeIdFlagDefault string

	_ = cmd.PersistentFlags().String(runtimeIdFlagName, runtimeIdFlagDefault, runtimeIdDescription)

	return nil
}

func registerEnginePropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["PAIRED","NOT_PAIRED"]. Required. Engine status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["PAIRED","NOT_PAIRED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerEnginePropUpdateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateDateDescription := `Updated on`

	var updateDateFlagName string
	if cmdPrefix == "" {
		updateDateFlagName = "updateDate"
	} else {
		updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateDateFlagName, "", updateDateDescription)

	return nil
}

func registerEnginePropWorkspace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var workspaceFlagName string
	if cmdPrefix == "" {
		workspaceFlagName = "workspace"
	} else {
		workspaceFlagName = fmt.Sprintf("%v.workspace", cmdPrefix)
	}

	if err := registerModelWorkspaceInfoFlags(depth+1, workspaceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelEngineFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, availabilityAdded := retrieveEnginePropAvailabilityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || availabilityAdded

	err, clusterIdAdded := retrieveEnginePropClusterIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clusterIdAdded

	err, createDateAdded := retrieveEnginePropCreateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createDateAdded

	err, debugAdded := retrieveEnginePropDebugFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || debugAdded

	err, descriptionAdded := retrieveEnginePropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, esbCompatibilityVersionAdded := retrieveEnginePropEsbCompatibilityVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || esbCompatibilityVersionAdded

	err, idAdded := retrieveEnginePropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, managedAdded := retrieveEnginePropManagedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || managedAdded

	err, nameAdded := retrieveEnginePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, preAuthorizedKeyAdded := retrieveEnginePropPreAuthorizedKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || preAuthorizedKeyAdded

	err, runProfilesAdded := retrieveEnginePropRunProfilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runProfilesAdded

	err, runtimeIdAdded := retrieveEnginePropRuntimeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeIdAdded

	err, statusAdded := retrieveEnginePropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updateDateAdded := retrieveEnginePropUpdateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateDateAdded

	err, workspaceAdded := retrieveEnginePropWorkspaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded

	return nil, retAdded
}

func retrieveEnginePropAvailabilityFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	availabilityFlagName := fmt.Sprintf("%v.availability", cmdPrefix)
	if cmd.Flags().Changed(availabilityFlagName) {

		var availabilityFlagName string
		if cmdPrefix == "" {
			availabilityFlagName = "availability"
		} else {
			availabilityFlagName = fmt.Sprintf("%v.availability", cmdPrefix)
		}

		availabilityFlagValue, err := cmd.Flags().GetString(availabilityFlagName)
		if err != nil {
			return err, false
		}
		m.Availability = availabilityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropClusterIDFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clusterIdFlagName := fmt.Sprintf("%v.clusterId", cmdPrefix)
	if cmd.Flags().Changed(clusterIdFlagName) {

		var clusterIdFlagName string
		if cmdPrefix == "" {
			clusterIdFlagName = "clusterId"
		} else {
			clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
		}

		clusterIdFlagValue, err := cmd.Flags().GetString(clusterIdFlagName)
		if err != nil {
			return err, false
		}
		m.ClusterID = clusterIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropCreateDateFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createDateFlagName := fmt.Sprintf("%v.createDate", cmdPrefix)
	if cmd.Flags().Changed(createDateFlagName) {

		var createDateFlagName string
		if cmdPrefix == "" {
			createDateFlagName = "createDate"
		} else {
			createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
		}

		createDateFlagValueStr, err := cmd.Flags().GetString(createDateFlagName)
		if err != nil {
			return err, false
		}
		var createDateFlagValue strfmt.DateTime
		if err := createDateFlagValue.UnmarshalText([]byte(createDateFlagValueStr)); err != nil {
			return err, false
		}
		m.CreateDate = createDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropDebugFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	debugFlagName := fmt.Sprintf("%v.debug", cmdPrefix)
	if cmd.Flags().Changed(debugFlagName) {
		// info: complex object debug EngineDebug is retrieved outside this Changed() block
	}
	debugFlagValue := m.Debug
	if swag.IsZero(debugFlagValue) {
		debugFlagValue = &models.EngineDebug{}
	}

	err, debugAdded := retrieveModelEngineDebugFlags(depth+1, debugFlagValue, debugFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || debugAdded
	if debugAdded {
		m.Debug = debugFlagValue
	}

	return nil, retAdded
}

func retrieveEnginePropDescriptionFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropEsbCompatibilityVersionFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	esbCompatibilityVersionFlagName := fmt.Sprintf("%v.esbCompatibilityVersion", cmdPrefix)
	if cmd.Flags().Changed(esbCompatibilityVersionFlagName) {

		var esbCompatibilityVersionFlagName string
		if cmdPrefix == "" {
			esbCompatibilityVersionFlagName = "esbCompatibilityVersion"
		} else {
			esbCompatibilityVersionFlagName = fmt.Sprintf("%v.esbCompatibilityVersion", cmdPrefix)
		}

		esbCompatibilityVersionFlagValue, err := cmd.Flags().GetString(esbCompatibilityVersionFlagName)
		if err != nil {
			return err, false
		}
		m.EsbCompatibilityVersion = esbCompatibilityVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropIDFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropManagedFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	managedFlagName := fmt.Sprintf("%v.managed", cmdPrefix)
	if cmd.Flags().Changed(managedFlagName) {

		var managedFlagName string
		if cmdPrefix == "" {
			managedFlagName = "managed"
		} else {
			managedFlagName = fmt.Sprintf("%v.managed", cmdPrefix)
		}

		managedFlagValue, err := cmd.Flags().GetBool(managedFlagName)
		if err != nil {
			return err, false
		}
		m.Managed = managedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropNameFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropPreAuthorizedKeyFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	preAuthorizedKeyFlagName := fmt.Sprintf("%v.preAuthorizedKey", cmdPrefix)
	if cmd.Flags().Changed(preAuthorizedKeyFlagName) {

		var preAuthorizedKeyFlagName string
		if cmdPrefix == "" {
			preAuthorizedKeyFlagName = "preAuthorizedKey"
		} else {
			preAuthorizedKeyFlagName = fmt.Sprintf("%v.preAuthorizedKey", cmdPrefix)
		}

		preAuthorizedKeyFlagValue, err := cmd.Flags().GetString(preAuthorizedKeyFlagName)
		if err != nil {
			return err, false
		}
		m.PreAuthorizedKey = preAuthorizedKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropRunProfilesFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runProfilesFlagName := fmt.Sprintf("%v.runProfiles", cmdPrefix)
	if cmd.Flags().Changed(runProfilesFlagName) {
		// warning: runProfiles array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveEnginePropRuntimeIDFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeIdFlagName := fmt.Sprintf("%v.runtimeId", cmdPrefix)
	if cmd.Flags().Changed(runtimeIdFlagName) {

		var runtimeIdFlagName string
		if cmdPrefix == "" {
			runtimeIdFlagName = "runtimeId"
		} else {
			runtimeIdFlagName = fmt.Sprintf("%v.runtimeId", cmdPrefix)
		}

		runtimeIdFlagValue, err := cmd.Flags().GetString(runtimeIdFlagName)
		if err != nil {
			return err, false
		}
		m.RuntimeID = &runtimeIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropStatusFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropUpdateDateFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateDateFlagName := fmt.Sprintf("%v.updateDate", cmdPrefix)
	if cmd.Flags().Changed(updateDateFlagName) {

		var updateDateFlagName string
		if cmdPrefix == "" {
			updateDateFlagName = "updateDate"
		} else {
			updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
		}

		updateDateFlagValueStr, err := cmd.Flags().GetString(updateDateFlagName)
		if err != nil {
			return err, false
		}
		var updateDateFlagValue strfmt.DateTime
		if err := updateDateFlagValue.UnmarshalText([]byte(updateDateFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateDate = updateDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveEnginePropWorkspaceFlags(depth int, m *models.Engine, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceFlagName := fmt.Sprintf("%v.workspace", cmdPrefix)
	if cmd.Flags().Changed(workspaceFlagName) {
		// info: complex object workspace WorkspaceInfo is retrieved outside this Changed() block
	}
	workspaceFlagValue := m.Workspace
	if swag.IsZero(workspaceFlagValue) {
		workspaceFlagValue = &models.WorkspaceInfo{}
	}

	err, workspaceAdded := retrieveModelWorkspaceInfoFlags(depth+1, workspaceFlagValue, workspaceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded
	if workspaceAdded {
		m.Workspace = workspaceFlagValue
	}

	return nil, retAdded
}
