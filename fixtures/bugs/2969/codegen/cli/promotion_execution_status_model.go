// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PromotionExecutionStatus

// register flags to command
func registerModelPromotionExecutionStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPromotionExecutionStatusPropAdvanced(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropClusters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropDefective(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropEngines(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropFinishTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropKeepTargetResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropKeepTargetRunProfiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropPipelineID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropPromotionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropStartTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropStatusMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropTriggerTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropUserType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutionStatusPropWorkspaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutionStatusPropAdvanced(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var advancedFlagName string
	if cmdPrefix == "" {
		advancedFlagName = "advanced"
	} else {
		advancedFlagName = fmt.Sprintf("%v.advanced", cmdPrefix)
	}

	if err := registerModelAdvancedPromotionSpecFlags(depth+1, advancedFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutionStatusPropClusters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: clusters []*RuntimePromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerPromotionExecutionStatusPropContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contextDescription := `Execution context message`

	var contextFlagName string
	if cmdPrefix == "" {
		contextFlagName = "context"
	} else {
		contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
	}

	var contextFlagDefault string

	_ = cmd.PersistentFlags().String(contextFlagName, contextFlagDefault, contextDescription)

	return nil
}

func registerPromotionExecutionStatusPropDefective(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defectiveDescription := `Defective Promotion flag`

	var defectiveFlagName string
	if cmdPrefix == "" {
		defectiveFlagName = "defective"
	} else {
		defectiveFlagName = fmt.Sprintf("%v.defective", cmdPrefix)
	}

	var defectiveFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defectiveFlagName, defectiveFlagDefault, defectiveDescription)

	return nil
}

func registerPromotionExecutionStatusPropEngines(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: engines []*RuntimePromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerPromotionExecutionStatusPropExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := `Required. Job execution ID`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "executionId"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
	}

	var executionIdFlagDefault string

	_ = cmd.PersistentFlags().String(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerPromotionExecutionStatusPropFinishTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	finishTimestampDescription := `End time of job execution (UTC)`

	var finishTimestampFlagName string
	if cmdPrefix == "" {
		finishTimestampFlagName = "finishTimestamp"
	} else {
		finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(finishTimestampFlagName, "", finishTimestampDescription)

	return nil
}

func registerPromotionExecutionStatusPropKeepTargetResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepTargetResourcesDescription := `Keep Target Resources flag`

	var keepTargetResourcesFlagName string
	if cmdPrefix == "" {
		keepTargetResourcesFlagName = "keepTargetResources"
	} else {
		keepTargetResourcesFlagName = fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
	}

	var keepTargetResourcesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepTargetResourcesFlagName, keepTargetResourcesFlagDefault, keepTargetResourcesDescription)

	return nil
}

func registerPromotionExecutionStatusPropKeepTargetRunProfiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepTargetRunProfilesDescription := `Keep Target Run Profiles flag (not returned for API versions earlier V2.2)`

	var keepTargetRunProfilesFlagName string
	if cmdPrefix == "" {
		keepTargetRunProfilesFlagName = "keepTargetRunProfiles"
	} else {
		keepTargetRunProfilesFlagName = fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
	}

	var keepTargetRunProfilesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepTargetRunProfilesFlagName, keepTargetRunProfilesFlagDefault, keepTargetRunProfilesDescription)

	return nil
}

func registerPromotionExecutionStatusPropPipelineID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pipelineIdDescription := `Deprecated! Use Promotion ID instead`

	var pipelineIdFlagName string
	if cmdPrefix == "" {
		pipelineIdFlagName = "pipelineId"
	} else {
		pipelineIdFlagName = fmt.Sprintf("%v.pipelineId", cmdPrefix)
	}

	var pipelineIdFlagDefault string

	_ = cmd.PersistentFlags().String(pipelineIdFlagName, pipelineIdFlagDefault, pipelineIdDescription)

	return nil
}

func registerPromotionExecutionStatusPropPromotionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	promotionIdDescription := `Promotion ID`

	var promotionIdFlagName string
	if cmdPrefix == "" {
		promotionIdFlagName = "promotionId"
	} else {
		promotionIdFlagName = fmt.Sprintf("%v.promotionId", cmdPrefix)
	}

	var promotionIdFlagDefault string

	_ = cmd.PersistentFlags().String(promotionIdFlagName, promotionIdFlagDefault, promotionIdDescription)

	return nil
}

func registerPromotionExecutionStatusPropStartTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimestampDescription := `Required. Start time of job execution (UTC)`

	var startTimestampFlagName string
	if cmdPrefix == "" {
		startTimestampFlagName = "startTimestamp"
	} else {
		startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startTimestampFlagName, "", startTimestampDescription)

	return nil
}

func registerPromotionExecutionStatusPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["ANALIZED","PROMOTION_STARTED","PROMOTION_WARNING","PROMOTION_FAILED","PROMOTED"]. Execution status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ANALIZED","PROMOTION_STARTED","PROMOTION_WARNING","PROMOTION_FAILED","PROMOTED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutionStatusPropStatusMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusMessageDescription := `Execution status message`

	var statusMessageFlagName string
	if cmdPrefix == "" {
		statusMessageFlagName = "statusMessage"
	} else {
		statusMessageFlagName = fmt.Sprintf("%v.statusMessage", cmdPrefix)
	}

	var statusMessageFlagDefault string

	_ = cmd.PersistentFlags().String(statusMessageFlagName, statusMessageFlagDefault, statusMessageDescription)

	return nil
}

func registerPromotionExecutionStatusPropTriggerTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerTimestampDescription := `Required. Trigger time of job execution (UTC)`

	var triggerTimestampFlagName string
	if cmdPrefix == "" {
		triggerTimestampFlagName = "triggerTimestamp"
	} else {
		triggerTimestampFlagName = fmt.Sprintf("%v.triggerTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(triggerTimestampFlagName, "", triggerTimestampDescription)

	return nil
}

func registerPromotionExecutionStatusPropUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := `Required. User who triggered or scheduled the execution`

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "userId"
	} else {
		userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
	}

	var userIdFlagDefault string

	_ = cmd.PersistentFlags().String(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

func registerPromotionExecutionStatusPropUserType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userTypeDescription := `Enum: ["HUMAN","SERVICE"]. Required. Type of user who triggered or scheduled the execution`

	var userTypeFlagName string
	if cmdPrefix == "" {
		userTypeFlagName = "userType"
	} else {
		userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
	}

	var userTypeFlagDefault string

	_ = cmd.PersistentFlags().String(userTypeFlagName, userTypeFlagDefault, userTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(userTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutionStatusPropWorkspaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: workspaces []*WorkspacePromotionResult array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPromotionExecutionStatusFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, advancedAdded := retrievePromotionExecutionStatusPropAdvancedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || advancedAdded

	err, clustersAdded := retrievePromotionExecutionStatusPropClustersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clustersAdded

	err, contextAdded := retrievePromotionExecutionStatusPropContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextAdded

	err, defectiveAdded := retrievePromotionExecutionStatusPropDefectiveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defectiveAdded

	err, enginesAdded := retrievePromotionExecutionStatusPropEnginesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enginesAdded

	err, executionIdAdded := retrievePromotionExecutionStatusPropExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, finishTimestampAdded := retrievePromotionExecutionStatusPropFinishTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishTimestampAdded

	err, keepTargetResourcesAdded := retrievePromotionExecutionStatusPropKeepTargetResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepTargetResourcesAdded

	err, keepTargetRunProfilesAdded := retrievePromotionExecutionStatusPropKeepTargetRunProfilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepTargetRunProfilesAdded

	err, pipelineIdAdded := retrievePromotionExecutionStatusPropPipelineIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pipelineIdAdded

	err, promotionIdAdded := retrievePromotionExecutionStatusPropPromotionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || promotionIdAdded

	err, startTimestampAdded := retrievePromotionExecutionStatusPropStartTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimestampAdded

	err, statusAdded := retrievePromotionExecutionStatusPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, statusMessageAdded := retrievePromotionExecutionStatusPropStatusMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusMessageAdded

	err, triggerTimestampAdded := retrievePromotionExecutionStatusPropTriggerTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerTimestampAdded

	err, userIdAdded := retrievePromotionExecutionStatusPropUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	err, userTypeAdded := retrievePromotionExecutionStatusPropUserTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userTypeAdded

	err, workspacesAdded := retrievePromotionExecutionStatusPropWorkspacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspacesAdded

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropAdvancedFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	advancedFlagName := fmt.Sprintf("%v.advanced", cmdPrefix)
	if cmd.Flags().Changed(advancedFlagName) {
		// info: complex object advanced AdvancedPromotionSpec is retrieved outside this Changed() block
	}
	advancedFlagValue := m.Advanced
	if swag.IsZero(advancedFlagValue) {
		advancedFlagValue = &models.AdvancedPromotionSpec{}
	}

	err, advancedAdded := retrieveModelAdvancedPromotionSpecFlags(depth+1, advancedFlagValue, advancedFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || advancedAdded
	if advancedAdded {
		m.Advanced = advancedFlagValue
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropClustersFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clustersFlagName := fmt.Sprintf("%v.clusters", cmdPrefix)
	if cmd.Flags().Changed(clustersFlagName) {
		// warning: clusters array type []*RuntimePromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropContextFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contextFlagName := fmt.Sprintf("%v.context", cmdPrefix)
	if cmd.Flags().Changed(contextFlagName) {

		var contextFlagName string
		if cmdPrefix == "" {
			contextFlagName = "context"
		} else {
			contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
		}

		contextFlagValue, err := cmd.Flags().GetString(contextFlagName)
		if err != nil {
			return err, false
		}
		m.Context = contextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropDefectiveFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defectiveFlagName := fmt.Sprintf("%v.defective", cmdPrefix)
	if cmd.Flags().Changed(defectiveFlagName) {

		var defectiveFlagName string
		if cmdPrefix == "" {
			defectiveFlagName = "defective"
		} else {
			defectiveFlagName = fmt.Sprintf("%v.defective", cmdPrefix)
		}

		defectiveFlagValue, err := cmd.Flags().GetBool(defectiveFlagName)
		if err != nil {
			return err, false
		}
		m.Defective = defectiveFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropEnginesFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enginesFlagName := fmt.Sprintf("%v.engines", cmdPrefix)
	if cmd.Flags().Changed(enginesFlagName) {
		// warning: engines array type []*RuntimePromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropExecutionIDFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.executionId", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "executionId"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetString(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = &executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropFinishTimestampFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	finishTimestampFlagName := fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	if cmd.Flags().Changed(finishTimestampFlagName) {

		var finishTimestampFlagName string
		if cmdPrefix == "" {
			finishTimestampFlagName = "finishTimestamp"
		} else {
			finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
		}

		finishTimestampFlagValueStr, err := cmd.Flags().GetString(finishTimestampFlagName)
		if err != nil {
			return err, false
		}
		var finishTimestampFlagValue strfmt.DateTime
		if err := finishTimestampFlagValue.UnmarshalText([]byte(finishTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.FinishTimestamp = finishTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropKeepTargetResourcesFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepTargetResourcesFlagName := fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
	if cmd.Flags().Changed(keepTargetResourcesFlagName) {

		var keepTargetResourcesFlagName string
		if cmdPrefix == "" {
			keepTargetResourcesFlagName = "keepTargetResources"
		} else {
			keepTargetResourcesFlagName = fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
		}

		keepTargetResourcesFlagValue, err := cmd.Flags().GetBool(keepTargetResourcesFlagName)
		if err != nil {
			return err, false
		}
		m.KeepTargetResources = keepTargetResourcesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropKeepTargetRunProfilesFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepTargetRunProfilesFlagName := fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
	if cmd.Flags().Changed(keepTargetRunProfilesFlagName) {

		var keepTargetRunProfilesFlagName string
		if cmdPrefix == "" {
			keepTargetRunProfilesFlagName = "keepTargetRunProfiles"
		} else {
			keepTargetRunProfilesFlagName = fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
		}

		keepTargetRunProfilesFlagValue, err := cmd.Flags().GetBool(keepTargetRunProfilesFlagName)
		if err != nil {
			return err, false
		}
		m.KeepTargetRunProfiles = keepTargetRunProfilesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropPipelineIDFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pipelineIdFlagName := fmt.Sprintf("%v.pipelineId", cmdPrefix)
	if cmd.Flags().Changed(pipelineIdFlagName) {

		var pipelineIdFlagName string
		if cmdPrefix == "" {
			pipelineIdFlagName = "pipelineId"
		} else {
			pipelineIdFlagName = fmt.Sprintf("%v.pipelineId", cmdPrefix)
		}

		pipelineIdFlagValue, err := cmd.Flags().GetString(pipelineIdFlagName)
		if err != nil {
			return err, false
		}
		m.PipelineID = pipelineIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropPromotionIDFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	promotionIdFlagName := fmt.Sprintf("%v.promotionId", cmdPrefix)
	if cmd.Flags().Changed(promotionIdFlagName) {

		var promotionIdFlagName string
		if cmdPrefix == "" {
			promotionIdFlagName = "promotionId"
		} else {
			promotionIdFlagName = fmt.Sprintf("%v.promotionId", cmdPrefix)
		}

		promotionIdFlagValue, err := cmd.Flags().GetString(promotionIdFlagName)
		if err != nil {
			return err, false
		}
		m.PromotionID = promotionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropStartTimestampFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimestampFlagName := fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	if cmd.Flags().Changed(startTimestampFlagName) {

		var startTimestampFlagName string
		if cmdPrefix == "" {
			startTimestampFlagName = "startTimestamp"
		} else {
			startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
		}

		startTimestampFlagValueStr, err := cmd.Flags().GetString(startTimestampFlagName)
		if err != nil {
			return err, false
		}
		var startTimestampFlagValue strfmt.DateTime
		if err := startTimestampFlagValue.UnmarshalText([]byte(startTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.StartTimestamp = &startTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropStatusFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropStatusMessageFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusMessageFlagName := fmt.Sprintf("%v.statusMessage", cmdPrefix)
	if cmd.Flags().Changed(statusMessageFlagName) {

		var statusMessageFlagName string
		if cmdPrefix == "" {
			statusMessageFlagName = "statusMessage"
		} else {
			statusMessageFlagName = fmt.Sprintf("%v.statusMessage", cmdPrefix)
		}

		statusMessageFlagValue, err := cmd.Flags().GetString(statusMessageFlagName)
		if err != nil {
			return err, false
		}
		m.StatusMessage = statusMessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropTriggerTimestampFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerTimestampFlagName := fmt.Sprintf("%v.triggerTimestamp", cmdPrefix)
	if cmd.Flags().Changed(triggerTimestampFlagName) {

		var triggerTimestampFlagName string
		if cmdPrefix == "" {
			triggerTimestampFlagName = "triggerTimestamp"
		} else {
			triggerTimestampFlagName = fmt.Sprintf("%v.triggerTimestamp", cmdPrefix)
		}

		triggerTimestampFlagValueStr, err := cmd.Flags().GetString(triggerTimestampFlagName)
		if err != nil {
			return err, false
		}
		var triggerTimestampFlagValue strfmt.DateTime
		if err := triggerTimestampFlagValue.UnmarshalText([]byte(triggerTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.TriggerTimestamp = &triggerTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropUserIDFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.userId", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "userId"
		} else {
			userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetString(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = &userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropUserTypeFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userTypeFlagName := fmt.Sprintf("%v.userType", cmdPrefix)
	if cmd.Flags().Changed(userTypeFlagName) {

		var userTypeFlagName string
		if cmdPrefix == "" {
			userTypeFlagName = "userType"
		} else {
			userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
		}

		userTypeFlagValue, err := cmd.Flags().GetString(userTypeFlagName)
		if err != nil {
			return err, false
		}
		m.UserType = &userTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutionStatusPropWorkspacesFlags(depth int, m *models.PromotionExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspacesFlagName := fmt.Sprintf("%v.workspaces", cmdPrefix)
	if cmd.Flags().Changed(workspacesFlagName) {
		// warning: workspaces array type []*WorkspacePromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
