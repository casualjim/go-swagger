// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/executions_logs"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationExecutionsLogsGenerateFullTaskExecutionLogsCmd returns a command to handle operation generateFullTaskExecutionLogs
func makeOperationExecutionsLogsGenerateFullTaskExecutionLogsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "generateFullTaskExecutionLogs",
		Short: `Generate full logs for Task execution. Please note the customer log download API is asynchronous, after receiving a token, the frequency on which you should check logs file status depends on the size of logs, the status endpoint should be used for this purpose`,
		RunE:  runOperationExecutionsLogsGenerateFullTaskExecutionLogs,
	}

	if err := registerOperationExecutionsLogsGenerateFullTaskExecutionLogsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationExecutionsLogsGenerateFullTaskExecutionLogs uses cmd flags to call endpoint api
func runOperationExecutionsLogsGenerateFullTaskExecutionLogs(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := executions_logs.NewGenerateFullTaskExecutionLogsParams()
	if err, _ = retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsEndTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsFileFormatFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsNewFileNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsStartTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationExecutionsLogsGenerateFullTaskExecutionLogsResult(appCli.ExecutionsLogs.GenerateFullTaskExecutionLogs(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationExecutionsLogsGenerateFullTaskExecutionLogsParamFlags registers all flags needed to fill params
func registerOperationExecutionsLogsGenerateFullTaskExecutionLogsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationExecutionsLogsGenerateFullTaskExecutionLogsEndTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGenerateFullTaskExecutionLogsFileFormatParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGenerateFullTaskExecutionLogsIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGenerateFullTaskExecutionLogsNewFileNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGenerateFullTaskExecutionLogsStartTimeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationExecutionsLogsGenerateFullTaskExecutionLogsEndTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endTimeDescription := `Latest log date and time`

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "endTime"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.endTime", cmdPrefix)
	}

	var endTimeFlagDefault string

	_ = cmd.PersistentFlags().String(endTimeFlagName, endTimeFlagDefault, endTimeDescription)

	return nil
}

func registerOperationExecutionsLogsGenerateFullTaskExecutionLogsFileFormatParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	fileFormatDescription := `Enum: ["TEXT","JSON"]. Generated file format JSON/TEXT`

	var fileFormatFlagName string
	if cmdPrefix == "" {
		fileFormatFlagName = "fileFormat"
	} else {
		fileFormatFlagName = fmt.Sprintf("%v.fileFormat", cmdPrefix)
	}

	var fileFormatFlagDefault string = "JSON"

	_ = cmd.PersistentFlags().String(fileFormatFlagName, fileFormatFlagDefault, fileFormatDescription)

	if err := cmd.RegisterFlagCompletionFunc(fileFormatFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["TEXT","JSON"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerOperationExecutionsLogsGenerateFullTaskExecutionLogsIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID of Task Execution`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerOperationExecutionsLogsGenerateFullTaskExecutionLogsNewFileNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	newFileNameDescription := `Use new file name for generated file: taskId_executionId.log`

	var newFileNameFlagName string
	if cmdPrefix == "" {
		newFileNameFlagName = "newFileName"
	} else {
		newFileNameFlagName = fmt.Sprintf("%v.newFileName", cmdPrefix)
	}

	var newFileNameFlagDefault string

	_ = cmd.PersistentFlags().String(newFileNameFlagName, newFileNameFlagDefault, newFileNameDescription)

	return nil
}

func registerOperationExecutionsLogsGenerateFullTaskExecutionLogsStartTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	startTimeDescription := `Earliest log date and time`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "startTime"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
	}

	var startTimeFlagDefault string

	_ = cmd.PersistentFlags().String(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsEndTimeFlag(m *executions_logs.GenerateFullTaskExecutionLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endTime") {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "endTime"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.endTime", cmdPrefix)
		}

		endTimeFlagValue, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		m.EndTime = &endTimeFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsFileFormatFlag(m *executions_logs.GenerateFullTaskExecutionLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("fileFormat") {

		var fileFormatFlagName string
		if cmdPrefix == "" {
			fileFormatFlagName = "fileFormat"
		} else {
			fileFormatFlagName = fmt.Sprintf("%v.fileFormat", cmdPrefix)
		}

		fileFormatFlagValue, err := cmd.Flags().GetString(fileFormatFlagName)
		if err != nil {
			return err, false
		}
		m.FileFormat = &fileFormatFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsIDFlag(m *executions_logs.GenerateFullTaskExecutionLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsNewFileNameFlag(m *executions_logs.GenerateFullTaskExecutionLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("newFileName") {

		var newFileNameFlagName string
		if cmdPrefix == "" {
			newFileNameFlagName = "newFileName"
		} else {
			newFileNameFlagName = fmt.Sprintf("%v.newFileName", cmdPrefix)
		}

		newFileNameFlagValue, err := cmd.Flags().GetString(newFileNameFlagName)
		if err != nil {
			return err, false
		}
		m.NewFileName = &newFileNameFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGenerateFullTaskExecutionLogsStartTimeFlag(m *executions_logs.GenerateFullTaskExecutionLogsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("startTime") {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "startTime"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = &startTimeFlagValue

	}

	return nil, retAdded
}

// parseOperationExecutionsLogsGenerateFullTaskExecutionLogsResult parses request result and return the string content
func parseOperationExecutionsLogsGenerateFullTaskExecutionLogsResult(resp0 *executions_logs.GenerateFullTaskExecutionLogsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*executions_logs.GenerateFullTaskExecutionLogsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*executions_logs.GenerateFullTaskExecutionLogsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*executions_logs.GenerateFullTaskExecutionLogsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*executions_logs.GenerateFullTaskExecutionLogsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*executions_logs.GenerateFullTaskExecutionLogsNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*executions_logs.GenerateFullTaskExecutionLogsInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
