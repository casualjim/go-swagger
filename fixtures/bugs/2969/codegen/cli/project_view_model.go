// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProjectView

// register flags to command
func registerModelProjectViewFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectViewPropAuthor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropCreateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropOwner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropProjectType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropRepoType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropTechnicalLabel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropUpdateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectViewPropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectViewPropAuthor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authorDescription := ``

	var authorFlagName string
	if cmdPrefix == "" {
		authorFlagName = "author"
	} else {
		authorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
	}

	var authorFlagDefault string

	_ = cmd.PersistentFlags().String(authorFlagName, authorFlagDefault, authorDescription)

	return nil
}

func registerProjectViewPropCreateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createDateDescription := ``

	var createDateFlagName string
	if cmdPrefix == "" {
		createDateFlagName = "createDate"
	} else {
		createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createDateFlagName, "", createDateDescription)

	return nil
}

func registerProjectViewPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := ``

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerProjectViewPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerProjectViewPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := ``

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerProjectViewPropOwner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerDescription := ``

	var ownerFlagName string
	if cmdPrefix == "" {
		ownerFlagName = "owner"
	} else {
		ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
	}

	var ownerFlagDefault string

	_ = cmd.PersistentFlags().String(ownerFlagName, ownerFlagDefault, ownerDescription)

	return nil
}

func registerProjectViewPropProjectType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectTypeDescription := `Enum: ["MDM","DQ","DI"]. `

	var projectTypeFlagName string
	if cmdPrefix == "" {
		projectTypeFlagName = "projectType"
	} else {
		projectTypeFlagName = fmt.Sprintf("%v.projectType", cmdPrefix)
	}

	var projectTypeFlagDefault string

	_ = cmd.PersistentFlags().String(projectTypeFlagName, projectTypeFlagDefault, projectTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(projectTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["MDM","DQ","DI"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerProjectViewPropRepoType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repoTypeDescription := `Enum: ["GIT","SVN","NONE"]. `

	var repoTypeFlagName string
	if cmdPrefix == "" {
		repoTypeFlagName = "repoType"
	} else {
		repoTypeFlagName = fmt.Sprintf("%v.repoType", cmdPrefix)
	}

	var repoTypeFlagDefault string

	_ = cmd.PersistentFlags().String(repoTypeFlagName, repoTypeFlagDefault, repoTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(repoTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["GIT","SVN","NONE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerProjectViewPropTechnicalLabel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	technicalLabelDescription := ``

	var technicalLabelFlagName string
	if cmdPrefix == "" {
		technicalLabelFlagName = "technicalLabel"
	} else {
		technicalLabelFlagName = fmt.Sprintf("%v.technicalLabel", cmdPrefix)
	}

	var technicalLabelFlagDefault string

	_ = cmd.PersistentFlags().String(technicalLabelFlagName, technicalLabelFlagDefault, technicalLabelDescription)

	return nil
}

func registerProjectViewPropUpdateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateDateDescription := ``

	var updateDateFlagName string
	if cmdPrefix == "" {
		updateDateFlagName = "updateDate"
	} else {
		updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateDateFlagName, "", updateDateDescription)

	return nil
}

func registerProjectViewPropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := ``

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectViewFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authorAdded := retrieveProjectViewPropAuthorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authorAdded

	err, createDateAdded := retrieveProjectViewPropCreateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createDateAdded

	err, descriptionAdded := retrieveProjectViewPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrieveProjectViewPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveProjectViewPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, ownerAdded := retrieveProjectViewPropOwnerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerAdded

	err, projectTypeAdded := retrieveProjectViewPropProjectTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectTypeAdded

	err, repoTypeAdded := retrieveProjectViewPropRepoTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repoTypeAdded

	err, technicalLabelAdded := retrieveProjectViewPropTechnicalLabelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || technicalLabelAdded

	err, updateDateAdded := retrieveProjectViewPropUpdateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateDateAdded

	err, urlAdded := retrieveProjectViewPropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	return nil, retAdded
}

func retrieveProjectViewPropAuthorFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authorFlagName := fmt.Sprintf("%v.author", cmdPrefix)
	if cmd.Flags().Changed(authorFlagName) {

		var authorFlagName string
		if cmdPrefix == "" {
			authorFlagName = "author"
		} else {
			authorFlagName = fmt.Sprintf("%v.author", cmdPrefix)
		}

		authorFlagValue, err := cmd.Flags().GetString(authorFlagName)
		if err != nil {
			return err, false
		}
		m.Author = authorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropCreateDateFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createDateFlagName := fmt.Sprintf("%v.createDate", cmdPrefix)
	if cmd.Flags().Changed(createDateFlagName) {

		var createDateFlagName string
		if cmdPrefix == "" {
			createDateFlagName = "createDate"
		} else {
			createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
		}

		createDateFlagValueStr, err := cmd.Flags().GetString(createDateFlagName)
		if err != nil {
			return err, false
		}
		var createDateFlagValue strfmt.DateTime
		if err := createDateFlagValue.UnmarshalText([]byte(createDateFlagValueStr)); err != nil {
			return err, false
		}
		m.CreateDate = createDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropDescriptionFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropIDFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropNameFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropOwnerFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerFlagName := fmt.Sprintf("%v.owner", cmdPrefix)
	if cmd.Flags().Changed(ownerFlagName) {

		var ownerFlagName string
		if cmdPrefix == "" {
			ownerFlagName = "owner"
		} else {
			ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
		}

		ownerFlagValue, err := cmd.Flags().GetString(ownerFlagName)
		if err != nil {
			return err, false
		}
		m.Owner = ownerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropProjectTypeFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectTypeFlagName := fmt.Sprintf("%v.projectType", cmdPrefix)
	if cmd.Flags().Changed(projectTypeFlagName) {

		var projectTypeFlagName string
		if cmdPrefix == "" {
			projectTypeFlagName = "projectType"
		} else {
			projectTypeFlagName = fmt.Sprintf("%v.projectType", cmdPrefix)
		}

		projectTypeFlagValue, err := cmd.Flags().GetString(projectTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectType = projectTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropRepoTypeFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repoTypeFlagName := fmt.Sprintf("%v.repoType", cmdPrefix)
	if cmd.Flags().Changed(repoTypeFlagName) {

		var repoTypeFlagName string
		if cmdPrefix == "" {
			repoTypeFlagName = "repoType"
		} else {
			repoTypeFlagName = fmt.Sprintf("%v.repoType", cmdPrefix)
		}

		repoTypeFlagValue, err := cmd.Flags().GetString(repoTypeFlagName)
		if err != nil {
			return err, false
		}
		m.RepoType = repoTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropTechnicalLabelFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	technicalLabelFlagName := fmt.Sprintf("%v.technicalLabel", cmdPrefix)
	if cmd.Flags().Changed(technicalLabelFlagName) {

		var technicalLabelFlagName string
		if cmdPrefix == "" {
			technicalLabelFlagName = "technicalLabel"
		} else {
			technicalLabelFlagName = fmt.Sprintf("%v.technicalLabel", cmdPrefix)
		}

		technicalLabelFlagValue, err := cmd.Flags().GetString(technicalLabelFlagName)
		if err != nil {
			return err, false
		}
		m.TechnicalLabel = technicalLabelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropUpdateDateFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateDateFlagName := fmt.Sprintf("%v.updateDate", cmdPrefix)
	if cmd.Flags().Changed(updateDateFlagName) {

		var updateDateFlagName string
		if cmdPrefix == "" {
			updateDateFlagName = "updateDate"
		} else {
			updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
		}

		updateDateFlagValueStr, err := cmd.Flags().GetString(updateDateFlagName)
		if err != nil {
			return err, false
		}
		var updateDateFlagValue strfmt.DateTime
		if err := updateDateFlagValue.UnmarshalText([]byte(updateDateFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateDate = updateDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectViewPropURLFlags(depth int, m *models.ProjectView, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
