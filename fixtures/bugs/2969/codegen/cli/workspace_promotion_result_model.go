// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for WorkspacePromotionResult

// register flags to command
func registerModelWorkspacePromotionResultFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWorkspacePromotionResultPropActions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropAnalyzeReport(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropClusters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropConnections(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropEngines(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropFlows(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropPlans(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropPromotionReport(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropTargetID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropTargetVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropWorkspaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWorkspacePromotionResultPropWorkspaceType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWorkspacePromotionResultPropActions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: actions []*ArtifactPromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkspacePromotionResultPropAnalyzeReport(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var analyzeReportFlagName string
	if cmdPrefix == "" {
		analyzeReportFlagName = "analyzeReport"
	} else {
		analyzeReportFlagName = fmt.Sprintf("%v.analyzeReport", cmdPrefix)
	}

	if err := registerModelReportFlags(depth+1, analyzeReportFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerWorkspacePromotionResultPropClusters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: clusters []*RuntimePromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkspacePromotionResultPropConnections(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: connections []*ArtifactPromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkspacePromotionResultPropEngines(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: engines []*RuntimePromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkspacePromotionResultPropFlows(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: flows []*FlowPromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkspacePromotionResultPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Artifact ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerWorkspacePromotionResultPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Artifact Name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerWorkspacePromotionResultPropPlans(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: plans []*ArtifactPromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkspacePromotionResultPropPromotionReport(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var promotionReportFlagName string
	if cmdPrefix == "" {
		promotionReportFlagName = "promotionReport"
	} else {
		promotionReportFlagName = fmt.Sprintf("%v.promotionReport", cmdPrefix)
	}

	if err := registerModelReportFlags(depth+1, promotionReportFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerWorkspacePromotionResultPropResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: resources []*ArtifactPromotionResult array type is not supported by go-swagger cli yet

	return nil
}

func registerWorkspacePromotionResultPropTargetID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	targetIdDescription := `Target Artifact ID`

	var targetIdFlagName string
	if cmdPrefix == "" {
		targetIdFlagName = "targetId"
	} else {
		targetIdFlagName = fmt.Sprintf("%v.targetId", cmdPrefix)
	}

	var targetIdFlagDefault string

	_ = cmd.PersistentFlags().String(targetIdFlagName, targetIdFlagDefault, targetIdDescription)

	return nil
}

func registerWorkspacePromotionResultPropTargetVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	targetVersionDescription := `Artifact target version`

	var targetVersionFlagName string
	if cmdPrefix == "" {
		targetVersionFlagName = "targetVersion"
	} else {
		targetVersionFlagName = fmt.Sprintf("%v.targetVersion", cmdPrefix)
	}

	var targetVersionFlagDefault string

	_ = cmd.PersistentFlags().String(targetVersionFlagName, targetVersionFlagDefault, targetVersionDescription)

	return nil
}

func registerWorkspacePromotionResultPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["WORKSPACE","PLAN","FLOW","ACTION","CONNECTION","RESOURCE","ENGINE","CLUSTER"]. Artifact Type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["WORKSPACE","PLAN","FLOW","ACTION","CONNECTION","RESOURCE","ENGINE","CLUSTER"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerWorkspacePromotionResultPropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Artifact version`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerWorkspacePromotionResultPropWorkspaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceIdDescription := `Workspace id`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

func registerWorkspacePromotionResultPropWorkspaceType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceTypeDescription := `Workspace type`

	var workspaceTypeFlagName string
	if cmdPrefix == "" {
		workspaceTypeFlagName = "workspaceType"
	} else {
		workspaceTypeFlagName = fmt.Sprintf("%v.workspaceType", cmdPrefix)
	}

	var workspaceTypeFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceTypeFlagName, workspaceTypeFlagDefault, workspaceTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWorkspacePromotionResultFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionsAdded := retrieveWorkspacePromotionResultPropActionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionsAdded

	err, analyzeReportAdded := retrieveWorkspacePromotionResultPropAnalyzeReportFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || analyzeReportAdded

	err, clustersAdded := retrieveWorkspacePromotionResultPropClustersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clustersAdded

	err, connectionsAdded := retrieveWorkspacePromotionResultPropConnectionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionsAdded

	err, enginesAdded := retrieveWorkspacePromotionResultPropEnginesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enginesAdded

	err, flowsAdded := retrieveWorkspacePromotionResultPropFlowsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || flowsAdded

	err, idAdded := retrieveWorkspacePromotionResultPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveWorkspacePromotionResultPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, plansAdded := retrieveWorkspacePromotionResultPropPlansFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || plansAdded

	err, promotionReportAdded := retrieveWorkspacePromotionResultPropPromotionReportFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || promotionReportAdded

	err, resourcesAdded := retrieveWorkspacePromotionResultPropResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourcesAdded

	err, targetIdAdded := retrieveWorkspacePromotionResultPropTargetIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetIdAdded

	err, targetVersionAdded := retrieveWorkspacePromotionResultPropTargetVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetVersionAdded

	err, typeAdded := retrieveWorkspacePromotionResultPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, versionAdded := retrieveWorkspacePromotionResultPropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, workspaceIdAdded := retrieveWorkspacePromotionResultPropWorkspaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdAdded

	err, workspaceTypeAdded := retrieveWorkspacePromotionResultPropWorkspaceTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceTypeAdded

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropActionsFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionsFlagName := fmt.Sprintf("%v.actions", cmdPrefix)
	if cmd.Flags().Changed(actionsFlagName) {
		// warning: actions array type []*ArtifactPromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropAnalyzeReportFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	analyzeReportFlagName := fmt.Sprintf("%v.analyzeReport", cmdPrefix)
	if cmd.Flags().Changed(analyzeReportFlagName) {
		// info: complex object analyzeReport Report is retrieved outside this Changed() block
	}
	analyzeReportFlagValue := m.AnalyzeReport
	if swag.IsZero(analyzeReportFlagValue) {
		analyzeReportFlagValue = &models.Report{}
	}

	err, analyzeReportAdded := retrieveModelReportFlags(depth+1, analyzeReportFlagValue, analyzeReportFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || analyzeReportAdded
	if analyzeReportAdded {
		m.AnalyzeReport = analyzeReportFlagValue
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropClustersFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clustersFlagName := fmt.Sprintf("%v.clusters", cmdPrefix)
	if cmd.Flags().Changed(clustersFlagName) {
		// warning: clusters array type []*RuntimePromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropConnectionsFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionsFlagName := fmt.Sprintf("%v.connections", cmdPrefix)
	if cmd.Flags().Changed(connectionsFlagName) {
		// warning: connections array type []*ArtifactPromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropEnginesFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enginesFlagName := fmt.Sprintf("%v.engines", cmdPrefix)
	if cmd.Flags().Changed(enginesFlagName) {
		// warning: engines array type []*RuntimePromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropFlowsFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flowsFlagName := fmt.Sprintf("%v.flows", cmdPrefix)
	if cmd.Flags().Changed(flowsFlagName) {
		// warning: flows array type []*FlowPromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropIDFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropNameFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropPlansFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	plansFlagName := fmt.Sprintf("%v.plans", cmdPrefix)
	if cmd.Flags().Changed(plansFlagName) {
		// warning: plans array type []*ArtifactPromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropPromotionReportFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	promotionReportFlagName := fmt.Sprintf("%v.promotionReport", cmdPrefix)
	if cmd.Flags().Changed(promotionReportFlagName) {
		// info: complex object promotionReport Report is retrieved outside this Changed() block
	}
	promotionReportFlagValue := m.PromotionReport
	if swag.IsZero(promotionReportFlagValue) {
		promotionReportFlagValue = &models.Report{}
	}

	err, promotionReportAdded := retrieveModelReportFlags(depth+1, promotionReportFlagValue, promotionReportFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || promotionReportAdded
	if promotionReportAdded {
		m.PromotionReport = promotionReportFlagValue
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropResourcesFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourcesFlagName := fmt.Sprintf("%v.resources", cmdPrefix)
	if cmd.Flags().Changed(resourcesFlagName) {
		// warning: resources array type []*ArtifactPromotionResult is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropTargetIDFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	targetIdFlagName := fmt.Sprintf("%v.targetId", cmdPrefix)
	if cmd.Flags().Changed(targetIdFlagName) {

		var targetIdFlagName string
		if cmdPrefix == "" {
			targetIdFlagName = "targetId"
		} else {
			targetIdFlagName = fmt.Sprintf("%v.targetId", cmdPrefix)
		}

		targetIdFlagValue, err := cmd.Flags().GetString(targetIdFlagName)
		if err != nil {
			return err, false
		}
		m.TargetID = targetIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropTargetVersionFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	targetVersionFlagName := fmt.Sprintf("%v.targetVersion", cmdPrefix)
	if cmd.Flags().Changed(targetVersionFlagName) {

		var targetVersionFlagName string
		if cmdPrefix == "" {
			targetVersionFlagName = "targetVersion"
		} else {
			targetVersionFlagName = fmt.Sprintf("%v.targetVersion", cmdPrefix)
		}

		targetVersionFlagValue, err := cmd.Flags().GetString(targetVersionFlagName)
		if err != nil {
			return err, false
		}
		m.TargetVersion = targetVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropTypeFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropVersionFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropWorkspaceIDFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdFlagName := fmt.Sprintf("%v.workspaceId", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdFlagName) {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = workspaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWorkspacePromotionResultPropWorkspaceTypeFlags(depth int, m *models.WorkspacePromotionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceTypeFlagName := fmt.Sprintf("%v.workspaceType", cmdPrefix)
	if cmd.Flags().Changed(workspaceTypeFlagName) {

		var workspaceTypeFlagName string
		if cmdPrefix == "" {
			workspaceTypeFlagName = "workspaceType"
		} else {
			workspaceTypeFlagName = fmt.Sprintf("%v.workspaceType", cmdPrefix)
		}

		workspaceTypeFlagValue, err := cmd.Flags().GetString(workspaceTypeFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceType = workspaceTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
