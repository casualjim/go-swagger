// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for AutoUpgradeInfo

// register flags to command
func registerModelAutoUpgradeInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAutoUpgradeInfoPropAutoUpgradable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAutoUpgradeInfoPropOverrideWithDefaultParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAutoUpgradeInfoPropAutoUpgradable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	autoUpgradableDescription := `Indicates whether to automatically upgrade task after publishing new artifact version`

	var autoUpgradableFlagName string
	if cmdPrefix == "" {
		autoUpgradableFlagName = "autoUpgradable"
	} else {
		autoUpgradableFlagName = fmt.Sprintf("%v.autoUpgradable", cmdPrefix)
	}

	var autoUpgradableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(autoUpgradableFlagName, autoUpgradableFlagDefault, autoUpgradableDescription)

	return nil
}

func registerAutoUpgradeInfoPropOverrideWithDefaultParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	overrideWithDefaultParametersDescription := `Indicates whether to override task parameters with artifact default parameters during auto upgrade`

	var overrideWithDefaultParametersFlagName string
	if cmdPrefix == "" {
		overrideWithDefaultParametersFlagName = "overrideWithDefaultParameters"
	} else {
		overrideWithDefaultParametersFlagName = fmt.Sprintf("%v.overrideWithDefaultParameters", cmdPrefix)
	}

	var overrideWithDefaultParametersFlagDefault bool

	_ = cmd.PersistentFlags().Bool(overrideWithDefaultParametersFlagName, overrideWithDefaultParametersFlagDefault, overrideWithDefaultParametersDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAutoUpgradeInfoFlags(depth int, m *models.AutoUpgradeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, autoUpgradableAdded := retrieveAutoUpgradeInfoPropAutoUpgradableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpgradableAdded

	err, overrideWithDefaultParametersAdded := retrieveAutoUpgradeInfoPropOverrideWithDefaultParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || overrideWithDefaultParametersAdded

	return nil, retAdded
}

func retrieveAutoUpgradeInfoPropAutoUpgradableFlags(depth int, m *models.AutoUpgradeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpgradableFlagName := fmt.Sprintf("%v.autoUpgradable", cmdPrefix)
	if cmd.Flags().Changed(autoUpgradableFlagName) {

		var autoUpgradableFlagName string
		if cmdPrefix == "" {
			autoUpgradableFlagName = "autoUpgradable"
		} else {
			autoUpgradableFlagName = fmt.Sprintf("%v.autoUpgradable", cmdPrefix)
		}

		autoUpgradableFlagValue, err := cmd.Flags().GetBool(autoUpgradableFlagName)
		if err != nil {
			return err, false
		}
		m.AutoUpgradable = autoUpgradableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAutoUpgradeInfoPropOverrideWithDefaultParametersFlags(depth int, m *models.AutoUpgradeInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	overrideWithDefaultParametersFlagName := fmt.Sprintf("%v.overrideWithDefaultParameters", cmdPrefix)
	if cmd.Flags().Changed(overrideWithDefaultParametersFlagName) {

		var overrideWithDefaultParametersFlagName string
		if cmdPrefix == "" {
			overrideWithDefaultParametersFlagName = "overrideWithDefaultParameters"
		} else {
			overrideWithDefaultParametersFlagName = fmt.Sprintf("%v.overrideWithDefaultParameters", cmdPrefix)
		}

		overrideWithDefaultParametersFlagValue, err := cmd.Flags().GetBool(overrideWithDefaultParametersFlagName)
		if err != nil {
			return err, false
		}
		m.OverrideWithDefaultParameters = overrideWithDefaultParametersFlagValue

		retAdded = true
	}

	return nil, retAdded
}
