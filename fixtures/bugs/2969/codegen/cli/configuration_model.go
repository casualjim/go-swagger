// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Configuration

// register flags to command
func registerModelConfigurationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigurationPropMicroBatchInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationPropNumberOfThreads(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationPropParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationPropMicroBatchInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	microBatchIntervalDescription := `Required. Micro-batch interval (in ms)`

	var microBatchIntervalFlagName string
	if cmdPrefix == "" {
		microBatchIntervalFlagName = "microBatchInterval"
	} else {
		microBatchIntervalFlagName = fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
	}

	var microBatchIntervalFlagDefault int32

	_ = cmd.PersistentFlags().Int32(microBatchIntervalFlagName, microBatchIntervalFlagDefault, microBatchIntervalDescription)

	return nil
}

func registerConfigurationPropNumberOfThreads(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberOfThreadsDescription := `Required. Number of threads`

	var numberOfThreadsFlagName string
	if cmdPrefix == "" {
		numberOfThreadsFlagName = "numberOfThreads"
	} else {
		numberOfThreadsFlagName = fmt.Sprintf("%v.numberOfThreads", cmdPrefix)
	}

	var numberOfThreadsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(numberOfThreadsFlagName, numberOfThreadsFlagDefault, numberOfThreadsDescription)

	return nil
}

func registerConfigurationPropParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigurationFlags(depth int, m *models.Configuration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, microBatchIntervalAdded := retrieveConfigurationPropMicroBatchIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || microBatchIntervalAdded

	err, numberOfThreadsAdded := retrieveConfigurationPropNumberOfThreadsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberOfThreadsAdded

	err, parametersAdded := retrieveConfigurationPropParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	return nil, retAdded
}

func retrieveConfigurationPropMicroBatchIntervalFlags(depth int, m *models.Configuration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	microBatchIntervalFlagName := fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
	if cmd.Flags().Changed(microBatchIntervalFlagName) {

		var microBatchIntervalFlagName string
		if cmdPrefix == "" {
			microBatchIntervalFlagName = "microBatchInterval"
		} else {
			microBatchIntervalFlagName = fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
		}

		microBatchIntervalFlagValue, err := cmd.Flags().GetInt32(microBatchIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.MicroBatchInterval = &microBatchIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationPropNumberOfThreadsFlags(depth int, m *models.Configuration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberOfThreadsFlagName := fmt.Sprintf("%v.numberOfThreads", cmdPrefix)
	if cmd.Flags().Changed(numberOfThreadsFlagName) {

		var numberOfThreadsFlagName string
		if cmdPrefix == "" {
			numberOfThreadsFlagName = "numberOfThreads"
		} else {
			numberOfThreadsFlagName = fmt.Sprintf("%v.numberOfThreads", cmdPrefix)
		}

		numberOfThreadsFlagValue, err := cmd.Flags().GetInt32(numberOfThreadsFlagName)
		if err != nil {
			return err, false
		}
		m.NumberOfThreads = &numberOfThreadsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationPropParametersFlags(depth int, m *models.Configuration, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
