// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for CreateConnectionRequest

// register flags to command
func registerModelCreateConnectionRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCreateConnectionRequestPropApp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreateConnectionRequestPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreateConnectionRequestPropParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCreateConnectionRequestPropWorkspaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCreateConnectionRequestPropApp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	appDescription := `Required. Application name`

	var appFlagName string
	if cmdPrefix == "" {
		appFlagName = "app"
	} else {
		appFlagName = fmt.Sprintf("%v.app", cmdPrefix)
	}

	var appFlagDefault string

	_ = cmd.PersistentFlags().String(appFlagName, appFlagDefault, appDescription)

	return nil
}

func registerCreateConnectionRequestPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Connection name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerCreateConnectionRequestPropParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters []*ConnectionParameter array type is not supported by go-swagger cli yet

	return nil
}

func registerCreateConnectionRequestPropWorkspaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceIdDescription := `Required. Workspace ID`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCreateConnectionRequestFlags(depth int, m *models.CreateConnectionRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, appAdded := retrieveCreateConnectionRequestPropAppFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || appAdded

	err, nameAdded := retrieveCreateConnectionRequestPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, parametersAdded := retrieveCreateConnectionRequestPropParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, workspaceIdAdded := retrieveCreateConnectionRequestPropWorkspaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdAdded

	return nil, retAdded
}

func retrieveCreateConnectionRequestPropAppFlags(depth int, m *models.CreateConnectionRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	appFlagName := fmt.Sprintf("%v.app", cmdPrefix)
	if cmd.Flags().Changed(appFlagName) {

		var appFlagName string
		if cmdPrefix == "" {
			appFlagName = "app"
		} else {
			appFlagName = fmt.Sprintf("%v.app", cmdPrefix)
		}

		appFlagValue, err := cmd.Flags().GetString(appFlagName)
		if err != nil {
			return err, false
		}
		m.App = &appFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCreateConnectionRequestPropNameFlags(depth int, m *models.CreateConnectionRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCreateConnectionRequestPropParametersFlags(depth int, m *models.CreateConnectionRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters array type []*ConnectionParameter is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCreateConnectionRequestPropWorkspaceIDFlags(depth int, m *models.CreateConnectionRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdFlagName := fmt.Sprintf("%v.workspaceId", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdFlagName) {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = &workspaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
