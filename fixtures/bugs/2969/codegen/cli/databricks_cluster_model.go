// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for DatabricksCluster

// register flags to command
func registerModelDatabricksClusterFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDatabricksClusterPropCluster(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksClusterPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksClusterPropLogsDestination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksClusterPropNodeTypeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksClusterPropSparkVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabricksClusterPropWorkersNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDatabricksClusterPropCluster(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clusterDescription := `Enum: ["new","old"]. Required. New or existing cluster`

	var clusterFlagName string
	if cmdPrefix == "" {
		clusterFlagName = "cluster"
	} else {
		clusterFlagName = fmt.Sprintf("%v.cluster", cmdPrefix)
	}

	var clusterFlagDefault string

	_ = cmd.PersistentFlags().String(clusterFlagName, clusterFlagDefault, clusterDescription)

	if err := cmd.RegisterFlagCompletionFunc(clusterFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["new","old"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDatabricksClusterPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `ID of existing cluster. Required for 'old' cluster`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerDatabricksClusterPropLogsDestination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	logsDestinationDescription := `Required. Logs destination. Required for 'new' cluster`

	var logsDestinationFlagName string
	if cmdPrefix == "" {
		logsDestinationFlagName = "logsDestination"
	} else {
		logsDestinationFlagName = fmt.Sprintf("%v.logsDestination", cmdPrefix)
	}

	var logsDestinationFlagDefault string

	_ = cmd.PersistentFlags().String(logsDestinationFlagName, logsDestinationFlagDefault, logsDestinationDescription)

	return nil
}

func registerDatabricksClusterPropNodeTypeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nodeTypeIdDescription := `Required. Node type ID. Required for 'new' cluster`

	var nodeTypeIdFlagName string
	if cmdPrefix == "" {
		nodeTypeIdFlagName = "nodeTypeId"
	} else {
		nodeTypeIdFlagName = fmt.Sprintf("%v.nodeTypeId", cmdPrefix)
	}

	var nodeTypeIdFlagDefault string

	_ = cmd.PersistentFlags().String(nodeTypeIdFlagName, nodeTypeIdFlagDefault, nodeTypeIdDescription)

	return nil
}

func registerDatabricksClusterPropSparkVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sparkVersionDescription := `Databricks runtime version. Required for 'new' cluster`

	var sparkVersionFlagName string
	if cmdPrefix == "" {
		sparkVersionFlagName = "sparkVersion"
	} else {
		sparkVersionFlagName = fmt.Sprintf("%v.sparkVersion", cmdPrefix)
	}

	var sparkVersionFlagDefault string

	_ = cmd.PersistentFlags().String(sparkVersionFlagName, sparkVersionFlagDefault, sparkVersionDescription)

	return nil
}

func registerDatabricksClusterPropWorkersNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workersNumberDescription := `Required. Number of workers. Required for 'new' cluster`

	var workersNumberFlagName string
	if cmdPrefix == "" {
		workersNumberFlagName = "workersNumber"
	} else {
		workersNumberFlagName = fmt.Sprintf("%v.workersNumber", cmdPrefix)
	}

	var workersNumberFlagDefault int32

	_ = cmd.PersistentFlags().Int32(workersNumberFlagName, workersNumberFlagDefault, workersNumberDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDatabricksClusterFlags(depth int, m *models.DatabricksCluster, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clusterAdded := retrieveDatabricksClusterPropClusterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clusterAdded

	err, idAdded := retrieveDatabricksClusterPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, logsDestinationAdded := retrieveDatabricksClusterPropLogsDestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || logsDestinationAdded

	err, nodeTypeIdAdded := retrieveDatabricksClusterPropNodeTypeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nodeTypeIdAdded

	err, sparkVersionAdded := retrieveDatabricksClusterPropSparkVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sparkVersionAdded

	err, workersNumberAdded := retrieveDatabricksClusterPropWorkersNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workersNumberAdded

	return nil, retAdded
}

func retrieveDatabricksClusterPropClusterFlags(depth int, m *models.DatabricksCluster, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clusterFlagName := fmt.Sprintf("%v.cluster", cmdPrefix)
	if cmd.Flags().Changed(clusterFlagName) {

		var clusterFlagName string
		if cmdPrefix == "" {
			clusterFlagName = "cluster"
		} else {
			clusterFlagName = fmt.Sprintf("%v.cluster", cmdPrefix)
		}

		clusterFlagValue, err := cmd.Flags().GetString(clusterFlagName)
		if err != nil {
			return err, false
		}
		m.Cluster = &clusterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksClusterPropIDFlags(depth int, m *models.DatabricksCluster, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksClusterPropLogsDestinationFlags(depth int, m *models.DatabricksCluster, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	logsDestinationFlagName := fmt.Sprintf("%v.logsDestination", cmdPrefix)
	if cmd.Flags().Changed(logsDestinationFlagName) {

		var logsDestinationFlagName string
		if cmdPrefix == "" {
			logsDestinationFlagName = "logsDestination"
		} else {
			logsDestinationFlagName = fmt.Sprintf("%v.logsDestination", cmdPrefix)
		}

		logsDestinationFlagValue, err := cmd.Flags().GetString(logsDestinationFlagName)
		if err != nil {
			return err, false
		}
		m.LogsDestination = &logsDestinationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksClusterPropNodeTypeIDFlags(depth int, m *models.DatabricksCluster, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nodeTypeIdFlagName := fmt.Sprintf("%v.nodeTypeId", cmdPrefix)
	if cmd.Flags().Changed(nodeTypeIdFlagName) {

		var nodeTypeIdFlagName string
		if cmdPrefix == "" {
			nodeTypeIdFlagName = "nodeTypeId"
		} else {
			nodeTypeIdFlagName = fmt.Sprintf("%v.nodeTypeId", cmdPrefix)
		}

		nodeTypeIdFlagValue, err := cmd.Flags().GetString(nodeTypeIdFlagName)
		if err != nil {
			return err, false
		}
		m.NodeTypeID = &nodeTypeIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksClusterPropSparkVersionFlags(depth int, m *models.DatabricksCluster, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sparkVersionFlagName := fmt.Sprintf("%v.sparkVersion", cmdPrefix)
	if cmd.Flags().Changed(sparkVersionFlagName) {

		var sparkVersionFlagName string
		if cmdPrefix == "" {
			sparkVersionFlagName = "sparkVersion"
		} else {
			sparkVersionFlagName = fmt.Sprintf("%v.sparkVersion", cmdPrefix)
		}

		sparkVersionFlagValue, err := cmd.Flags().GetString(sparkVersionFlagName)
		if err != nil {
			return err, false
		}
		m.SparkVersion = sparkVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabricksClusterPropWorkersNumberFlags(depth int, m *models.DatabricksCluster, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workersNumberFlagName := fmt.Sprintf("%v.workersNumber", cmdPrefix)
	if cmd.Flags().Changed(workersNumberFlagName) {

		var workersNumberFlagName string
		if cmdPrefix == "" {
			workersNumberFlagName = "workersNumber"
		} else {
			workersNumberFlagName = fmt.Sprintf("%v.workersNumber", cmdPrefix)
		}

		workersNumberFlagValue, err := cmd.Flags().GetInt32(workersNumberFlagName)
		if err != nil {
			return err, false
		}
		m.WorkersNumber = &workersNumberFlagValue

		retAdded = true
	}

	return nil, retAdded
}
