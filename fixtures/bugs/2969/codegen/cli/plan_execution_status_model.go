// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PlanExecutionStatus

// register flags to command
func registerModelPlanExecutionStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanExecutionStatusPropDoneExecutableCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropDoneExecutableDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropExecutionStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropFinishTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropPlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropPlannedExecutableCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropStartTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutionStatusPropUserType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanExecutionStatusPropDoneExecutableCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	doneExecutableCountDescription := `Number of done executables`

	var doneExecutableCountFlagName string
	if cmdPrefix == "" {
		doneExecutableCountFlagName = "doneExecutableCount"
	} else {
		doneExecutableCountFlagName = fmt.Sprintf("%v.doneExecutableCount", cmdPrefix)
	}

	var doneExecutableCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(doneExecutableCountFlagName, doneExecutableCountFlagDefault, doneExecutableCountDescription)

	return nil
}

func registerPlanExecutionStatusPropDoneExecutableDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: doneExecutableDetails []*JobExecutionStatus array type is not supported by go-swagger cli yet

	return nil
}

func registerPlanExecutionStatusPropExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := `Required. Job execution ID`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "executionId"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
	}

	var executionIdFlagDefault string

	_ = cmd.PersistentFlags().String(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerPlanExecutionStatusPropExecutionStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionStatusDescription := `Enum: ["UNDEFINED","STARTED","FINISHED","EXECUTION_FAILED","EXECUTION_SUCCESS"]. Required. Execution (detailed) status`

	var executionStatusFlagName string
	if cmdPrefix == "" {
		executionStatusFlagName = "executionStatus"
	} else {
		executionStatusFlagName = fmt.Sprintf("%v.executionStatus", cmdPrefix)
	}

	var executionStatusFlagDefault string

	_ = cmd.PersistentFlags().String(executionStatusFlagName, executionStatusFlagDefault, executionStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(executionStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["UNDEFINED","STARTED","FINISHED","EXECUTION_FAILED","EXECUTION_SUCCESS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerPlanExecutionStatusPropFinishTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	finishTimestampDescription := `End time of job execution (UTC)`

	var finishTimestampFlagName string
	if cmdPrefix == "" {
		finishTimestampFlagName = "finishTimestamp"
	} else {
		finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(finishTimestampFlagName, "", finishTimestampDescription)

	return nil
}

func registerPlanExecutionStatusPropPlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	planIdDescription := `Required. Plan ID`

	var planIdFlagName string
	if cmdPrefix == "" {
		planIdFlagName = "planId"
	} else {
		planIdFlagName = fmt.Sprintf("%v.planId", cmdPrefix)
	}

	var planIdFlagDefault string

	_ = cmd.PersistentFlags().String(planIdFlagName, planIdFlagDefault, planIdDescription)

	return nil
}

func registerPlanExecutionStatusPropPlannedExecutableCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	plannedExecutableCountDescription := `Number of planned executables`

	var plannedExecutableCountFlagName string
	if cmdPrefix == "" {
		plannedExecutableCountFlagName = "plannedExecutableCount"
	} else {
		plannedExecutableCountFlagName = fmt.Sprintf("%v.plannedExecutableCount", cmdPrefix)
	}

	var plannedExecutableCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(plannedExecutableCountFlagName, plannedExecutableCountFlagDefault, plannedExecutableCountDescription)

	return nil
}

func registerPlanExecutionStatusPropStartTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimestampDescription := `Required. Start time of job execution (UTC)`

	var startTimestampFlagName string
	if cmdPrefix == "" {
		startTimestampFlagName = "startTimestamp"
	} else {
		startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startTimestampFlagName, "", startTimestampDescription)

	return nil
}

func registerPlanExecutionStatusPropUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := `Required. User who triggered or scheduled the execution`

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "userId"
	} else {
		userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
	}

	var userIdFlagDefault string

	_ = cmd.PersistentFlags().String(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

func registerPlanExecutionStatusPropUserType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userTypeDescription := `Enum: ["HUMAN","SERVICE"]. Required. Type of user who triggered or scheduled the execution (HUMAN or SERVICE)`

	var userTypeFlagName string
	if cmdPrefix == "" {
		userTypeFlagName = "userType"
	} else {
		userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
	}

	var userTypeFlagDefault string

	_ = cmd.PersistentFlags().String(userTypeFlagName, userTypeFlagDefault, userTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(userTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanExecutionStatusFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, doneExecutableCountAdded := retrievePlanExecutionStatusPropDoneExecutableCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || doneExecutableCountAdded

	err, doneExecutableDetailsAdded := retrievePlanExecutionStatusPropDoneExecutableDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || doneExecutableDetailsAdded

	err, executionIdAdded := retrievePlanExecutionStatusPropExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, executionStatusAdded := retrievePlanExecutionStatusPropExecutionStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionStatusAdded

	err, finishTimestampAdded := retrievePlanExecutionStatusPropFinishTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishTimestampAdded

	err, planIdAdded := retrievePlanExecutionStatusPropPlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planIdAdded

	err, plannedExecutableCountAdded := retrievePlanExecutionStatusPropPlannedExecutableCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || plannedExecutableCountAdded

	err, startTimestampAdded := retrievePlanExecutionStatusPropStartTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimestampAdded

	err, userIdAdded := retrievePlanExecutionStatusPropUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	err, userTypeAdded := retrievePlanExecutionStatusPropUserTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userTypeAdded

	return nil, retAdded
}

func retrievePlanExecutionStatusPropDoneExecutableCountFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	doneExecutableCountFlagName := fmt.Sprintf("%v.doneExecutableCount", cmdPrefix)
	if cmd.Flags().Changed(doneExecutableCountFlagName) {

		var doneExecutableCountFlagName string
		if cmdPrefix == "" {
			doneExecutableCountFlagName = "doneExecutableCount"
		} else {
			doneExecutableCountFlagName = fmt.Sprintf("%v.doneExecutableCount", cmdPrefix)
		}

		doneExecutableCountFlagValue, err := cmd.Flags().GetInt32(doneExecutableCountFlagName)
		if err != nil {
			return err, false
		}
		m.DoneExecutableCount = doneExecutableCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropDoneExecutableDetailsFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	doneExecutableDetailsFlagName := fmt.Sprintf("%v.doneExecutableDetails", cmdPrefix)
	if cmd.Flags().Changed(doneExecutableDetailsFlagName) {
		// warning: doneExecutableDetails array type []*JobExecutionStatus is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropExecutionIDFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.executionId", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "executionId"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetString(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = &executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropExecutionStatusFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionStatusFlagName := fmt.Sprintf("%v.executionStatus", cmdPrefix)
	if cmd.Flags().Changed(executionStatusFlagName) {

		var executionStatusFlagName string
		if cmdPrefix == "" {
			executionStatusFlagName = "executionStatus"
		} else {
			executionStatusFlagName = fmt.Sprintf("%v.executionStatus", cmdPrefix)
		}

		executionStatusFlagValue, err := cmd.Flags().GetString(executionStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionStatus = &executionStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropFinishTimestampFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	finishTimestampFlagName := fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	if cmd.Flags().Changed(finishTimestampFlagName) {

		var finishTimestampFlagName string
		if cmdPrefix == "" {
			finishTimestampFlagName = "finishTimestamp"
		} else {
			finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
		}

		finishTimestampFlagValueStr, err := cmd.Flags().GetString(finishTimestampFlagName)
		if err != nil {
			return err, false
		}
		var finishTimestampFlagValue strfmt.DateTime
		if err := finishTimestampFlagValue.UnmarshalText([]byte(finishTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.FinishTimestamp = finishTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropPlanIDFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	planIdFlagName := fmt.Sprintf("%v.planId", cmdPrefix)
	if cmd.Flags().Changed(planIdFlagName) {

		var planIdFlagName string
		if cmdPrefix == "" {
			planIdFlagName = "planId"
		} else {
			planIdFlagName = fmt.Sprintf("%v.planId", cmdPrefix)
		}

		planIdFlagValue, err := cmd.Flags().GetString(planIdFlagName)
		if err != nil {
			return err, false
		}
		m.PlanID = &planIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropPlannedExecutableCountFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	plannedExecutableCountFlagName := fmt.Sprintf("%v.plannedExecutableCount", cmdPrefix)
	if cmd.Flags().Changed(plannedExecutableCountFlagName) {

		var plannedExecutableCountFlagName string
		if cmdPrefix == "" {
			plannedExecutableCountFlagName = "plannedExecutableCount"
		} else {
			plannedExecutableCountFlagName = fmt.Sprintf("%v.plannedExecutableCount", cmdPrefix)
		}

		plannedExecutableCountFlagValue, err := cmd.Flags().GetInt32(plannedExecutableCountFlagName)
		if err != nil {
			return err, false
		}
		m.PlannedExecutableCount = plannedExecutableCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropStartTimestampFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimestampFlagName := fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	if cmd.Flags().Changed(startTimestampFlagName) {

		var startTimestampFlagName string
		if cmdPrefix == "" {
			startTimestampFlagName = "startTimestamp"
		} else {
			startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
		}

		startTimestampFlagValueStr, err := cmd.Flags().GetString(startTimestampFlagName)
		if err != nil {
			return err, false
		}
		var startTimestampFlagValue strfmt.DateTime
		if err := startTimestampFlagValue.UnmarshalText([]byte(startTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.StartTimestamp = &startTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropUserIDFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.userId", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "userId"
		} else {
			userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetString(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = &userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutionStatusPropUserTypeFlags(depth int, m *models.PlanExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userTypeFlagName := fmt.Sprintf("%v.userType", cmdPrefix)
	if cmd.Flags().Changed(userTypeFlagName) {

		var userTypeFlagName string
		if cmdPrefix == "" {
			userTypeFlagName = "userType"
		} else {
			userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
		}

		userTypeFlagValue, err := cmd.Flags().GetString(userTypeFlagName)
		if err != nil {
			return err, false
		}
		m.UserType = &userTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
