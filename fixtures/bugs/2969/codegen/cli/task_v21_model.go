// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for TaskV21

// register flags to command
func registerModelTaskV21Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskV21PropArtifact(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropAutoUpgradeInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropConnections(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropTaskPauseDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21PropWorkspace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskV21PropArtifact(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var artifactFlagName string
	if cmdPrefix == "" {
		artifactFlagName = "artifact"
	} else {
		artifactFlagName = fmt.Sprintf("%v.artifact", cmdPrefix)
	}

	if err := registerModelBaseArtifactVersionFlags(depth+1, artifactFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskV21PropAutoUpgradeInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var autoUpgradeInfoFlagName string
	if cmdPrefix == "" {
		autoUpgradeInfoFlagName = "autoUpgradeInfo"
	} else {
		autoUpgradeInfoFlagName = fmt.Sprintf("%v.autoUpgradeInfo", cmdPrefix)
	}

	if err := registerModelAutoUpgradeInfoFlags(depth+1, autoUpgradeInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskV21PropConnections(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: connections map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21PropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Task description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerTaskV21PropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Required. Id of task`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerTaskV21PropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name of task`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerTaskV21PropParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21PropResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: resources map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21PropTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21PropTaskPauseDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var taskPauseDetailsFlagName string
	if cmdPrefix == "" {
		taskPauseDetailsFlagName = "taskPauseDetails"
	} else {
		taskPauseDetailsFlagName = fmt.Sprintf("%v.taskPauseDetails", cmdPrefix)
	}

	if err := registerModelTaskPauseDetailsFlags(depth+1, taskPauseDetailsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskV21PropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `Required. Task version`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

func registerTaskV21PropWorkspace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var workspaceFlagName string
	if cmdPrefix == "" {
		workspaceFlagName = "workspace"
	} else {
		workspaceFlagName = fmt.Sprintf("%v.workspace", cmdPrefix)
	}

	if err := registerModelWorkspaceInfoFlags(depth+1, workspaceFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskV21Flags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, artifactAdded := retrieveTaskV21PropArtifactFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactAdded

	err, autoUpgradeInfoAdded := retrieveTaskV21PropAutoUpgradeInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpgradeInfoAdded

	err, connectionsAdded := retrieveTaskV21PropConnectionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionsAdded

	err, descriptionAdded := retrieveTaskV21PropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, idAdded := retrieveTaskV21PropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveTaskV21PropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, parametersAdded := retrieveTaskV21PropParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, resourcesAdded := retrieveTaskV21PropResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourcesAdded

	err, tagsAdded := retrieveTaskV21PropTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, taskPauseDetailsAdded := retrieveTaskV21PropTaskPauseDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskPauseDetailsAdded

	err, versionAdded := retrieveTaskV21PropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	err, workspaceAdded := retrieveTaskV21PropWorkspaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded

	return nil, retAdded
}

func retrieveTaskV21PropArtifactFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactFlagName := fmt.Sprintf("%v.artifact", cmdPrefix)
	if cmd.Flags().Changed(artifactFlagName) {
		// info: complex object artifact BaseArtifactVersion is retrieved outside this Changed() block
	}
	artifactFlagValue := m.Artifact
	if swag.IsZero(artifactFlagValue) {
		artifactFlagValue = &models.BaseArtifactVersion{}
	}

	err, artifactAdded := retrieveModelBaseArtifactVersionFlags(depth+1, artifactFlagValue, artifactFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactAdded
	if artifactAdded {
		m.Artifact = artifactFlagValue
	}

	return nil, retAdded
}

func retrieveTaskV21PropAutoUpgradeInfoFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpgradeInfoFlagName := fmt.Sprintf("%v.autoUpgradeInfo", cmdPrefix)
	if cmd.Flags().Changed(autoUpgradeInfoFlagName) {
		// info: complex object autoUpgradeInfo AutoUpgradeInfo is retrieved outside this Changed() block
	}
	autoUpgradeInfoFlagValue := m.AutoUpgradeInfo
	if swag.IsZero(autoUpgradeInfoFlagValue) {
		autoUpgradeInfoFlagValue = &models.AutoUpgradeInfo{}
	}

	err, autoUpgradeInfoAdded := retrieveModelAutoUpgradeInfoFlags(depth+1, autoUpgradeInfoFlagValue, autoUpgradeInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpgradeInfoAdded
	if autoUpgradeInfoAdded {
		m.AutoUpgradeInfo = autoUpgradeInfoFlagValue
	}

	return nil, retAdded
}

func retrieveTaskV21PropConnectionsFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionsFlagName := fmt.Sprintf("%v.connections", cmdPrefix)
	if cmd.Flags().Changed(connectionsFlagName) {
		// warning: connections map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21PropDescriptionFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskV21PropIDFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = &idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskV21PropNameFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskV21PropParametersFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21PropResourcesFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourcesFlagName := fmt.Sprintf("%v.resources", cmdPrefix)
	if cmd.Flags().Changed(resourcesFlagName) {
		// warning: resources map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21PropTagsFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21PropTaskPauseDetailsFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskPauseDetailsFlagName := fmt.Sprintf("%v.taskPauseDetails", cmdPrefix)
	if cmd.Flags().Changed(taskPauseDetailsFlagName) {
		// info: complex object taskPauseDetails TaskPauseDetails is retrieved outside this Changed() block
	}
	taskPauseDetailsFlagValue := m.TaskPauseDetails
	if swag.IsZero(taskPauseDetailsFlagValue) {
		taskPauseDetailsFlagValue = &models.TaskPauseDetails{}
	}

	err, taskPauseDetailsAdded := retrieveModelTaskPauseDetailsFlags(depth+1, taskPauseDetailsFlagValue, taskPauseDetailsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskPauseDetailsAdded
	if taskPauseDetailsAdded {
		m.TaskPauseDetails = taskPauseDetailsFlagValue
	}

	return nil, retAdded
}

func retrieveTaskV21PropVersionFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = &versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskV21PropWorkspaceFlags(depth int, m *models.TaskV21, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceFlagName := fmt.Sprintf("%v.workspace", cmdPrefix)
	if cmd.Flags().Changed(workspaceFlagName) {
		// info: complex object workspace WorkspaceInfo is retrieved outside this Changed() block
	}
	workspaceFlagValue := m.Workspace
	if swag.IsZero(workspaceFlagValue) {
		workspaceFlagValue = &models.WorkspaceInfo{}
	}

	err, workspaceAdded := retrieveModelWorkspaceInfoFlags(depth+1, workspaceFlagValue, workspaceFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceAdded
	if workspaceAdded {
		m.Workspace = workspaceFlagValue
	}

	return nil, retAdded
}
