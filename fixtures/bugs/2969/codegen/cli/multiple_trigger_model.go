// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for MultipleTrigger

// register flags to command
func registerModelMultipleTriggerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMultipleTriggerPropAtDays(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropAtTimes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropCronExpression(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropStartDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropTimeZone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMultipleTriggerPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMultipleTriggerPropAtDays(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var atDaysFlagName string
	if cmdPrefix == "" {
		atDaysFlagName = "atDays"
	} else {
		atDaysFlagName = fmt.Sprintf("%v.atDays", cmdPrefix)
	}

	if err := registerModelDayScheduleFlags(depth+1, atDaysFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMultipleTriggerPropAtTimes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var atTimesFlagName string
	if cmdPrefix == "" {
		atTimesFlagName = "atTimes"
	} else {
		atTimesFlagName = fmt.Sprintf("%v.atTimes", cmdPrefix)
	}

	if err := registerModelTimeScheduleFlags(depth+1, atTimesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerMultipleTriggerPropCronExpression(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cronExpressionDescription := `cron expression - available from v2.6`

	var cronExpressionFlagName string
	if cmdPrefix == "" {
		cronExpressionFlagName = "cronExpression"
	} else {
		cronExpressionFlagName = fmt.Sprintf("%v.cronExpression", cmdPrefix)
	}

	var cronExpressionFlagDefault string

	_ = cmd.PersistentFlags().String(cronExpressionFlagName, cronExpressionFlagDefault, cronExpressionDescription)

	return nil
}

func registerMultipleTriggerPropInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	intervalDescription := `Interval between task/plan running in days/weeks/months, required only if type of schedule is not equal to 'ONCE')`

	var intervalFlagName string
	if cmdPrefix == "" {
		intervalFlagName = "interval"
	} else {
		intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
	}

	var intervalFlagDefault int32

	_ = cmd.PersistentFlags().Int32(intervalFlagName, intervalFlagDefault, intervalDescription)

	return nil
}

func registerMultipleTriggerPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name of the trigger`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerMultipleTriggerPropStartDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startDateDescription := `Required. Date when the task should start to run/when the cron trigger is enabled`

	var startDateFlagName string
	if cmdPrefix == "" {
		startDateFlagName = "startDate"
	} else {
		startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
	}

	var startDateFlagDefault string

	_ = cmd.PersistentFlags().String(startDateFlagName, startDateFlagDefault, startDateDescription)

	return nil
}

func registerMultipleTriggerPropTimeZone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeZoneDescription := `Required. Time zone for task schedule`

	var timeZoneFlagName string
	if cmdPrefix == "" {
		timeZoneFlagName = "timeZone"
	} else {
		timeZoneFlagName = fmt.Sprintf("%v.timeZone", cmdPrefix)
	}

	var timeZoneFlagDefault string

	_ = cmd.PersistentFlags().String(timeZoneFlagName, timeZoneFlagDefault, timeZoneDescription)

	return nil
}

func registerMultipleTriggerPropTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	timeoutDescription := `Execution timeout in minutes (only for tasks)`

	var timeoutFlagName string
	if cmdPrefix == "" {
		timeoutFlagName = "timeout"
	} else {
		timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
	}

	var timeoutFlagDefault int32

	_ = cmd.PersistentFlags().Int32(timeoutFlagName, timeoutFlagDefault, timeoutDescription)

	return nil
}

func registerMultipleTriggerPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["ONCE","DAILY","WEEKLY","MONTHLY","CRON"]. Required. Type of schedule`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ONCE","DAILY","WEEKLY","MONTHLY","CRON"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMultipleTriggerFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, atDaysAdded := retrieveMultipleTriggerPropAtDaysFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || atDaysAdded

	err, atTimesAdded := retrieveMultipleTriggerPropAtTimesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || atTimesAdded

	err, cronExpressionAdded := retrieveMultipleTriggerPropCronExpressionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cronExpressionAdded

	err, intervalAdded := retrieveMultipleTriggerPropIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || intervalAdded

	err, nameAdded := retrieveMultipleTriggerPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, startDateAdded := retrieveMultipleTriggerPropStartDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startDateAdded

	err, timeZoneAdded := retrieveMultipleTriggerPropTimeZoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeZoneAdded

	err, timeoutAdded := retrieveMultipleTriggerPropTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || timeoutAdded

	err, typeAdded := retrieveMultipleTriggerPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveMultipleTriggerPropAtDaysFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	atDaysFlagName := fmt.Sprintf("%v.atDays", cmdPrefix)
	if cmd.Flags().Changed(atDaysFlagName) {
		// info: complex object atDays DaySchedule is retrieved outside this Changed() block
	}
	atDaysFlagValue := m.AtDays
	if swag.IsZero(atDaysFlagValue) {
		atDaysFlagValue = &models.DaySchedule{}
	}

	err, atDaysAdded := retrieveModelDayScheduleFlags(depth+1, atDaysFlagValue, atDaysFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || atDaysAdded
	if atDaysAdded {
		m.AtDays = atDaysFlagValue
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropAtTimesFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	atTimesFlagName := fmt.Sprintf("%v.atTimes", cmdPrefix)
	if cmd.Flags().Changed(atTimesFlagName) {
		// info: complex object atTimes TimeSchedule is retrieved outside this Changed() block
	}
	atTimesFlagValue := m.AtTimes
	if swag.IsZero(atTimesFlagValue) {
		atTimesFlagValue = &models.TimeSchedule{}
	}

	err, atTimesAdded := retrieveModelTimeScheduleFlags(depth+1, atTimesFlagValue, atTimesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || atTimesAdded
	if atTimesAdded {
		m.AtTimes = atTimesFlagValue
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropCronExpressionFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cronExpressionFlagName := fmt.Sprintf("%v.cronExpression", cmdPrefix)
	if cmd.Flags().Changed(cronExpressionFlagName) {

		var cronExpressionFlagName string
		if cmdPrefix == "" {
			cronExpressionFlagName = "cronExpression"
		} else {
			cronExpressionFlagName = fmt.Sprintf("%v.cronExpression", cmdPrefix)
		}

		cronExpressionFlagValue, err := cmd.Flags().GetString(cronExpressionFlagName)
		if err != nil {
			return err, false
		}
		m.CronExpression = cronExpressionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropIntervalFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	intervalFlagName := fmt.Sprintf("%v.interval", cmdPrefix)
	if cmd.Flags().Changed(intervalFlagName) {

		var intervalFlagName string
		if cmdPrefix == "" {
			intervalFlagName = "interval"
		} else {
			intervalFlagName = fmt.Sprintf("%v.interval", cmdPrefix)
		}

		intervalFlagValue, err := cmd.Flags().GetInt32(intervalFlagName)
		if err != nil {
			return err, false
		}
		m.Interval = intervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropNameFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropStartDateFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startDateFlagName := fmt.Sprintf("%v.startDate", cmdPrefix)
	if cmd.Flags().Changed(startDateFlagName) {

		var startDateFlagName string
		if cmdPrefix == "" {
			startDateFlagName = "startDate"
		} else {
			startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
		}

		startDateFlagValue, err := cmd.Flags().GetString(startDateFlagName)
		if err != nil {
			return err, false
		}
		m.StartDate = &startDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropTimeZoneFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeZoneFlagName := fmt.Sprintf("%v.timeZone", cmdPrefix)
	if cmd.Flags().Changed(timeZoneFlagName) {

		var timeZoneFlagName string
		if cmdPrefix == "" {
			timeZoneFlagName = "timeZone"
		} else {
			timeZoneFlagName = fmt.Sprintf("%v.timeZone", cmdPrefix)
		}

		timeZoneFlagValue, err := cmd.Flags().GetString(timeZoneFlagName)
		if err != nil {
			return err, false
		}
		m.TimeZone = &timeZoneFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropTimeoutFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	timeoutFlagName := fmt.Sprintf("%v.timeout", cmdPrefix)
	if cmd.Flags().Changed(timeoutFlagName) {

		var timeoutFlagName string
		if cmdPrefix == "" {
			timeoutFlagName = "timeout"
		} else {
			timeoutFlagName = fmt.Sprintf("%v.timeout", cmdPrefix)
		}

		timeoutFlagValue, err := cmd.Flags().GetInt32(timeoutFlagName)
		if err != nil {
			return err, false
		}
		m.Timeout = timeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMultipleTriggerPropTypeFlags(depth int, m *models.MultipleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
