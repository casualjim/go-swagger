// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for YarnStrategy

// register flags to command
func registerModelYarnStrategyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerYarnStrategyPropCoresPerExecutor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerYarnStrategyPropExecutorMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerYarnStrategyPropExecutorsNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerYarnStrategyPropInitialExecutors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerYarnStrategyPropMaxExecutors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerYarnStrategyPropMinExecutors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerYarnStrategyPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerYarnStrategyPropCoresPerExecutor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	coresPerExecutorDescription := `Cores per executor`

	var coresPerExecutorFlagName string
	if cmdPrefix == "" {
		coresPerExecutorFlagName = "coresPerExecutor"
	} else {
		coresPerExecutorFlagName = fmt.Sprintf("%v.coresPerExecutor", cmdPrefix)
	}

	var coresPerExecutorFlagDefault int32

	_ = cmd.PersistentFlags().Int32(coresPerExecutorFlagName, coresPerExecutorFlagDefault, coresPerExecutorDescription)

	return nil
}

func registerYarnStrategyPropExecutorMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executorMemoryDescription := `Executor memory (in MB)`

	var executorMemoryFlagName string
	if cmdPrefix == "" {
		executorMemoryFlagName = "executorMemory"
	} else {
		executorMemoryFlagName = fmt.Sprintf("%v.executorMemory", cmdPrefix)
	}

	var executorMemoryFlagDefault int32

	_ = cmd.PersistentFlags().Int32(executorMemoryFlagName, executorMemoryFlagDefault, executorMemoryDescription)

	return nil
}

func registerYarnStrategyPropExecutorsNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executorsNumberDescription := `Number of executors (for Fixed strategy)`

	var executorsNumberFlagName string
	if cmdPrefix == "" {
		executorsNumberFlagName = "executorsNumber"
	} else {
		executorsNumberFlagName = fmt.Sprintf("%v.executorsNumber", cmdPrefix)
	}

	var executorsNumberFlagDefault int32

	_ = cmd.PersistentFlags().Int32(executorsNumberFlagName, executorsNumberFlagDefault, executorsNumberDescription)

	return nil
}

func registerYarnStrategyPropInitialExecutors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	initialExecutorsDescription := `Initial number of executors (for Dynamic strategy)`

	var initialExecutorsFlagName string
	if cmdPrefix == "" {
		initialExecutorsFlagName = "initialExecutors"
	} else {
		initialExecutorsFlagName = fmt.Sprintf("%v.initialExecutors", cmdPrefix)
	}

	var initialExecutorsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(initialExecutorsFlagName, initialExecutorsFlagDefault, initialExecutorsDescription)

	return nil
}

func registerYarnStrategyPropMaxExecutors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maxExecutorsDescription := `Max. number of executors (for Dynamic strategy)`

	var maxExecutorsFlagName string
	if cmdPrefix == "" {
		maxExecutorsFlagName = "maxExecutors"
	} else {
		maxExecutorsFlagName = fmt.Sprintf("%v.maxExecutors", cmdPrefix)
	}

	var maxExecutorsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(maxExecutorsFlagName, maxExecutorsFlagDefault, maxExecutorsDescription)

	return nil
}

func registerYarnStrategyPropMinExecutors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	minExecutorsDescription := `Min. number of executors (for Dynamic strategy)`

	var minExecutorsFlagName string
	if cmdPrefix == "" {
		minExecutorsFlagName = "minExecutors"
	} else {
		minExecutorsFlagName = fmt.Sprintf("%v.minExecutors", cmdPrefix)
	}

	var minExecutorsFlagDefault int32

	_ = cmd.PersistentFlags().Int32(minExecutorsFlagName, minExecutorsFlagDefault, minExecutorsDescription)

	return nil
}

func registerYarnStrategyPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["Fixed","Dynamic"]. Required. Yarn strategy type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Fixed","Dynamic"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelYarnStrategyFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, coresPerExecutorAdded := retrieveYarnStrategyPropCoresPerExecutorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || coresPerExecutorAdded

	err, executorMemoryAdded := retrieveYarnStrategyPropExecutorMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executorMemoryAdded

	err, executorsNumberAdded := retrieveYarnStrategyPropExecutorsNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executorsNumberAdded

	err, initialExecutorsAdded := retrieveYarnStrategyPropInitialExecutorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || initialExecutorsAdded

	err, maxExecutorsAdded := retrieveYarnStrategyPropMaxExecutorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maxExecutorsAdded

	err, minExecutorsAdded := retrieveYarnStrategyPropMinExecutorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || minExecutorsAdded

	err, typeAdded := retrieveYarnStrategyPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveYarnStrategyPropCoresPerExecutorFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	coresPerExecutorFlagName := fmt.Sprintf("%v.coresPerExecutor", cmdPrefix)
	if cmd.Flags().Changed(coresPerExecutorFlagName) {

		var coresPerExecutorFlagName string
		if cmdPrefix == "" {
			coresPerExecutorFlagName = "coresPerExecutor"
		} else {
			coresPerExecutorFlagName = fmt.Sprintf("%v.coresPerExecutor", cmdPrefix)
		}

		coresPerExecutorFlagValue, err := cmd.Flags().GetInt32(coresPerExecutorFlagName)
		if err != nil {
			return err, false
		}
		m.CoresPerExecutor = coresPerExecutorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveYarnStrategyPropExecutorMemoryFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executorMemoryFlagName := fmt.Sprintf("%v.executorMemory", cmdPrefix)
	if cmd.Flags().Changed(executorMemoryFlagName) {

		var executorMemoryFlagName string
		if cmdPrefix == "" {
			executorMemoryFlagName = "executorMemory"
		} else {
			executorMemoryFlagName = fmt.Sprintf("%v.executorMemory", cmdPrefix)
		}

		executorMemoryFlagValue, err := cmd.Flags().GetInt32(executorMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutorMemory = executorMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveYarnStrategyPropExecutorsNumberFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executorsNumberFlagName := fmt.Sprintf("%v.executorsNumber", cmdPrefix)
	if cmd.Flags().Changed(executorsNumberFlagName) {

		var executorsNumberFlagName string
		if cmdPrefix == "" {
			executorsNumberFlagName = "executorsNumber"
		} else {
			executorsNumberFlagName = fmt.Sprintf("%v.executorsNumber", cmdPrefix)
		}

		executorsNumberFlagValue, err := cmd.Flags().GetInt32(executorsNumberFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutorsNumber = executorsNumberFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveYarnStrategyPropInitialExecutorsFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	initialExecutorsFlagName := fmt.Sprintf("%v.initialExecutors", cmdPrefix)
	if cmd.Flags().Changed(initialExecutorsFlagName) {

		var initialExecutorsFlagName string
		if cmdPrefix == "" {
			initialExecutorsFlagName = "initialExecutors"
		} else {
			initialExecutorsFlagName = fmt.Sprintf("%v.initialExecutors", cmdPrefix)
		}

		initialExecutorsFlagValue, err := cmd.Flags().GetInt32(initialExecutorsFlagName)
		if err != nil {
			return err, false
		}
		m.InitialExecutors = initialExecutorsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveYarnStrategyPropMaxExecutorsFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maxExecutorsFlagName := fmt.Sprintf("%v.maxExecutors", cmdPrefix)
	if cmd.Flags().Changed(maxExecutorsFlagName) {

		var maxExecutorsFlagName string
		if cmdPrefix == "" {
			maxExecutorsFlagName = "maxExecutors"
		} else {
			maxExecutorsFlagName = fmt.Sprintf("%v.maxExecutors", cmdPrefix)
		}

		maxExecutorsFlagValue, err := cmd.Flags().GetInt32(maxExecutorsFlagName)
		if err != nil {
			return err, false
		}
		m.MaxExecutors = maxExecutorsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveYarnStrategyPropMinExecutorsFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	minExecutorsFlagName := fmt.Sprintf("%v.minExecutors", cmdPrefix)
	if cmd.Flags().Changed(minExecutorsFlagName) {

		var minExecutorsFlagName string
		if cmdPrefix == "" {
			minExecutorsFlagName = "minExecutors"
		} else {
			minExecutorsFlagName = fmt.Sprintf("%v.minExecutors", cmdPrefix)
		}

		minExecutorsFlagValue, err := cmd.Flags().GetInt32(minExecutorsFlagName)
		if err != nil {
			return err, false
		}
		m.MinExecutors = minExecutorsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveYarnStrategyPropTypeFlags(depth int, m *models.YarnStrategy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = &typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
