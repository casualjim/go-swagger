// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Response

// register flags to command
func registerModelResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerResponsePropEntity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResponsePropMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerResponsePropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerResponsePropEntity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: entity interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerResponsePropMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metadata map[string][]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerResponsePropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault int32

	_ = cmd.PersistentFlags().Int32(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelResponseFlags(depth int, m *models.Response, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, entityAdded := retrieveResponsePropEntityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entityAdded

	err, metadataAdded := retrieveResponsePropMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, statusAdded := retrieveResponsePropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveResponsePropEntityFlags(depth int, m *models.Response, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entityFlagName := fmt.Sprintf("%v.entity", cmdPrefix)
	if cmd.Flags().Changed(entityFlagName) {
		// warning: entity map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResponsePropMetadataFlags(depth int, m *models.Response, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// warning: metadata map type map[string][]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveResponsePropStatusFlags(depth int, m *models.Response, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt32(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
