// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for ExecutionStep

// register flags to command
func registerModelExecutionStepFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExecutionStepPropAbstractStepID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionStepPropFlows(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionStepPropNextStep(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionStepPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionStepPropStepID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionStepPropStepName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionStepPropStepNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExecutionStepPropStepOnException(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExecutionStepPropAbstractStepID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	abstractStepIdDescription := ``

	var abstractStepIdFlagName string
	if cmdPrefix == "" {
		abstractStepIdFlagName = "abstractStepId"
	} else {
		abstractStepIdFlagName = fmt.Sprintf("%v.abstractStepId", cmdPrefix)
	}

	var abstractStepIdFlagDefault string

	_ = cmd.PersistentFlags().String(abstractStepIdFlagName, abstractStepIdFlagDefault, abstractStepIdDescription)

	return nil
}

func registerExecutionStepPropFlows(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: flows []*ExecutionFlow array type is not supported by go-swagger cli yet

	return nil
}

func registerExecutionStepPropNextStep(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var nextStepFlagName string
	if cmdPrefix == "" {
		nextStepFlagName = "nextStep"
	} else {
		nextStepFlagName = fmt.Sprintf("%v.nextStep", cmdPrefix)
	}

	if err := registerModelExecutionStepFlags(depth+1, nextStepFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerExecutionStepPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Enum: ["SUCCESS","PARTIAL_SUCCESS","FAIL"]. `

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	if err := cmd.RegisterFlagCompletionFunc(statusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["SUCCESS","PARTIAL_SUCCESS","FAIL"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerExecutionStepPropStepID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stepIdDescription := ``

	var stepIdFlagName string
	if cmdPrefix == "" {
		stepIdFlagName = "stepId"
	} else {
		stepIdFlagName = fmt.Sprintf("%v.stepId", cmdPrefix)
	}

	var stepIdFlagDefault string

	_ = cmd.PersistentFlags().String(stepIdFlagName, stepIdFlagDefault, stepIdDescription)

	return nil
}

func registerExecutionStepPropStepName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stepNameDescription := ``

	var stepNameFlagName string
	if cmdPrefix == "" {
		stepNameFlagName = "stepName"
	} else {
		stepNameFlagName = fmt.Sprintf("%v.stepName", cmdPrefix)
	}

	var stepNameFlagDefault string

	_ = cmd.PersistentFlags().String(stepNameFlagName, stepNameFlagDefault, stepNameDescription)

	return nil
}

func registerExecutionStepPropStepNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stepNoteDescription := ``

	var stepNoteFlagName string
	if cmdPrefix == "" {
		stepNoteFlagName = "stepNote"
	} else {
		stepNoteFlagName = fmt.Sprintf("%v.stepNote", cmdPrefix)
	}

	var stepNoteFlagDefault string

	_ = cmd.PersistentFlags().String(stepNoteFlagName, stepNoteFlagDefault, stepNoteDescription)

	return nil
}

func registerExecutionStepPropStepOnException(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var stepOnExceptionFlagName string
	if cmdPrefix == "" {
		stepOnExceptionFlagName = "stepOnException"
	} else {
		stepOnExceptionFlagName = fmt.Sprintf("%v.stepOnException", cmdPrefix)
	}

	if err := registerModelExecutionStepFlags(depth+1, stepOnExceptionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExecutionStepFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, abstractStepIdAdded := retrieveExecutionStepPropAbstractStepIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || abstractStepIdAdded

	err, flowsAdded := retrieveExecutionStepPropFlowsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || flowsAdded

	err, nextStepAdded := retrieveExecutionStepPropNextStepFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nextStepAdded

	err, statusAdded := retrieveExecutionStepPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, stepIdAdded := retrieveExecutionStepPropStepIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stepIdAdded

	err, stepNameAdded := retrieveExecutionStepPropStepNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stepNameAdded

	err, stepNoteAdded := retrieveExecutionStepPropStepNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stepNoteAdded

	err, stepOnExceptionAdded := retrieveExecutionStepPropStepOnExceptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stepOnExceptionAdded

	return nil, retAdded
}

func retrieveExecutionStepPropAbstractStepIDFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	abstractStepIdFlagName := fmt.Sprintf("%v.abstractStepId", cmdPrefix)
	if cmd.Flags().Changed(abstractStepIdFlagName) {

		var abstractStepIdFlagName string
		if cmdPrefix == "" {
			abstractStepIdFlagName = "abstractStepId"
		} else {
			abstractStepIdFlagName = fmt.Sprintf("%v.abstractStepId", cmdPrefix)
		}

		abstractStepIdFlagValue, err := cmd.Flags().GetString(abstractStepIdFlagName)
		if err != nil {
			return err, false
		}
		m.AbstractStepID = abstractStepIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionStepPropFlowsFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flowsFlagName := fmt.Sprintf("%v.flows", cmdPrefix)
	if cmd.Flags().Changed(flowsFlagName) {
		// warning: flows array type []*ExecutionFlow is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveExecutionStepPropNextStepFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nextStepFlagName := fmt.Sprintf("%v.nextStep", cmdPrefix)
	if cmd.Flags().Changed(nextStepFlagName) {
		// info: complex object nextStep ExecutionStep is retrieved outside this Changed() block
	}
	nextStepFlagValue := m.NextStep
	if swag.IsZero(nextStepFlagValue) {
		nextStepFlagValue = &models.ExecutionStep{}
	}

	err, nextStepAdded := retrieveModelExecutionStepFlags(depth+1, nextStepFlagValue, nextStepFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nextStepAdded
	if nextStepAdded {
		m.NextStep = nextStepFlagValue
	}

	return nil, retAdded
}

func retrieveExecutionStepPropStatusFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionStepPropStepIDFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stepIdFlagName := fmt.Sprintf("%v.stepId", cmdPrefix)
	if cmd.Flags().Changed(stepIdFlagName) {

		var stepIdFlagName string
		if cmdPrefix == "" {
			stepIdFlagName = "stepId"
		} else {
			stepIdFlagName = fmt.Sprintf("%v.stepId", cmdPrefix)
		}

		stepIdFlagValue, err := cmd.Flags().GetString(stepIdFlagName)
		if err != nil {
			return err, false
		}
		m.StepID = stepIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionStepPropStepNameFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stepNameFlagName := fmt.Sprintf("%v.stepName", cmdPrefix)
	if cmd.Flags().Changed(stepNameFlagName) {

		var stepNameFlagName string
		if cmdPrefix == "" {
			stepNameFlagName = "stepName"
		} else {
			stepNameFlagName = fmt.Sprintf("%v.stepName", cmdPrefix)
		}

		stepNameFlagValue, err := cmd.Flags().GetString(stepNameFlagName)
		if err != nil {
			return err, false
		}
		m.StepName = stepNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionStepPropStepNoteFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stepNoteFlagName := fmt.Sprintf("%v.stepNote", cmdPrefix)
	if cmd.Flags().Changed(stepNoteFlagName) {

		var stepNoteFlagName string
		if cmdPrefix == "" {
			stepNoteFlagName = "stepNote"
		} else {
			stepNoteFlagName = fmt.Sprintf("%v.stepNote", cmdPrefix)
		}

		stepNoteFlagValue, err := cmd.Flags().GetString(stepNoteFlagName)
		if err != nil {
			return err, false
		}
		m.StepNote = stepNoteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExecutionStepPropStepOnExceptionFlags(depth int, m *models.ExecutionStep, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stepOnExceptionFlagName := fmt.Sprintf("%v.stepOnException", cmdPrefix)
	if cmd.Flags().Changed(stepOnExceptionFlagName) {
		// info: complex object stepOnException ExecutionStep is retrieved outside this Changed() block
	}
	stepOnExceptionFlagValue := m.StepOnException
	if swag.IsZero(stepOnExceptionFlagValue) {
		stepOnExceptionFlagValue = &models.ExecutionStep{}
	}

	err, stepOnExceptionAdded := retrieveModelExecutionStepFlags(depth+1, stepOnExceptionFlagValue, stepOnExceptionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stepOnExceptionAdded
	if stepOnExceptionAdded {
		m.StepOnException = stepOnExceptionFlagValue
	}

	return nil, retAdded
}
