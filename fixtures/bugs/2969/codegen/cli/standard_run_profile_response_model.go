// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for StandardRunProfileResponse

// register flags to command
func registerModelStandardRunProfileResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStandardRunProfileResponsePropConfiguration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropCreateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropEngineID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropExecutionFramework(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropPushdownPreferenceEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropUpdateDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStandardRunProfileResponsePropWarehouseName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStandardRunProfileResponsePropConfiguration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var configurationFlagName string
	if cmdPrefix == "" {
		configurationFlagName = "configuration"
	} else {
		configurationFlagName = fmt.Sprintf("%v.configuration", cmdPrefix)
	}

	if err := registerModelConfigurationFlags(depth+1, configurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStandardRunProfileResponsePropCreateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createDateDescription := `Created on`

	var createDateFlagName string
	if cmdPrefix == "" {
		createDateFlagName = "createDate"
	} else {
		createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(createDateFlagName, "", createDateDescription)

	return nil
}

func registerStandardRunProfileResponsePropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerStandardRunProfileResponsePropEngineID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	engineIdDescription := `Pipeline engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerStandardRunProfileResponsePropExecutionFramework(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionFrameworkDescription := `Required. Execution framework`

	var executionFrameworkFlagName string
	if cmdPrefix == "" {
		executionFrameworkFlagName = "executionFramework"
	} else {
		executionFrameworkFlagName = fmt.Sprintf("%v.executionFramework", cmdPrefix)
	}

	var executionFrameworkFlagDefault string

	_ = cmd.PersistentFlags().String(executionFrameworkFlagName, executionFrameworkFlagDefault, executionFrameworkDescription)

	return nil
}

func registerStandardRunProfileResponsePropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Run profile id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerStandardRunProfileResponsePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerStandardRunProfileResponsePropPushdownPreferenceEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pushdownPreferenceEnabledDescription := `Pushdown enable`

	var pushdownPreferenceEnabledFlagName string
	if cmdPrefix == "" {
		pushdownPreferenceEnabledFlagName = "pushdownPreferenceEnabled"
	} else {
		pushdownPreferenceEnabledFlagName = fmt.Sprintf("%v.pushdownPreferenceEnabled", cmdPrefix)
	}

	var pushdownPreferenceEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pushdownPreferenceEnabledFlagName, pushdownPreferenceEnabledFlagDefault, pushdownPreferenceEnabledDescription)

	return nil
}

func registerStandardRunProfileResponsePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["standard","big-data","databricks","advanced"]. Type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["standard","big-data","databricks","advanced"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerStandardRunProfileResponsePropUpdateDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateDateDescription := `Updated on`

	var updateDateFlagName string
	if cmdPrefix == "" {
		updateDateFlagName = "updateDate"
	} else {
		updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateDateFlagName, "", updateDateDescription)

	return nil
}

func registerStandardRunProfileResponsePropWarehouseName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	warehouseNameDescription := `Data warehouse name`

	var warehouseNameFlagName string
	if cmdPrefix == "" {
		warehouseNameFlagName = "warehouseName"
	} else {
		warehouseNameFlagName = fmt.Sprintf("%v.warehouseName", cmdPrefix)
	}

	var warehouseNameFlagDefault string

	_ = cmd.PersistentFlags().String(warehouseNameFlagName, warehouseNameFlagDefault, warehouseNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStandardRunProfileResponseFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, configurationAdded := retrieveStandardRunProfileResponsePropConfigurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configurationAdded

	err, createDateAdded := retrieveStandardRunProfileResponsePropCreateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createDateAdded

	err, descriptionAdded := retrieveStandardRunProfileResponsePropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, engineIdAdded := retrieveStandardRunProfileResponsePropEngineIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineIdAdded

	err, executionFrameworkAdded := retrieveStandardRunProfileResponsePropExecutionFrameworkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionFrameworkAdded

	err, idAdded := retrieveStandardRunProfileResponsePropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveStandardRunProfileResponsePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pushdownPreferenceEnabledAdded := retrieveStandardRunProfileResponsePropPushdownPreferenceEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pushdownPreferenceEnabledAdded

	err, typeAdded := retrieveStandardRunProfileResponsePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, updateDateAdded := retrieveStandardRunProfileResponsePropUpdateDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateDateAdded

	err, warehouseNameAdded := retrieveStandardRunProfileResponsePropWarehouseNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || warehouseNameAdded

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropConfigurationFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	configurationFlagName := fmt.Sprintf("%v.configuration", cmdPrefix)
	if cmd.Flags().Changed(configurationFlagName) {
		// info: complex object configuration Configuration is retrieved outside this Changed() block
	}
	configurationFlagValue := m.Configuration
	if swag.IsZero(configurationFlagValue) {
		configurationFlagValue = &models.Configuration{}
	}

	err, configurationAdded := retrieveModelConfigurationFlags(depth+1, configurationFlagValue, configurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || configurationAdded
	if configurationAdded {
		m.Configuration = configurationFlagValue
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropCreateDateFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createDateFlagName := fmt.Sprintf("%v.createDate", cmdPrefix)
	if cmd.Flags().Changed(createDateFlagName) {

		var createDateFlagName string
		if cmdPrefix == "" {
			createDateFlagName = "createDate"
		} else {
			createDateFlagName = fmt.Sprintf("%v.createDate", cmdPrefix)
		}

		createDateFlagValueStr, err := cmd.Flags().GetString(createDateFlagName)
		if err != nil {
			return err, false
		}
		var createDateFlagValue strfmt.DateTime
		if err := createDateFlagValue.UnmarshalText([]byte(createDateFlagValueStr)); err != nil {
			return err, false
		}
		m.CreateDate = createDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropDescriptionFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropEngineIDFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	engineIdFlagName := fmt.Sprintf("%v.engineId", cmdPrefix)
	if cmd.Flags().Changed(engineIdFlagName) {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropExecutionFrameworkFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionFrameworkFlagName := fmt.Sprintf("%v.executionFramework", cmdPrefix)
	if cmd.Flags().Changed(executionFrameworkFlagName) {

		var executionFrameworkFlagName string
		if cmdPrefix == "" {
			executionFrameworkFlagName = "executionFramework"
		} else {
			executionFrameworkFlagName = fmt.Sprintf("%v.executionFramework", cmdPrefix)
		}

		executionFrameworkFlagValue, err := cmd.Flags().GetString(executionFrameworkFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionFramework = &executionFrameworkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropIDFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropNameFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropPushdownPreferenceEnabledFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pushdownPreferenceEnabledFlagName := fmt.Sprintf("%v.pushdownPreferenceEnabled", cmdPrefix)
	if cmd.Flags().Changed(pushdownPreferenceEnabledFlagName) {

		var pushdownPreferenceEnabledFlagName string
		if cmdPrefix == "" {
			pushdownPreferenceEnabledFlagName = "pushdownPreferenceEnabled"
		} else {
			pushdownPreferenceEnabledFlagName = fmt.Sprintf("%v.pushdownPreferenceEnabled", cmdPrefix)
		}

		pushdownPreferenceEnabledFlagValue, err := cmd.Flags().GetBool(pushdownPreferenceEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.PushdownPreferenceEnabled = pushdownPreferenceEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropTypeFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropUpdateDateFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateDateFlagName := fmt.Sprintf("%v.updateDate", cmdPrefix)
	if cmd.Flags().Changed(updateDateFlagName) {

		var updateDateFlagName string
		if cmdPrefix == "" {
			updateDateFlagName = "updateDate"
		} else {
			updateDateFlagName = fmt.Sprintf("%v.updateDate", cmdPrefix)
		}

		updateDateFlagValueStr, err := cmd.Flags().GetString(updateDateFlagName)
		if err != nil {
			return err, false
		}
		var updateDateFlagValue strfmt.DateTime
		if err := updateDateFlagValue.UnmarshalText([]byte(updateDateFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateDate = updateDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStandardRunProfileResponsePropWarehouseNameFlags(depth int, m *models.StandardRunProfileResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	warehouseNameFlagName := fmt.Sprintf("%v.warehouseName", cmdPrefix)
	if cmd.Flags().Changed(warehouseNameFlagName) {

		var warehouseNameFlagName string
		if cmdPrefix == "" {
			warehouseNameFlagName = "warehouseName"
		} else {
			warehouseNameFlagName = fmt.Sprintf("%v.warehouseName", cmdPrefix)
		}

		warehouseNameFlagValue, err := cmd.Flags().GetString(warehouseNameFlagName)
		if err != nil {
			return err, false
		}
		m.WarehouseName = warehouseNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
