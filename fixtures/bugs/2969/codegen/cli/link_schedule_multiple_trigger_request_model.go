// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for LinkScheduleMultipleTriggerRequest

// register flags to command
func registerModelLinkScheduleMultipleTriggerRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLinkScheduleMultipleTriggerRequestPropScheduleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLinkScheduleMultipleTriggerRequestPropScheduleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scheduleIdDescription := `Required. Id of the schedule to associate with the task/plan`

	var scheduleIdFlagName string
	if cmdPrefix == "" {
		scheduleIdFlagName = "scheduleId"
	} else {
		scheduleIdFlagName = fmt.Sprintf("%v.scheduleId", cmdPrefix)
	}

	var scheduleIdFlagDefault string

	_ = cmd.PersistentFlags().String(scheduleIdFlagName, scheduleIdFlagDefault, scheduleIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLinkScheduleMultipleTriggerRequestFlags(depth int, m *models.LinkScheduleMultipleTriggerRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, scheduleIdAdded := retrieveLinkScheduleMultipleTriggerRequestPropScheduleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scheduleIdAdded

	return nil, retAdded
}

func retrieveLinkScheduleMultipleTriggerRequestPropScheduleIDFlags(depth int, m *models.LinkScheduleMultipleTriggerRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scheduleIdFlagName := fmt.Sprintf("%v.scheduleId", cmdPrefix)
	if cmd.Flags().Changed(scheduleIdFlagName) {

		var scheduleIdFlagName string
		if cmdPrefix == "" {
			scheduleIdFlagName = "scheduleId"
		} else {
			scheduleIdFlagName = fmt.Sprintf("%v.scheduleId", cmdPrefix)
		}

		scheduleIdFlagValue, err := cmd.Flags().GetString(scheduleIdFlagName)
		if err != nil {
			return err, false
		}
		m.ScheduleID = &scheduleIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
