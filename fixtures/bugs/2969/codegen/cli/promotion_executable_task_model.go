// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PromotionExecutableTask

// register flags to command
func registerModelPromotionExecutableTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPromotionExecutableTaskPropAdvanced(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableTaskPropContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableTaskPropExecutable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableTaskPropKeepTargetResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPromotionExecutableTaskPropKeepTargetRunProfiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutableTaskPropAdvanced(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var advancedFlagName string
	if cmdPrefix == "" {
		advancedFlagName = "advanced"
	} else {
		advancedFlagName = fmt.Sprintf("%v.advanced", cmdPrefix)
	}

	if err := registerModelAdvancedPromotionSpecFlags(depth+1, advancedFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPromotionExecutableTaskPropContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	contextDescription := `Execution context message`

	var contextFlagName string
	if cmdPrefix == "" {
		contextFlagName = "context"
	} else {
		contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
	}

	var contextFlagDefault string

	_ = cmd.PersistentFlags().String(contextFlagName, contextFlagDefault, contextDescription)

	return nil
}

func registerPromotionExecutableTaskPropExecutable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executableDescription := `Required. Executable identifier`

	var executableFlagName string
	if cmdPrefix == "" {
		executableFlagName = "executable"
	} else {
		executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
	}

	var executableFlagDefault string

	_ = cmd.PersistentFlags().String(executableFlagName, executableFlagDefault, executableDescription)

	return nil
}

func registerPromotionExecutableTaskPropKeepTargetResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepTargetResourcesDescription := `Keep Target Resources flag`

	var keepTargetResourcesFlagName string
	if cmdPrefix == "" {
		keepTargetResourcesFlagName = "keepTargetResources"
	} else {
		keepTargetResourcesFlagName = fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
	}

	var keepTargetResourcesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepTargetResourcesFlagName, keepTargetResourcesFlagDefault, keepTargetResourcesDescription)

	return nil
}

func registerPromotionExecutableTaskPropKeepTargetRunProfiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	keepTargetRunProfilesDescription := `Keep Target Run Profiles flag (works starting from V2.2)`

	var keepTargetRunProfilesFlagName string
	if cmdPrefix == "" {
		keepTargetRunProfilesFlagName = "keepTargetRunProfiles"
	} else {
		keepTargetRunProfilesFlagName = fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
	}

	var keepTargetRunProfilesFlagDefault bool

	_ = cmd.PersistentFlags().Bool(keepTargetRunProfilesFlagName, keepTargetRunProfilesFlagDefault, keepTargetRunProfilesDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPromotionExecutableTaskFlags(depth int, m *models.PromotionExecutableTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, advancedAdded := retrievePromotionExecutableTaskPropAdvancedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || advancedAdded

	err, contextAdded := retrievePromotionExecutableTaskPropContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || contextAdded

	err, executableAdded := retrievePromotionExecutableTaskPropExecutableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executableAdded

	err, keepTargetResourcesAdded := retrievePromotionExecutableTaskPropKeepTargetResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepTargetResourcesAdded

	err, keepTargetRunProfilesAdded := retrievePromotionExecutableTaskPropKeepTargetRunProfilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || keepTargetRunProfilesAdded

	return nil, retAdded
}

func retrievePromotionExecutableTaskPropAdvancedFlags(depth int, m *models.PromotionExecutableTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	advancedFlagName := fmt.Sprintf("%v.advanced", cmdPrefix)
	if cmd.Flags().Changed(advancedFlagName) {
		// info: complex object advanced AdvancedPromotionSpec is retrieved outside this Changed() block
	}
	advancedFlagValue := m.Advanced
	if swag.IsZero(advancedFlagValue) {
		advancedFlagValue = &models.AdvancedPromotionSpec{}
	}

	err, advancedAdded := retrieveModelAdvancedPromotionSpecFlags(depth+1, advancedFlagValue, advancedFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || advancedAdded
	if advancedAdded {
		m.Advanced = advancedFlagValue
	}

	return nil, retAdded
}

func retrievePromotionExecutableTaskPropContextFlags(depth int, m *models.PromotionExecutableTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	contextFlagName := fmt.Sprintf("%v.context", cmdPrefix)
	if cmd.Flags().Changed(contextFlagName) {

		var contextFlagName string
		if cmdPrefix == "" {
			contextFlagName = "context"
		} else {
			contextFlagName = fmt.Sprintf("%v.context", cmdPrefix)
		}

		contextFlagValue, err := cmd.Flags().GetString(contextFlagName)
		if err != nil {
			return err, false
		}
		m.Context = contextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutableTaskPropExecutableFlags(depth int, m *models.PromotionExecutableTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executableFlagName := fmt.Sprintf("%v.executable", cmdPrefix)
	if cmd.Flags().Changed(executableFlagName) {

		var executableFlagName string
		if cmdPrefix == "" {
			executableFlagName = "executable"
		} else {
			executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
		}

		executableFlagValue, err := cmd.Flags().GetString(executableFlagName)
		if err != nil {
			return err, false
		}
		m.Executable = &executableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutableTaskPropKeepTargetResourcesFlags(depth int, m *models.PromotionExecutableTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepTargetResourcesFlagName := fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
	if cmd.Flags().Changed(keepTargetResourcesFlagName) {

		var keepTargetResourcesFlagName string
		if cmdPrefix == "" {
			keepTargetResourcesFlagName = "keepTargetResources"
		} else {
			keepTargetResourcesFlagName = fmt.Sprintf("%v.keepTargetResources", cmdPrefix)
		}

		keepTargetResourcesFlagValue, err := cmd.Flags().GetBool(keepTargetResourcesFlagName)
		if err != nil {
			return err, false
		}
		m.KeepTargetResources = keepTargetResourcesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePromotionExecutableTaskPropKeepTargetRunProfilesFlags(depth int, m *models.PromotionExecutableTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	keepTargetRunProfilesFlagName := fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
	if cmd.Flags().Changed(keepTargetRunProfilesFlagName) {

		var keepTargetRunProfilesFlagName string
		if cmdPrefix == "" {
			keepTargetRunProfilesFlagName = "keepTargetRunProfiles"
		} else {
			keepTargetRunProfilesFlagName = fmt.Sprintf("%v.keepTargetRunProfiles", cmdPrefix)
		}

		keepTargetRunProfilesFlagValue, err := cmd.Flags().GetBool(keepTargetRunProfilesFlagName)
		if err != nil {
			return err, false
		}
		m.KeepTargetRunProfiles = keepTargetRunProfilesFlagValue

		retAdded = true
	}

	return nil, retAdded
}
