// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/tasks"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationTasksGetTaskScheduledEventsCmd returns a command to handle operation getTaskScheduledEvents
func makeOperationTasksGetTaskScheduledEventsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTaskScheduledEvents",
		Short: `Get task triggers`,
		RunE:  runOperationTasksGetTaskScheduledEvents,
	}

	if err := registerOperationTasksGetTaskScheduledEventsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationTasksGetTaskScheduledEvents uses cmd flags to call endpoint api
func runOperationTasksGetTaskScheduledEvents(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := tasks.NewGetTaskScheduledEventsParams()
	if err, _ = retrieveOperationTasksGetTaskScheduledEventsFromFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksGetTaskScheduledEventsLimitFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksGetTaskScheduledEventsOffsetFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksGetTaskScheduledEventsTaskIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationTasksGetTaskScheduledEventsToFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationTasksGetTaskScheduledEventsResult(appCli.Tasks.GetTaskScheduledEvents(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationTasksGetTaskScheduledEventsParamFlags registers all flags needed to fill params
func registerOperationTasksGetTaskScheduledEventsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationTasksGetTaskScheduledEventsFromParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksGetTaskScheduledEventsLimitParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksGetTaskScheduledEventsOffsetParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksGetTaskScheduledEventsTaskIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationTasksGetTaskScheduledEventsToParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationTasksGetTaskScheduledEventsFromParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	fromDescription := `from date time (milliseconds)`

	var fromFlagName string
	if cmdPrefix == "" {
		fromFlagName = "from"
	} else {
		fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
	}

	var fromFlagDefault int64

	_ = cmd.PersistentFlags().Int64(fromFlagName, fromFlagDefault, fromDescription)

	return nil
}

func registerOperationTasksGetTaskScheduledEventsLimitParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	limitDescription := `the number of items to return. Must be in range [1, 100]. Default value - 100`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}

func registerOperationTasksGetTaskScheduledEventsOffsetParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	offsetDescription := `the position of the first item. Must be greater than or equal to 0. Default value - 0`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}

func registerOperationTasksGetTaskScheduledEventsTaskIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	taskIdDescription := `Required. task id`

	var taskIdFlagName string
	if cmdPrefix == "" {
		taskIdFlagName = "taskId"
	} else {
		taskIdFlagName = fmt.Sprintf("%v.taskId", cmdPrefix)
	}

	var taskIdFlagDefault string

	_ = cmd.PersistentFlags().String(taskIdFlagName, taskIdFlagDefault, taskIdDescription)

	return nil
}

func registerOperationTasksGetTaskScheduledEventsToParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	toDescription := `Required. to date time (milliseconds)`

	var toFlagName string
	if cmdPrefix == "" {
		toFlagName = "to"
	} else {
		toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
	}

	var toFlagDefault int64

	_ = cmd.PersistentFlags().Int64(toFlagName, toFlagDefault, toDescription)

	return nil
}

func retrieveOperationTasksGetTaskScheduledEventsFromFlag(m *tasks.GetTaskScheduledEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("from") {

		var fromFlagName string
		if cmdPrefix == "" {
			fromFlagName = "from"
		} else {
			fromFlagName = fmt.Sprintf("%v.from", cmdPrefix)
		}

		fromFlagValue, err := cmd.Flags().GetInt64(fromFlagName)
		if err != nil {
			return err, false
		}
		m.From = &fromFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksGetTaskScheduledEventsLimitFlag(m *tasks.GetTaskScheduledEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("limit") {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt32(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = &limitFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksGetTaskScheduledEventsOffsetFlag(m *tasks.GetTaskScheduledEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("offset") {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = &offsetFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksGetTaskScheduledEventsTaskIDFlag(m *tasks.GetTaskScheduledEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("taskId") {

		var taskIdFlagName string
		if cmdPrefix == "" {
			taskIdFlagName = "taskId"
		} else {
			taskIdFlagName = fmt.Sprintf("%v.taskId", cmdPrefix)
		}

		taskIdFlagValue, err := cmd.Flags().GetString(taskIdFlagName)
		if err != nil {
			return err, false
		}
		m.TaskID = taskIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationTasksGetTaskScheduledEventsToFlag(m *tasks.GetTaskScheduledEventsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("to") {

		var toFlagName string
		if cmdPrefix == "" {
			toFlagName = "to"
		} else {
			toFlagName = fmt.Sprintf("%v.to", cmdPrefix)
		}

		toFlagValue, err := cmd.Flags().GetInt64(toFlagName)
		if err != nil {
			return err, false
		}
		m.To = toFlagValue

	}

	return nil, retAdded
}

// parseOperationTasksGetTaskScheduledEventsResult parses request result and return the string content
func parseOperationTasksGetTaskScheduledEventsResult(resp0 *tasks.GetTaskScheduledEventsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*tasks.GetTaskScheduledEventsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*tasks.GetTaskScheduledEventsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*tasks.GetTaskScheduledEventsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*tasks.GetTaskScheduledEventsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*tasks.GetTaskScheduledEventsNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*tasks.GetTaskScheduledEventsInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
