// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/runtime_engines_run_profiles"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileCmd returns a command to handle operation deleteEngineRunProfile
func makeOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteEngineRunProfile",
		Short: `Delete engine run profile`,
		RunE:  runOperationRuntimeEnginesRunProfilesDeleteEngineRunProfile,
	}

	if err := registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRuntimeEnginesRunProfilesDeleteEngineRunProfile uses cmd flags to call endpoint api
func runOperationRuntimeEnginesRunProfilesDeleteEngineRunProfile(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := runtime_engines_run_profiles.NewDeleteEngineRunProfileParams()
	if err, _ = retrieveOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileEngineIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileNewRunProfileIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileRunProfileIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileResult(appCli.RuntimeEnginesRunProfiles.DeleteEngineRunProfile(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileParamFlags registers all flags needed to fill params
func registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileEngineIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileNewRunProfileIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileRunProfileIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileEngineIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	engineIdDescription := `Required. remote engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileNewRunProfileIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	newRunProfileIdDescription := `new run profile id`

	var newRunProfileIdFlagName string
	if cmdPrefix == "" {
		newRunProfileIdFlagName = "newRunProfileId"
	} else {
		newRunProfileIdFlagName = fmt.Sprintf("%v.newRunProfileId", cmdPrefix)
	}

	var newRunProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(newRunProfileIdFlagName, newRunProfileIdFlagDefault, newRunProfileIdDescription)

	return nil
}

func registerOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileRunProfileIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	runProfileIdDescription := `Required. run profile id to delete`

	var runProfileIdFlagName string
	if cmdPrefix == "" {
		runProfileIdFlagName = "runProfileId"
	} else {
		runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
	}

	var runProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(runProfileIdFlagName, runProfileIdFlagDefault, runProfileIdDescription)

	return nil
}

func retrieveOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileEngineIDFlag(m *runtime_engines_run_profiles.DeleteEngineRunProfileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("engineId") {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileNewRunProfileIDFlag(m *runtime_engines_run_profiles.DeleteEngineRunProfileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("newRunProfileId") {

		var newRunProfileIdFlagName string
		if cmdPrefix == "" {
			newRunProfileIdFlagName = "newRunProfileId"
		} else {
			newRunProfileIdFlagName = fmt.Sprintf("%v.newRunProfileId", cmdPrefix)
		}

		newRunProfileIdFlagValue, err := cmd.Flags().GetString(newRunProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.NewRunProfileID = &newRunProfileIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileRunProfileIDFlag(m *runtime_engines_run_profiles.DeleteEngineRunProfileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("runProfileId") {

		var runProfileIdFlagName string
		if cmdPrefix == "" {
			runProfileIdFlagName = "runProfileId"
		} else {
			runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
		}

		runProfileIdFlagValue, err := cmd.Flags().GetString(runProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.RunProfileID = runProfileIdFlagValue

	}

	return nil, retAdded
}

// parseOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileResult parses request result and return the string content
func parseOperationRuntimeEnginesRunProfilesDeleteEngineRunProfileResult(resp0 *runtime_engines_run_profiles.DeleteEngineRunProfileAccepted, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteEngineRunProfileAccepted is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*runtime_engines_run_profiles.DeleteEngineRunProfileForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*runtime_engines_run_profiles.DeleteEngineRunProfileNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*runtime_engines_run_profiles.DeleteEngineRunProfileInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteEngineRunProfileAccepted is not supported by go-swagger cli yet.

	return "", nil
}
