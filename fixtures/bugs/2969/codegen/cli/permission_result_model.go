// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PermissionResult

// register flags to command
func registerModelPermissionResultFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPermissionResultPropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPermissionResultPropPermission(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPermissionResultPropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPermissionResultPropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := ``

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerPermissionResultPropPermission(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var permissionFlagName string
	if cmdPrefix == "" {
		permissionFlagName = "permission"
	} else {
		permissionFlagName = fmt.Sprintf("%v.permission", cmdPrefix)
	}

	if err := registerModelPermissionFlags(depth+1, permissionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerPermissionResultPropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault int32

	_ = cmd.PersistentFlags().Int32(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPermissionResultFlags(depth int, m *models.PermissionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, messageAdded := retrievePermissionResultPropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, permissionAdded := retrievePermissionResultPropPermissionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || permissionAdded

	err, statusAdded := retrievePermissionResultPropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrievePermissionResultPropMessageFlags(depth int, m *models.PermissionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePermissionResultPropPermissionFlags(depth int, m *models.PermissionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	permissionFlagName := fmt.Sprintf("%v.permission", cmdPrefix)
	if cmd.Flags().Changed(permissionFlagName) {
		// info: complex object permission Permission is retrieved outside this Changed() block
	}
	permissionFlagValue := m.Permission
	if swag.IsZero(permissionFlagValue) {
		permissionFlagValue = &models.Permission{}
	}

	err, permissionAdded := retrieveModelPermissionFlags(depth+1, permissionFlagValue, permissionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || permissionAdded
	if permissionAdded {
		m.Permission = permissionFlagValue
	}

	return nil, retAdded
}

func retrievePermissionResultPropStatusFlags(depth int, m *models.PermissionResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt32(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
