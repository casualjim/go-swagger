// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for ErrorResponse

// register flags to command
func registerModelErrorResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorResponsePropCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorResponsePropDetails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorResponsePropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorResponsePropRequestID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorResponsePropStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorResponsePropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorResponsePropCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	codeDescription := `Internal error code`

	var codeFlagName string
	if cmdPrefix == "" {
		codeFlagName = "code"
	} else {
		codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var codeFlagDefault string

	_ = cmd.PersistentFlags().String(codeFlagName, codeFlagDefault, codeDescription)

	return nil
}

func registerErrorResponsePropDetails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	detailsDescription := `Developer message (not translated). Info about error for developer.`

	var detailsFlagName string
	if cmdPrefix == "" {
		detailsFlagName = "details"
	} else {
		detailsFlagName = fmt.Sprintf("%v.details", cmdPrefix)
	}

	var detailsFlagDefault string

	_ = cmd.PersistentFlags().String(detailsFlagName, detailsFlagDefault, detailsDescription)

	return nil
}

func registerErrorResponsePropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := `Required. Error message (multilanguage). Info about error for user.`

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerErrorResponsePropRequestID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	requestIdDescription := `The unique identification of the request involved with this error`

	var requestIdFlagName string
	if cmdPrefix == "" {
		requestIdFlagName = "requestId"
	} else {
		requestIdFlagName = fmt.Sprintf("%v.requestId", cmdPrefix)
	}

	var requestIdFlagDefault string

	_ = cmd.PersistentFlags().String(requestIdFlagName, requestIdFlagDefault, requestIdDescription)

	return nil
}

func registerErrorResponsePropStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `Required. Status code`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault int32

	_ = cmd.PersistentFlags().Int32(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerErrorResponsePropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `URL provided detailed info about error`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelErrorResponseFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, codeAdded := retrieveErrorResponsePropCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || codeAdded

	err, detailsAdded := retrieveErrorResponsePropDetailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || detailsAdded

	err, messageAdded := retrieveErrorResponsePropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, requestIdAdded := retrieveErrorResponsePropRequestIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || requestIdAdded

	err, statusAdded := retrieveErrorResponsePropStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, urlAdded := retrieveErrorResponsePropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	return nil, retAdded
}

func retrieveErrorResponsePropCodeFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	codeFlagName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(codeFlagName) {

		var codeFlagName string
		if cmdPrefix == "" {
			codeFlagName = "code"
		} else {
			codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		codeFlagValue, err := cmd.Flags().GetString(codeFlagName)
		if err != nil {
			return err, false
		}
		m.Code = codeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorResponsePropDetailsFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	detailsFlagName := fmt.Sprintf("%v.details", cmdPrefix)
	if cmd.Flags().Changed(detailsFlagName) {

		var detailsFlagName string
		if cmdPrefix == "" {
			detailsFlagName = "details"
		} else {
			detailsFlagName = fmt.Sprintf("%v.details", cmdPrefix)
		}

		detailsFlagValue, err := cmd.Flags().GetString(detailsFlagName)
		if err != nil {
			return err, false
		}
		m.Details = detailsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorResponsePropMessageFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = &messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorResponsePropRequestIDFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	requestIdFlagName := fmt.Sprintf("%v.requestId", cmdPrefix)
	if cmd.Flags().Changed(requestIdFlagName) {

		var requestIdFlagName string
		if cmdPrefix == "" {
			requestIdFlagName = "requestId"
		} else {
			requestIdFlagName = fmt.Sprintf("%v.requestId", cmdPrefix)
		}

		requestIdFlagValue, err := cmd.Flags().GetString(requestIdFlagName)
		if err != nil {
			return err, false
		}
		m.RequestID = requestIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorResponsePropStatusFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetInt32(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveErrorResponsePropURLFlags(depth int, m *models.ErrorResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
