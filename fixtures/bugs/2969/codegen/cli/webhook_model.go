// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Webhook

// register flags to command
func registerModelWebhookFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebhookPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPropNewURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPropRunAsUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPropTriggerCalls(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPropTriggerTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebhookPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Webhook description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerWebhookPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Webhook name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerWebhookPropNewURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	newUrlDescription := `Indicates whether to generate new url`

	var newUrlFlagName string
	if cmdPrefix == "" {
		newUrlFlagName = "newUrl"
	} else {
		newUrlFlagName = fmt.Sprintf("%v.newUrl", cmdPrefix)
	}

	var newUrlFlagDefault bool

	_ = cmd.PersistentFlags().Bool(newUrlFlagName, newUrlFlagDefault, newUrlDescription)

	return nil
}

func registerWebhookPropRunAsUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runAsUserDescription := `The user on behalf of whom the task will be launched`

	var runAsUserFlagName string
	if cmdPrefix == "" {
		runAsUserFlagName = "runAsUser"
	} else {
		runAsUserFlagName = fmt.Sprintf("%v.runAsUser", cmdPrefix)
	}

	var runAsUserFlagDefault string

	_ = cmd.PersistentFlags().String(runAsUserFlagName, runAsUserFlagDefault, runAsUserDescription)

	return nil
}

func registerWebhookPropTriggerCalls(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerCallsDescription := `Endpoint call count to run task|plan `

	var triggerCallsFlagName string
	if cmdPrefix == "" {
		triggerCallsFlagName = "triggerCalls"
	} else {
		triggerCallsFlagName = fmt.Sprintf("%v.triggerCalls", cmdPrefix)
	}

	var triggerCallsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(triggerCallsFlagName, triggerCallsFlagDefault, triggerCallsDescription)

	return nil
}

func registerWebhookPropTriggerTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerTimeoutDescription := `Time after which the task will starts from the moment the endpoint is first called `

	var triggerTimeoutFlagName string
	if cmdPrefix == "" {
		triggerTimeoutFlagName = "triggerTimeout"
	} else {
		triggerTimeoutFlagName = fmt.Sprintf("%v.triggerTimeout", cmdPrefix)
	}

	var triggerTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(triggerTimeoutFlagName, triggerTimeoutFlagDefault, triggerTimeoutDescription)

	return nil
}

func registerWebhookPropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `Webhook url`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebhookFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveWebhookPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, nameAdded := retrieveWebhookPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, newUrlAdded := retrieveWebhookPropNewURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || newUrlAdded

	err, runAsUserAdded := retrieveWebhookPropRunAsUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runAsUserAdded

	err, triggerCallsAdded := retrieveWebhookPropTriggerCallsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerCallsAdded

	err, triggerTimeoutAdded := retrieveWebhookPropTriggerTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerTimeoutAdded

	err, urlAdded := retrieveWebhookPropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	return nil, retAdded
}

func retrieveWebhookPropDescriptionFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPropNameFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPropNewURLFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	newUrlFlagName := fmt.Sprintf("%v.newUrl", cmdPrefix)
	if cmd.Flags().Changed(newUrlFlagName) {

		var newUrlFlagName string
		if cmdPrefix == "" {
			newUrlFlagName = "newUrl"
		} else {
			newUrlFlagName = fmt.Sprintf("%v.newUrl", cmdPrefix)
		}

		newUrlFlagValue, err := cmd.Flags().GetBool(newUrlFlagName)
		if err != nil {
			return err, false
		}
		m.NewURL = newUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPropRunAsUserFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runAsUserFlagName := fmt.Sprintf("%v.runAsUser", cmdPrefix)
	if cmd.Flags().Changed(runAsUserFlagName) {

		var runAsUserFlagName string
		if cmdPrefix == "" {
			runAsUserFlagName = "runAsUser"
		} else {
			runAsUserFlagName = fmt.Sprintf("%v.runAsUser", cmdPrefix)
		}

		runAsUserFlagValue, err := cmd.Flags().GetString(runAsUserFlagName)
		if err != nil {
			return err, false
		}
		m.RunAsUser = runAsUserFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPropTriggerCallsFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerCallsFlagName := fmt.Sprintf("%v.triggerCalls", cmdPrefix)
	if cmd.Flags().Changed(triggerCallsFlagName) {

		var triggerCallsFlagName string
		if cmdPrefix == "" {
			triggerCallsFlagName = "triggerCalls"
		} else {
			triggerCallsFlagName = fmt.Sprintf("%v.triggerCalls", cmdPrefix)
		}

		triggerCallsFlagValue, err := cmd.Flags().GetInt64(triggerCallsFlagName)
		if err != nil {
			return err, false
		}
		m.TriggerCalls = triggerCallsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPropTriggerTimeoutFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerTimeoutFlagName := fmt.Sprintf("%v.triggerTimeout", cmdPrefix)
	if cmd.Flags().Changed(triggerTimeoutFlagName) {

		var triggerTimeoutFlagName string
		if cmdPrefix == "" {
			triggerTimeoutFlagName = "triggerTimeout"
		} else {
			triggerTimeoutFlagName = fmt.Sprintf("%v.triggerTimeout", cmdPrefix)
		}

		triggerTimeoutFlagValue, err := cmd.Flags().GetInt64(triggerTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.TriggerTimeout = triggerTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPropURLFlags(depth int, m *models.Webhook, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
