// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for Databrick

// register flags to command
func registerModelDatabrickFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDatabrickPropCloudProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabrickPropEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabrickPropStagingLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabrickPropTarget(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDatabrickPropToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDatabrickPropCloudProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cloudProviderDescription := `Enum: ["AWS","Azure"]. Required. Cloud provider`

	var cloudProviderFlagName string
	if cmdPrefix == "" {
		cloudProviderFlagName = "cloudProvider"
	} else {
		cloudProviderFlagName = fmt.Sprintf("%v.cloudProvider", cmdPrefix)
	}

	var cloudProviderFlagDefault string

	_ = cmd.PersistentFlags().String(cloudProviderFlagName, cloudProviderFlagDefault, cloudProviderDescription)

	if err := cmd.RegisterFlagCompletionFunc(cloudProviderFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["AWS","Azure"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerDatabrickPropEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointDescription := `Required. Endpoint`

	var endpointFlagName string
	if cmdPrefix == "" {
		endpointFlagName = "endpoint"
	} else {
		endpointFlagName = fmt.Sprintf("%v.endpoint", cmdPrefix)
	}

	var endpointFlagDefault string

	_ = cmd.PersistentFlags().String(endpointFlagName, endpointFlagDefault, endpointDescription)

	return nil
}

func registerDatabrickPropStagingLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stagingLocationDescription := `Required. DBFS library staging directory`

	var stagingLocationFlagName string
	if cmdPrefix == "" {
		stagingLocationFlagName = "stagingLocation"
	} else {
		stagingLocationFlagName = fmt.Sprintf("%v.stagingLocation", cmdPrefix)
	}

	var stagingLocationFlagDefault string

	_ = cmd.PersistentFlags().String(stagingLocationFlagName, stagingLocationFlagDefault, stagingLocationDescription)

	return nil
}

func registerDatabrickPropTarget(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var targetFlagName string
	if cmdPrefix == "" {
		targetFlagName = "target"
	} else {
		targetFlagName = fmt.Sprintf("%v.target", cmdPrefix)
	}

	if err := registerModelDatabricksClusterFlags(depth+1, targetFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDatabrickPropToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenDescription := `Token (can also be provided in the Remote Engine configuration)`

	var tokenFlagName string
	if cmdPrefix == "" {
		tokenFlagName = "token"
	} else {
		tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
	}

	var tokenFlagDefault string

	_ = cmd.PersistentFlags().String(tokenFlagName, tokenFlagDefault, tokenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDatabrickFlags(depth int, m *models.Databrick, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cloudProviderAdded := retrieveDatabrickPropCloudProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cloudProviderAdded

	err, endpointAdded := retrieveDatabrickPropEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointAdded

	err, stagingLocationAdded := retrieveDatabrickPropStagingLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stagingLocationAdded

	err, targetAdded := retrieveDatabrickPropTargetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetAdded

	err, tokenAdded := retrieveDatabrickPropTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenAdded

	return nil, retAdded
}

func retrieveDatabrickPropCloudProviderFlags(depth int, m *models.Databrick, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cloudProviderFlagName := fmt.Sprintf("%v.cloudProvider", cmdPrefix)
	if cmd.Flags().Changed(cloudProviderFlagName) {

		var cloudProviderFlagName string
		if cmdPrefix == "" {
			cloudProviderFlagName = "cloudProvider"
		} else {
			cloudProviderFlagName = fmt.Sprintf("%v.cloudProvider", cmdPrefix)
		}

		cloudProviderFlagValue, err := cmd.Flags().GetString(cloudProviderFlagName)
		if err != nil {
			return err, false
		}
		m.CloudProvider = &cloudProviderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabrickPropEndpointFlags(depth int, m *models.Databrick, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointFlagName := fmt.Sprintf("%v.endpoint", cmdPrefix)
	if cmd.Flags().Changed(endpointFlagName) {

		var endpointFlagName string
		if cmdPrefix == "" {
			endpointFlagName = "endpoint"
		} else {
			endpointFlagName = fmt.Sprintf("%v.endpoint", cmdPrefix)
		}

		endpointFlagValue, err := cmd.Flags().GetString(endpointFlagName)
		if err != nil {
			return err, false
		}
		m.Endpoint = &endpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabrickPropStagingLocationFlags(depth int, m *models.Databrick, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stagingLocationFlagName := fmt.Sprintf("%v.stagingLocation", cmdPrefix)
	if cmd.Flags().Changed(stagingLocationFlagName) {

		var stagingLocationFlagName string
		if cmdPrefix == "" {
			stagingLocationFlagName = "stagingLocation"
		} else {
			stagingLocationFlagName = fmt.Sprintf("%v.stagingLocation", cmdPrefix)
		}

		stagingLocationFlagValue, err := cmd.Flags().GetString(stagingLocationFlagName)
		if err != nil {
			return err, false
		}
		m.StagingLocation = &stagingLocationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDatabrickPropTargetFlags(depth int, m *models.Databrick, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	targetFlagName := fmt.Sprintf("%v.target", cmdPrefix)
	if cmd.Flags().Changed(targetFlagName) {
		// info: complex object target DatabricksCluster is retrieved outside this Changed() block
	}
	targetFlagValue := m.Target
	if swag.IsZero(targetFlagValue) {
		targetFlagValue = &models.DatabricksCluster{}
	}

	err, targetAdded := retrieveModelDatabricksClusterFlags(depth+1, targetFlagValue, targetFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetAdded
	if targetAdded {
		m.Target = targetFlagValue
	}

	return nil, retAdded
}

func retrieveDatabrickPropTokenFlags(depth int, m *models.Databrick, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenFlagName := fmt.Sprintf("%v.token", cmdPrefix)
	if cmd.Flags().Changed(tokenFlagName) {

		var tokenFlagName string
		if cmdPrefix == "" {
			tokenFlagName = "token"
		} else {
			tokenFlagName = fmt.Sprintf("%v.token", cmdPrefix)
		}

		tokenFlagValue, err := cmd.Flags().GetString(tokenFlagName)
		if err != nil {
			return err, false
		}
		m.Token = tokenFlagValue

		retAdded = true
	}

	return nil, retAdded
}
