// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for TaskV21CreateRequest

// register flags to command
func registerModelTaskV21CreateRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskV21CreateRequestPropArtifact(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropAutoUpgradeInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropConnections(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropEnvironmentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropResources(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskV21CreateRequestPropWorkspaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskV21CreateRequestPropArtifact(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var artifactFlagName string
	if cmdPrefix == "" {
		artifactFlagName = "artifact"
	} else {
		artifactFlagName = fmt.Sprintf("%v.artifact", cmdPrefix)
	}

	if err := registerModelArtifactRequestFlags(depth+1, artifactFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskV21CreateRequestPropAutoUpgradeInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var autoUpgradeInfoFlagName string
	if cmdPrefix == "" {
		autoUpgradeInfoFlagName = "autoUpgradeInfo"
	} else {
		autoUpgradeInfoFlagName = fmt.Sprintf("%v.autoUpgradeInfo", cmdPrefix)
	}

	if err := registerModelAutoUpgradeInfoFlags(depth+1, autoUpgradeInfoFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskV21CreateRequestPropConnections(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: connections map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21CreateRequestPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Required. Task description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerTaskV21CreateRequestPropEnvironmentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentIdDescription := `Required. Environment id of task to create`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerTaskV21CreateRequestPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Task name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerTaskV21CreateRequestPropParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21CreateRequestPropResources(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: resources map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21CreateRequestPropTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerTaskV21CreateRequestPropWorkspaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceIdDescription := `Required. Workspace id of task to create`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskV21CreateRequestFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, artifactAdded := retrieveTaskV21CreateRequestPropArtifactFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactAdded

	err, autoUpgradeInfoAdded := retrieveTaskV21CreateRequestPropAutoUpgradeInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpgradeInfoAdded

	err, connectionsAdded := retrieveTaskV21CreateRequestPropConnectionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || connectionsAdded

	err, descriptionAdded := retrieveTaskV21CreateRequestPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, environmentIdAdded := retrieveTaskV21CreateRequestPropEnvironmentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentIdAdded

	err, nameAdded := retrieveTaskV21CreateRequestPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, parametersAdded := retrieveTaskV21CreateRequestPropParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, resourcesAdded := retrieveTaskV21CreateRequestPropResourcesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourcesAdded

	err, tagsAdded := retrieveTaskV21CreateRequestPropTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, workspaceIdAdded := retrieveTaskV21CreateRequestPropWorkspaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdAdded

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropArtifactFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactFlagName := fmt.Sprintf("%v.artifact", cmdPrefix)
	if cmd.Flags().Changed(artifactFlagName) {
		// info: complex object artifact ArtifactRequest is retrieved outside this Changed() block
	}
	artifactFlagValue := m.Artifact
	if swag.IsZero(artifactFlagValue) {
		artifactFlagValue = &models.ArtifactRequest{}
	}

	err, artifactAdded := retrieveModelArtifactRequestFlags(depth+1, artifactFlagValue, artifactFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactAdded
	if artifactAdded {
		m.Artifact = artifactFlagValue
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropAutoUpgradeInfoFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	autoUpgradeInfoFlagName := fmt.Sprintf("%v.autoUpgradeInfo", cmdPrefix)
	if cmd.Flags().Changed(autoUpgradeInfoFlagName) {
		// info: complex object autoUpgradeInfo AutoUpgradeInfo is retrieved outside this Changed() block
	}
	autoUpgradeInfoFlagValue := m.AutoUpgradeInfo
	if swag.IsZero(autoUpgradeInfoFlagValue) {
		autoUpgradeInfoFlagValue = &models.AutoUpgradeInfo{}
	}

	err, autoUpgradeInfoAdded := retrieveModelAutoUpgradeInfoFlags(depth+1, autoUpgradeInfoFlagValue, autoUpgradeInfoFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || autoUpgradeInfoAdded
	if autoUpgradeInfoAdded {
		m.AutoUpgradeInfo = autoUpgradeInfoFlagValue
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropConnectionsFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	connectionsFlagName := fmt.Sprintf("%v.connections", cmdPrefix)
	if cmd.Flags().Changed(connectionsFlagName) {
		// warning: connections map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropDescriptionFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropEnvironmentIDFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentIdFlagName := fmt.Sprintf("%v.environmentId", cmdPrefix)
	if cmd.Flags().Changed(environmentIdFlagName) {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = &environmentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropNameFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropParametersFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropResourcesFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourcesFlagName := fmt.Sprintf("%v.resources", cmdPrefix)
	if cmd.Flags().Changed(resourcesFlagName) {
		// warning: resources map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropTagsFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskV21CreateRequestPropWorkspaceIDFlags(depth int, m *models.TaskV21CreateRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdFlagName := fmt.Sprintf("%v.workspaceId", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdFlagName) {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = &workspaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
