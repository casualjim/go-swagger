// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for UpdateWorkspaceRequest

// register flags to command
func registerModelUpdateWorkspaceRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUpdateWorkspaceRequestPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateWorkspaceRequestPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateWorkspaceRequestPropOwner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUpdateWorkspaceRequestPropProtectedArtifactUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUpdateWorkspaceRequestPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Workspace description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerUpdateWorkspaceRequestPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Workspace name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerUpdateWorkspaceRequestPropOwner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerDescription := `The owner of the workspace`

	var ownerFlagName string
	if cmdPrefix == "" {
		ownerFlagName = "owner"
	} else {
		ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
	}

	var ownerFlagDefault string

	_ = cmd.PersistentFlags().String(ownerFlagName, ownerFlagDefault, ownerDescription)

	return nil
}

func registerUpdateWorkspaceRequestPropProtectedArtifactUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	protectedArtifactUpdateDescription := `Update tasks only with workspace artifacts`

	var protectedArtifactUpdateFlagName string
	if cmdPrefix == "" {
		protectedArtifactUpdateFlagName = "protectedArtifactUpdate"
	} else {
		protectedArtifactUpdateFlagName = fmt.Sprintf("%v.protectedArtifactUpdate", cmdPrefix)
	}

	var protectedArtifactUpdateFlagDefault bool

	_ = cmd.PersistentFlags().Bool(protectedArtifactUpdateFlagName, protectedArtifactUpdateFlagDefault, protectedArtifactUpdateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUpdateWorkspaceRequestFlags(depth int, m *models.UpdateWorkspaceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveUpdateWorkspaceRequestPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, nameAdded := retrieveUpdateWorkspaceRequestPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, ownerAdded := retrieveUpdateWorkspaceRequestPropOwnerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerAdded

	err, protectedArtifactUpdateAdded := retrieveUpdateWorkspaceRequestPropProtectedArtifactUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || protectedArtifactUpdateAdded

	return nil, retAdded
}

func retrieveUpdateWorkspaceRequestPropDescriptionFlags(depth int, m *models.UpdateWorkspaceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateWorkspaceRequestPropNameFlags(depth int, m *models.UpdateWorkspaceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateWorkspaceRequestPropOwnerFlags(depth int, m *models.UpdateWorkspaceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerFlagName := fmt.Sprintf("%v.owner", cmdPrefix)
	if cmd.Flags().Changed(ownerFlagName) {

		var ownerFlagName string
		if cmdPrefix == "" {
			ownerFlagName = "owner"
		} else {
			ownerFlagName = fmt.Sprintf("%v.owner", cmdPrefix)
		}

		ownerFlagValue, err := cmd.Flags().GetString(ownerFlagName)
		if err != nil {
			return err, false
		}
		m.Owner = ownerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUpdateWorkspaceRequestPropProtectedArtifactUpdateFlags(depth int, m *models.UpdateWorkspaceRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	protectedArtifactUpdateFlagName := fmt.Sprintf("%v.protectedArtifactUpdate", cmdPrefix)
	if cmd.Flags().Changed(protectedArtifactUpdateFlagName) {

		var protectedArtifactUpdateFlagName string
		if cmdPrefix == "" {
			protectedArtifactUpdateFlagName = "protectedArtifactUpdate"
		} else {
			protectedArtifactUpdateFlagName = fmt.Sprintf("%v.protectedArtifactUpdate", cmdPrefix)
		}

		protectedArtifactUpdateFlagValue, err := cmd.Flags().GetBool(protectedArtifactUpdateFlagName)
		if err != nil {
			return err, false
		}
		m.ProtectedArtifactUpdate = protectedArtifactUpdateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
