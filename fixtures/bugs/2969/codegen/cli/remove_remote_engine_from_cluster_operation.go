// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/runtime_clusters"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRuntimeClustersRemoveRemoteEngineFromClusterCmd returns a command to handle operation removeRemoteEngineFromCluster
func makeOperationRuntimeClustersRemoveRemoteEngineFromClusterCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "removeRemoteEngineFromCluster",
		Short: `Remove Remote Engine from Remote Engine Cluster`,
		RunE:  runOperationRuntimeClustersRemoveRemoteEngineFromCluster,
	}

	if err := registerOperationRuntimeClustersRemoveRemoteEngineFromClusterParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRuntimeClustersRemoveRemoteEngineFromCluster uses cmd flags to call endpoint api
func runOperationRuntimeClustersRemoveRemoteEngineFromCluster(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := runtime_clusters.NewRemoveRemoteEngineFromClusterParams()
	if err, _ = retrieveOperationRuntimeClustersRemoveRemoteEngineFromClusterClusterIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimeClustersRemoveRemoteEngineFromClusterEngineIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRuntimeClustersRemoveRemoteEngineFromClusterResult(appCli.RuntimeClusters.RemoveRemoteEngineFromCluster(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationRuntimeClustersRemoveRemoteEngineFromClusterParamFlags registers all flags needed to fill params
func registerOperationRuntimeClustersRemoveRemoteEngineFromClusterParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRuntimeClustersRemoveRemoteEngineFromClusterClusterIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimeClustersRemoveRemoteEngineFromClusterEngineIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRuntimeClustersRemoveRemoteEngineFromClusterClusterIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	clusterIdDescription := `Required. remote engine cluster id`

	var clusterIdFlagName string
	if cmdPrefix == "" {
		clusterIdFlagName = "clusterId"
	} else {
		clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
	}

	var clusterIdFlagDefault string

	_ = cmd.PersistentFlags().String(clusterIdFlagName, clusterIdFlagDefault, clusterIdDescription)

	return nil
}

func registerOperationRuntimeClustersRemoveRemoteEngineFromClusterEngineIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	engineIdDescription := `Required. remote engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func retrieveOperationRuntimeClustersRemoveRemoteEngineFromClusterClusterIDFlag(m *runtime_clusters.RemoveRemoteEngineFromClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("clusterId") {

		var clusterIdFlagName string
		if cmdPrefix == "" {
			clusterIdFlagName = "clusterId"
		} else {
			clusterIdFlagName = fmt.Sprintf("%v.clusterId", cmdPrefix)
		}

		clusterIdFlagValue, err := cmd.Flags().GetString(clusterIdFlagName)
		if err != nil {
			return err, false
		}
		m.ClusterID = clusterIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationRuntimeClustersRemoveRemoteEngineFromClusterEngineIDFlag(m *runtime_clusters.RemoveRemoteEngineFromClusterParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("engineId") {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

	}

	return nil, retAdded
}

// parseOperationRuntimeClustersRemoveRemoteEngineFromClusterResult parses request result and return the string content
func parseOperationRuntimeClustersRemoveRemoteEngineFromClusterResult(resp0 *runtime_clusters.RemoveRemoteEngineFromClusterNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning removeRemoteEngineFromClusterNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*runtime_clusters.RemoveRemoteEngineFromClusterBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*runtime_clusters.RemoveRemoteEngineFromClusterUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*runtime_clusters.RemoveRemoteEngineFromClusterForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*runtime_clusters.RemoveRemoteEngineFromClusterNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*runtime_clusters.RemoveRemoteEngineFromClusterInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response removeRemoteEngineFromClusterNoContent is not supported by go-swagger cli yet.

	return "", nil
}
