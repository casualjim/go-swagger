// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for BigDataRunProfile

// register flags to command
func registerModelBigDataRunProfileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBigDataRunProfilePropCheckPointFilePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropDistribution(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropDriverCores(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropDriverMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropEngineID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropExecutionFramework(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropExecutorMemoryOverhead(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropIsCheckpointingEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropMicroBatchInterval(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropParameters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropStreamingTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropTemporaryStorage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropYarnQueue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBigDataRunProfilePropYarnStrategy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBigDataRunProfilePropCheckPointFilePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	checkPointFilePathDescription := `Checkpoint file path. Required if checkpointing enabled`

	var checkPointFilePathFlagName string
	if cmdPrefix == "" {
		checkPointFilePathFlagName = "checkPointFilePath"
	} else {
		checkPointFilePathFlagName = fmt.Sprintf("%v.checkPointFilePath", cmdPrefix)
	}

	var checkPointFilePathFlagDefault string

	_ = cmd.PersistentFlags().String(checkPointFilePathFlagName, checkPointFilePathFlagDefault, checkPointFilePathDescription)

	return nil
}

func registerBigDataRunProfilePropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerBigDataRunProfilePropDistribution(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	distributionDescription := `Distribution`

	var distributionFlagName string
	if cmdPrefix == "" {
		distributionFlagName = "distribution"
	} else {
		distributionFlagName = fmt.Sprintf("%v.distribution", cmdPrefix)
	}

	var distributionFlagDefault string

	_ = cmd.PersistentFlags().String(distributionFlagName, distributionFlagDefault, distributionDescription)

	return nil
}

func registerBigDataRunProfilePropDriverCores(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	driverCoresDescription := `Driver cores`

	var driverCoresFlagName string
	if cmdPrefix == "" {
		driverCoresFlagName = "driverCores"
	} else {
		driverCoresFlagName = fmt.Sprintf("%v.driverCores", cmdPrefix)
	}

	var driverCoresFlagDefault int32

	_ = cmd.PersistentFlags().Int32(driverCoresFlagName, driverCoresFlagDefault, driverCoresDescription)

	return nil
}

func registerBigDataRunProfilePropDriverMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	driverMemoryDescription := `Driver cores (in MB)`

	var driverMemoryFlagName string
	if cmdPrefix == "" {
		driverMemoryFlagName = "driverMemory"
	} else {
		driverMemoryFlagName = fmt.Sprintf("%v.driverMemory", cmdPrefix)
	}

	var driverMemoryFlagDefault int32

	_ = cmd.PersistentFlags().Int32(driverMemoryFlagName, driverMemoryFlagDefault, driverMemoryDescription)

	return nil
}

func registerBigDataRunProfilePropEngineID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	engineIdDescription := `Pipeline engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerBigDataRunProfilePropExecutionFramework(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionFrameworkDescription := `Execution framework`

	var executionFrameworkFlagName string
	if cmdPrefix == "" {
		executionFrameworkFlagName = "executionFramework"
	} else {
		executionFrameworkFlagName = fmt.Sprintf("%v.executionFramework", cmdPrefix)
	}

	var executionFrameworkFlagDefault string

	_ = cmd.PersistentFlags().String(executionFrameworkFlagName, executionFrameworkFlagDefault, executionFrameworkDescription)

	return nil
}

func registerBigDataRunProfilePropExecutorMemoryOverhead(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executorMemoryOverheadDescription := `Required. Execution memory overhead (MB)`

	var executorMemoryOverheadFlagName string
	if cmdPrefix == "" {
		executorMemoryOverheadFlagName = "executorMemoryOverhead"
	} else {
		executorMemoryOverheadFlagName = fmt.Sprintf("%v.executorMemoryOverhead", cmdPrefix)
	}

	var executorMemoryOverheadFlagDefault int32

	_ = cmd.PersistentFlags().Int32(executorMemoryOverheadFlagName, executorMemoryOverheadFlagDefault, executorMemoryOverheadDescription)

	return nil
}

func registerBigDataRunProfilePropIsCheckpointingEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isCheckpointingEnabledDescription := `Checkpointing`

	var isCheckpointingEnabledFlagName string
	if cmdPrefix == "" {
		isCheckpointingEnabledFlagName = "isCheckpointingEnabled"
	} else {
		isCheckpointingEnabledFlagName = fmt.Sprintf("%v.isCheckpointingEnabled", cmdPrefix)
	}

	var isCheckpointingEnabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isCheckpointingEnabledFlagName, isCheckpointingEnabledFlagDefault, isCheckpointingEnabledDescription)

	return nil
}

func registerBigDataRunProfilePropMicroBatchInterval(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	microBatchIntervalDescription := `Required. Micro-batch interval (in ms)`

	var microBatchIntervalFlagName string
	if cmdPrefix == "" {
		microBatchIntervalFlagName = "microBatchInterval"
	} else {
		microBatchIntervalFlagName = fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
	}

	var microBatchIntervalFlagDefault int32

	_ = cmd.PersistentFlags().Int32(microBatchIntervalFlagName, microBatchIntervalFlagDefault, microBatchIntervalDescription)

	return nil
}

func registerBigDataRunProfilePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerBigDataRunProfilePropParameters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: parameters map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerBigDataRunProfilePropStreamingTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	streamingTimeoutDescription := `Required. Streaming timeout (in ms)`

	var streamingTimeoutFlagName string
	if cmdPrefix == "" {
		streamingTimeoutFlagName = "streamingTimeout"
	} else {
		streamingTimeoutFlagName = fmt.Sprintf("%v.streamingTimeout", cmdPrefix)
	}

	var streamingTimeoutFlagDefault int32

	_ = cmd.PersistentFlags().Int32(streamingTimeoutFlagName, streamingTimeoutFlagDefault, streamingTimeoutDescription)

	return nil
}

func registerBigDataRunProfilePropTemporaryStorage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	temporaryStorageDescription := `Required. Temporary storage`

	var temporaryStorageFlagName string
	if cmdPrefix == "" {
		temporaryStorageFlagName = "temporaryStorage"
	} else {
		temporaryStorageFlagName = fmt.Sprintf("%v.temporaryStorage", cmdPrefix)
	}

	var temporaryStorageFlagDefault string

	_ = cmd.PersistentFlags().String(temporaryStorageFlagName, temporaryStorageFlagDefault, temporaryStorageDescription)

	return nil
}

func registerBigDataRunProfilePropYarnQueue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	yarnQueueDescription := `Yarn queue`

	var yarnQueueFlagName string
	if cmdPrefix == "" {
		yarnQueueFlagName = "yarnQueue"
	} else {
		yarnQueueFlagName = fmt.Sprintf("%v.yarnQueue", cmdPrefix)
	}

	var yarnQueueFlagDefault string

	_ = cmd.PersistentFlags().String(yarnQueueFlagName, yarnQueueFlagDefault, yarnQueueDescription)

	return nil
}

func registerBigDataRunProfilePropYarnStrategy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var yarnStrategyFlagName string
	if cmdPrefix == "" {
		yarnStrategyFlagName = "yarnStrategy"
	} else {
		yarnStrategyFlagName = fmt.Sprintf("%v.yarnStrategy", cmdPrefix)
	}

	if err := registerModelYarnStrategyFlags(depth+1, yarnStrategyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBigDataRunProfileFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, checkPointFilePathAdded := retrieveBigDataRunProfilePropCheckPointFilePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || checkPointFilePathAdded

	err, descriptionAdded := retrieveBigDataRunProfilePropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, distributionAdded := retrieveBigDataRunProfilePropDistributionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || distributionAdded

	err, driverCoresAdded := retrieveBigDataRunProfilePropDriverCoresFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverCoresAdded

	err, driverMemoryAdded := retrieveBigDataRunProfilePropDriverMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || driverMemoryAdded

	err, engineIdAdded := retrieveBigDataRunProfilePropEngineIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || engineIdAdded

	err, executionFrameworkAdded := retrieveBigDataRunProfilePropExecutionFrameworkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionFrameworkAdded

	err, executorMemoryOverheadAdded := retrieveBigDataRunProfilePropExecutorMemoryOverheadFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executorMemoryOverheadAdded

	err, isCheckpointingEnabledAdded := retrieveBigDataRunProfilePropIsCheckpointingEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isCheckpointingEnabledAdded

	err, microBatchIntervalAdded := retrieveBigDataRunProfilePropMicroBatchIntervalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || microBatchIntervalAdded

	err, nameAdded := retrieveBigDataRunProfilePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, parametersAdded := retrieveBigDataRunProfilePropParametersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parametersAdded

	err, streamingTimeoutAdded := retrieveBigDataRunProfilePropStreamingTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || streamingTimeoutAdded

	err, temporaryStorageAdded := retrieveBigDataRunProfilePropTemporaryStorageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || temporaryStorageAdded

	err, yarnQueueAdded := retrieveBigDataRunProfilePropYarnQueueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || yarnQueueAdded

	err, yarnStrategyAdded := retrieveBigDataRunProfilePropYarnStrategyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || yarnStrategyAdded

	return nil, retAdded
}

func retrieveBigDataRunProfilePropCheckPointFilePathFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	checkPointFilePathFlagName := fmt.Sprintf("%v.checkPointFilePath", cmdPrefix)
	if cmd.Flags().Changed(checkPointFilePathFlagName) {

		var checkPointFilePathFlagName string
		if cmdPrefix == "" {
			checkPointFilePathFlagName = "checkPointFilePath"
		} else {
			checkPointFilePathFlagName = fmt.Sprintf("%v.checkPointFilePath", cmdPrefix)
		}

		checkPointFilePathFlagValue, err := cmd.Flags().GetString(checkPointFilePathFlagName)
		if err != nil {
			return err, false
		}
		m.CheckPointFilePath = checkPointFilePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropDescriptionFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropDistributionFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	distributionFlagName := fmt.Sprintf("%v.distribution", cmdPrefix)
	if cmd.Flags().Changed(distributionFlagName) {

		var distributionFlagName string
		if cmdPrefix == "" {
			distributionFlagName = "distribution"
		} else {
			distributionFlagName = fmt.Sprintf("%v.distribution", cmdPrefix)
		}

		distributionFlagValue, err := cmd.Flags().GetString(distributionFlagName)
		if err != nil {
			return err, false
		}
		m.Distribution = distributionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropDriverCoresFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	driverCoresFlagName := fmt.Sprintf("%v.driverCores", cmdPrefix)
	if cmd.Flags().Changed(driverCoresFlagName) {

		var driverCoresFlagName string
		if cmdPrefix == "" {
			driverCoresFlagName = "driverCores"
		} else {
			driverCoresFlagName = fmt.Sprintf("%v.driverCores", cmdPrefix)
		}

		driverCoresFlagValue, err := cmd.Flags().GetInt32(driverCoresFlagName)
		if err != nil {
			return err, false
		}
		m.DriverCores = driverCoresFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropDriverMemoryFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	driverMemoryFlagName := fmt.Sprintf("%v.driverMemory", cmdPrefix)
	if cmd.Flags().Changed(driverMemoryFlagName) {

		var driverMemoryFlagName string
		if cmdPrefix == "" {
			driverMemoryFlagName = "driverMemory"
		} else {
			driverMemoryFlagName = fmt.Sprintf("%v.driverMemory", cmdPrefix)
		}

		driverMemoryFlagValue, err := cmd.Flags().GetInt32(driverMemoryFlagName)
		if err != nil {
			return err, false
		}
		m.DriverMemory = driverMemoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropEngineIDFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	engineIdFlagName := fmt.Sprintf("%v.engineId", cmdPrefix)
	if cmd.Flags().Changed(engineIdFlagName) {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropExecutionFrameworkFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionFrameworkFlagName := fmt.Sprintf("%v.executionFramework", cmdPrefix)
	if cmd.Flags().Changed(executionFrameworkFlagName) {

		var executionFrameworkFlagName string
		if cmdPrefix == "" {
			executionFrameworkFlagName = "executionFramework"
		} else {
			executionFrameworkFlagName = fmt.Sprintf("%v.executionFramework", cmdPrefix)
		}

		executionFrameworkFlagValue, err := cmd.Flags().GetString(executionFrameworkFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionFramework = executionFrameworkFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropExecutorMemoryOverheadFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executorMemoryOverheadFlagName := fmt.Sprintf("%v.executorMemoryOverhead", cmdPrefix)
	if cmd.Flags().Changed(executorMemoryOverheadFlagName) {

		var executorMemoryOverheadFlagName string
		if cmdPrefix == "" {
			executorMemoryOverheadFlagName = "executorMemoryOverhead"
		} else {
			executorMemoryOverheadFlagName = fmt.Sprintf("%v.executorMemoryOverhead", cmdPrefix)
		}

		executorMemoryOverheadFlagValue, err := cmd.Flags().GetInt32(executorMemoryOverheadFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutorMemoryOverhead = &executorMemoryOverheadFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropIsCheckpointingEnabledFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isCheckpointingEnabledFlagName := fmt.Sprintf("%v.isCheckpointingEnabled", cmdPrefix)
	if cmd.Flags().Changed(isCheckpointingEnabledFlagName) {

		var isCheckpointingEnabledFlagName string
		if cmdPrefix == "" {
			isCheckpointingEnabledFlagName = "isCheckpointingEnabled"
		} else {
			isCheckpointingEnabledFlagName = fmt.Sprintf("%v.isCheckpointingEnabled", cmdPrefix)
		}

		isCheckpointingEnabledFlagValue, err := cmd.Flags().GetBool(isCheckpointingEnabledFlagName)
		if err != nil {
			return err, false
		}
		m.IsCheckpointingEnabled = isCheckpointingEnabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropMicroBatchIntervalFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	microBatchIntervalFlagName := fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
	if cmd.Flags().Changed(microBatchIntervalFlagName) {

		var microBatchIntervalFlagName string
		if cmdPrefix == "" {
			microBatchIntervalFlagName = "microBatchInterval"
		} else {
			microBatchIntervalFlagName = fmt.Sprintf("%v.microBatchInterval", cmdPrefix)
		}

		microBatchIntervalFlagValue, err := cmd.Flags().GetInt32(microBatchIntervalFlagName)
		if err != nil {
			return err, false
		}
		m.MicroBatchInterval = &microBatchIntervalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropNameFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropParametersFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parametersFlagName := fmt.Sprintf("%v.parameters", cmdPrefix)
	if cmd.Flags().Changed(parametersFlagName) {
		// warning: parameters map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropStreamingTimeoutFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	streamingTimeoutFlagName := fmt.Sprintf("%v.streamingTimeout", cmdPrefix)
	if cmd.Flags().Changed(streamingTimeoutFlagName) {

		var streamingTimeoutFlagName string
		if cmdPrefix == "" {
			streamingTimeoutFlagName = "streamingTimeout"
		} else {
			streamingTimeoutFlagName = fmt.Sprintf("%v.streamingTimeout", cmdPrefix)
		}

		streamingTimeoutFlagValue, err := cmd.Flags().GetInt32(streamingTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.StreamingTimeout = &streamingTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropTemporaryStorageFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	temporaryStorageFlagName := fmt.Sprintf("%v.temporaryStorage", cmdPrefix)
	if cmd.Flags().Changed(temporaryStorageFlagName) {

		var temporaryStorageFlagName string
		if cmdPrefix == "" {
			temporaryStorageFlagName = "temporaryStorage"
		} else {
			temporaryStorageFlagName = fmt.Sprintf("%v.temporaryStorage", cmdPrefix)
		}

		temporaryStorageFlagValue, err := cmd.Flags().GetString(temporaryStorageFlagName)
		if err != nil {
			return err, false
		}
		m.TemporaryStorage = &temporaryStorageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropYarnQueueFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	yarnQueueFlagName := fmt.Sprintf("%v.yarnQueue", cmdPrefix)
	if cmd.Flags().Changed(yarnQueueFlagName) {

		var yarnQueueFlagName string
		if cmdPrefix == "" {
			yarnQueueFlagName = "yarnQueue"
		} else {
			yarnQueueFlagName = fmt.Sprintf("%v.yarnQueue", cmdPrefix)
		}

		yarnQueueFlagValue, err := cmd.Flags().GetString(yarnQueueFlagName)
		if err != nil {
			return err, false
		}
		m.YarnQueue = yarnQueueFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBigDataRunProfilePropYarnStrategyFlags(depth int, m *models.BigDataRunProfile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	yarnStrategyFlagName := fmt.Sprintf("%v.yarnStrategy", cmdPrefix)
	if cmd.Flags().Changed(yarnStrategyFlagName) {
		// info: complex object yarnStrategy YarnStrategy is retrieved outside this Changed() block
	}
	yarnStrategyFlagValue := m.YarnStrategy
	if swag.IsZero(yarnStrategyFlagValue) {
		yarnStrategyFlagValue = &models.YarnStrategy{}
	}

	err, yarnStrategyAdded := retrieveModelYarnStrategyFlags(depth+1, yarnStrategyFlagValue, yarnStrategyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || yarnStrategyAdded
	if yarnStrategyAdded {
		m.YarnStrategy = yarnStrategyFlagValue
	}

	return nil, retAdded
}
