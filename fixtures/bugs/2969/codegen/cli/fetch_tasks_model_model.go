// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for FetchTasksModel

// register flags to command
func registerModelFetchTasksModelFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFetchTasksModelPropArtifactID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropEnvironmentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropOffset(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropRuntimeID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropRuntimeRunProfileID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropRuntimeType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropTriggerType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFetchTasksModelPropWorkspaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFetchTasksModelPropArtifactID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	artifactIdDescription := `tasks artifact id filter`

	var artifactIdFlagName string
	if cmdPrefix == "" {
		artifactIdFlagName = "artifactId"
	} else {
		artifactIdFlagName = fmt.Sprintf("%v.artifactId", cmdPrefix)
	}

	var artifactIdFlagDefault string

	_ = cmd.PersistentFlags().String(artifactIdFlagName, artifactIdFlagDefault, artifactIdDescription)

	return nil
}

func registerFetchTasksModelPropEnvironmentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentIdDescription := `tasks environment id filter`

	var environmentIdFlagName string
	if cmdPrefix == "" {
		environmentIdFlagName = "environmentId"
	} else {
		environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
	}

	var environmentIdFlagDefault string

	_ = cmd.PersistentFlags().String(environmentIdFlagName, environmentIdFlagDefault, environmentIdDescription)

	return nil
}

func registerFetchTasksModelPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	limitDescription := `tasks limit filter`

	var limitFlagName string
	if cmdPrefix == "" {
		limitFlagName = "limit"
	} else {
		limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var limitFlagDefault int32

	_ = cmd.PersistentFlags().Int32(limitFlagName, limitFlagDefault, limitDescription)

	return nil
}

func registerFetchTasksModelPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `tasks name filter`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerFetchTasksModelPropOffset(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	offsetDescription := `tasks offset filter`

	var offsetFlagName string
	if cmdPrefix == "" {
		offsetFlagName = "offset"
	} else {
		offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
	}

	var offsetFlagDefault int32

	_ = cmd.PersistentFlags().Int32(offsetFlagName, offsetFlagDefault, offsetDescription)

	return nil
}

func registerFetchTasksModelPropRuntimeID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runtimeIdDescription := `tasks runtime id filter`

	var runtimeIdFlagName string
	if cmdPrefix == "" {
		runtimeIdFlagName = "runtimeId"
	} else {
		runtimeIdFlagName = fmt.Sprintf("%v.runtimeId", cmdPrefix)
	}

	var runtimeIdFlagDefault string

	_ = cmd.PersistentFlags().String(runtimeIdFlagName, runtimeIdFlagDefault, runtimeIdDescription)

	return nil
}

func registerFetchTasksModelPropRuntimeRunProfileID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runtimeRunProfileIdDescription := `tasks runtime run profile id filter`

	var runtimeRunProfileIdFlagName string
	if cmdPrefix == "" {
		runtimeRunProfileIdFlagName = "runtimeRunProfileId"
	} else {
		runtimeRunProfileIdFlagName = fmt.Sprintf("%v.runtimeRunProfileId", cmdPrefix)
	}

	var runtimeRunProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(runtimeRunProfileIdFlagName, runtimeRunProfileIdFlagDefault, runtimeRunProfileIdDescription)

	return nil
}

func registerFetchTasksModelPropRuntimeType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runtimeTypeDescription := `Enum: ["CLOUD","CLOUD_EXCLUSIVE","CLOUD_SANDBOX","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER","ELASTIC_ENGINE"]. tasks runtime type filter`

	var runtimeTypeFlagName string
	if cmdPrefix == "" {
		runtimeTypeFlagName = "runtimeType"
	} else {
		runtimeTypeFlagName = fmt.Sprintf("%v.runtimeType", cmdPrefix)
	}

	var runtimeTypeFlagDefault string

	_ = cmd.PersistentFlags().String(runtimeTypeFlagName, runtimeTypeFlagDefault, runtimeTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(runtimeTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["CLOUD","CLOUD_EXCLUSIVE","CLOUD_SANDBOX","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER","ELASTIC_ENGINE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFetchTasksModelPropTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []string array type is not supported by go-swagger cli yet

	return nil
}

func registerFetchTasksModelPropTriggerType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerTypeDescription := `Enum: ["no_trigger","daily","weekly","monthly","once","webhook","cron","multiple"]. tasks trigger type filter`

	var triggerTypeFlagName string
	if cmdPrefix == "" {
		triggerTypeFlagName = "triggerType"
	} else {
		triggerTypeFlagName = fmt.Sprintf("%v.triggerType", cmdPrefix)
	}

	var triggerTypeFlagDefault string

	_ = cmd.PersistentFlags().String(triggerTypeFlagName, triggerTypeFlagDefault, triggerTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(triggerTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["no_trigger","daily","weekly","monthly","once","webhook","cron","multiple"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerFetchTasksModelPropWorkspaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceIdDescription := `tasks workspace id filter`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFetchTasksModelFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, artifactIdAdded := retrieveFetchTasksModelPropArtifactIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactIdAdded

	err, environmentIdAdded := retrieveFetchTasksModelPropEnvironmentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentIdAdded

	err, limitAdded := retrieveFetchTasksModelPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || limitAdded

	err, nameAdded := retrieveFetchTasksModelPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, offsetAdded := retrieveFetchTasksModelPropOffsetFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || offsetAdded

	err, runtimeIdAdded := retrieveFetchTasksModelPropRuntimeIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeIdAdded

	err, runtimeRunProfileIdAdded := retrieveFetchTasksModelPropRuntimeRunProfileIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeRunProfileIdAdded

	err, runtimeTypeAdded := retrieveFetchTasksModelPropRuntimeTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runtimeTypeAdded

	err, tagsAdded := retrieveFetchTasksModelPropTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagsAdded

	err, triggerTypeAdded := retrieveFetchTasksModelPropTriggerTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerTypeAdded

	err, workspaceIdAdded := retrieveFetchTasksModelPropWorkspaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdAdded

	return nil, retAdded
}

func retrieveFetchTasksModelPropArtifactIDFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactIdFlagName := fmt.Sprintf("%v.artifactId", cmdPrefix)
	if cmd.Flags().Changed(artifactIdFlagName) {

		var artifactIdFlagName string
		if cmdPrefix == "" {
			artifactIdFlagName = "artifactId"
		} else {
			artifactIdFlagName = fmt.Sprintf("%v.artifactId", cmdPrefix)
		}

		artifactIdFlagValue, err := cmd.Flags().GetString(artifactIdFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactID = artifactIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropEnvironmentIDFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentIdFlagName := fmt.Sprintf("%v.environmentId", cmdPrefix)
	if cmd.Flags().Changed(environmentIdFlagName) {

		var environmentIdFlagName string
		if cmdPrefix == "" {
			environmentIdFlagName = "environmentId"
		} else {
			environmentIdFlagName = fmt.Sprintf("%v.environmentId", cmdPrefix)
		}

		environmentIdFlagValue, err := cmd.Flags().GetString(environmentIdFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentID = environmentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropLimitFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	limitFlagName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(limitFlagName) {

		var limitFlagName string
		if cmdPrefix == "" {
			limitFlagName = "limit"
		} else {
			limitFlagName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		limitFlagValue, err := cmd.Flags().GetInt32(limitFlagName)
		if err != nil {
			return err, false
		}
		m.Limit = limitFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropNameFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropOffsetFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	offsetFlagName := fmt.Sprintf("%v.offset", cmdPrefix)
	if cmd.Flags().Changed(offsetFlagName) {

		var offsetFlagName string
		if cmdPrefix == "" {
			offsetFlagName = "offset"
		} else {
			offsetFlagName = fmt.Sprintf("%v.offset", cmdPrefix)
		}

		offsetFlagValue, err := cmd.Flags().GetInt32(offsetFlagName)
		if err != nil {
			return err, false
		}
		m.Offset = offsetFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropRuntimeIDFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeIdFlagName := fmt.Sprintf("%v.runtimeId", cmdPrefix)
	if cmd.Flags().Changed(runtimeIdFlagName) {

		var runtimeIdFlagName string
		if cmdPrefix == "" {
			runtimeIdFlagName = "runtimeId"
		} else {
			runtimeIdFlagName = fmt.Sprintf("%v.runtimeId", cmdPrefix)
		}

		runtimeIdFlagValue, err := cmd.Flags().GetString(runtimeIdFlagName)
		if err != nil {
			return err, false
		}
		m.RuntimeID = runtimeIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropRuntimeRunProfileIDFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeRunProfileIdFlagName := fmt.Sprintf("%v.runtimeRunProfileId", cmdPrefix)
	if cmd.Flags().Changed(runtimeRunProfileIdFlagName) {

		var runtimeRunProfileIdFlagName string
		if cmdPrefix == "" {
			runtimeRunProfileIdFlagName = "runtimeRunProfileId"
		} else {
			runtimeRunProfileIdFlagName = fmt.Sprintf("%v.runtimeRunProfileId", cmdPrefix)
		}

		runtimeRunProfileIdFlagValue, err := cmd.Flags().GetString(runtimeRunProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.RuntimeRunProfileID = runtimeRunProfileIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropRuntimeTypeFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runtimeTypeFlagName := fmt.Sprintf("%v.runtimeType", cmdPrefix)
	if cmd.Flags().Changed(runtimeTypeFlagName) {

		var runtimeTypeFlagName string
		if cmdPrefix == "" {
			runtimeTypeFlagName = "runtimeType"
		} else {
			runtimeTypeFlagName = fmt.Sprintf("%v.runtimeType", cmdPrefix)
		}

		runtimeTypeFlagValue, err := cmd.Flags().GetString(runtimeTypeFlagName)
		if err != nil {
			return err, false
		}
		m.RuntimeType = runtimeTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropTagsFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagsFlagName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(tagsFlagName) {
		// warning: tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropTriggerTypeFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerTypeFlagName := fmt.Sprintf("%v.triggerType", cmdPrefix)
	if cmd.Flags().Changed(triggerTypeFlagName) {

		var triggerTypeFlagName string
		if cmdPrefix == "" {
			triggerTypeFlagName = "triggerType"
		} else {
			triggerTypeFlagName = fmt.Sprintf("%v.triggerType", cmdPrefix)
		}

		triggerTypeFlagValue, err := cmd.Flags().GetString(triggerTypeFlagName)
		if err != nil {
			return err, false
		}
		m.TriggerType = triggerTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFetchTasksModelPropWorkspaceIDFlags(depth int, m *models.FetchTasksModel, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdFlagName := fmt.Sprintf("%v.workspaceId", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdFlagName) {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = workspaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
