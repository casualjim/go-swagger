// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for JobExecutionStatus

// register flags to command
func registerModelJobExecutionStatusFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerJobExecutionStatusPropAccountID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropContainerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropEnvironmentVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropErrorMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropErrorType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropExecutionDestination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropExecutionStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropExecutionType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropFinishTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropJobID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropJobVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropNumberOfProcessedRows(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropNumberOfRejectedRows(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropPlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropRemoteEngineClusterID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropRemoteEngineID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropRunProfileID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropStartTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropTriggerTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropUserType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerJobExecutionStatusPropWorkspaceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerJobExecutionStatusPropAccountID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accountIdDescription := `Required. Account ID`

	var accountIdFlagName string
	if cmdPrefix == "" {
		accountIdFlagName = "accountId"
	} else {
		accountIdFlagName = fmt.Sprintf("%v.accountId", cmdPrefix)
	}

	var accountIdFlagDefault string

	_ = cmd.PersistentFlags().String(accountIdFlagName, accountIdFlagDefault, accountIdDescription)

	return nil
}

func registerJobExecutionStatusPropContainerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	containerIdDescription := `Container ID`

	var containerIdFlagName string
	if cmdPrefix == "" {
		containerIdFlagName = "containerId"
	} else {
		containerIdFlagName = fmt.Sprintf("%v.containerId", cmdPrefix)
	}

	var containerIdFlagDefault string

	_ = cmd.PersistentFlags().String(containerIdFlagName, containerIdFlagDefault, containerIdDescription)

	return nil
}

func registerJobExecutionStatusPropEnvironmentVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	environmentVersionDescription := `Enum: ["1.2","1.3"]. Required. Execution environment version`

	var environmentVersionFlagName string
	if cmdPrefix == "" {
		environmentVersionFlagName = "environmentVersion"
	} else {
		environmentVersionFlagName = fmt.Sprintf("%v.environmentVersion", cmdPrefix)
	}

	var environmentVersionFlagDefault string

	_ = cmd.PersistentFlags().String(environmentVersionFlagName, environmentVersionFlagDefault, environmentVersionDescription)

	if err := cmd.RegisterFlagCompletionFunc(environmentVersionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["1.2","1.3"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerJobExecutionStatusPropErrorMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorMessageDescription := `Error message if error occurs`

	var errorMessageFlagName string
	if cmdPrefix == "" {
		errorMessageFlagName = "errorMessage"
	} else {
		errorMessageFlagName = fmt.Sprintf("%v.errorMessage", cmdPrefix)
	}

	var errorMessageFlagDefault string

	_ = cmd.PersistentFlags().String(errorMessageFlagName, errorMessageFlagDefault, errorMessageDescription)

	return nil
}

func registerJobExecutionStatusPropErrorType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorTypeDescription := `Error type if error occurs`

	var errorTypeFlagName string
	if cmdPrefix == "" {
		errorTypeFlagName = "errorType"
	} else {
		errorTypeFlagName = fmt.Sprintf("%v.errorType", cmdPrefix)
	}

	var errorTypeFlagDefault string

	_ = cmd.PersistentFlags().String(errorTypeFlagName, errorTypeFlagDefault, errorTypeDescription)

	return nil
}

func registerJobExecutionStatusPropExecutionDestination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionDestinationDescription := `Enum: ["CLOUD","CLOUD_EXCLUSIVE","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER"]. Required. Destination of execution`

	var executionDestinationFlagName string
	if cmdPrefix == "" {
		executionDestinationFlagName = "executionDestination"
	} else {
		executionDestinationFlagName = fmt.Sprintf("%v.executionDestination", cmdPrefix)
	}

	var executionDestinationFlagDefault string

	_ = cmd.PersistentFlags().String(executionDestinationFlagName, executionDestinationFlagDefault, executionDestinationDescription)

	if err := cmd.RegisterFlagCompletionFunc(executionDestinationFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["CLOUD","CLOUD_EXCLUSIVE","REMOTE_ENGINE","REMOTE_ENGINE_CLUSTER"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerJobExecutionStatusPropExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := `Required. Job execution ID`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "executionId"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
	}

	var executionIdFlagDefault string

	_ = cmd.PersistentFlags().String(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerJobExecutionStatusPropExecutionStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionStatusDescription := `Enum: ["EXECUTION_EVENT_RECEIVED","DISPATCHING_FLOW","STARTING_FLOW_EXECUTION","STOPPING_FLOW_EXECUTION","EXECUTION_TERMINATED","EXECUTION_TERMINATED_TIMEOUT","DEPLOY_FAILED","EXECUTION_FAILED","EXECUTION_REJECTED","EXECUTION_SUCCESS"]. Required. Execution status`

	var executionStatusFlagName string
	if cmdPrefix == "" {
		executionStatusFlagName = "executionStatus"
	} else {
		executionStatusFlagName = fmt.Sprintf("%v.executionStatus", cmdPrefix)
	}

	var executionStatusFlagDefault string

	_ = cmd.PersistentFlags().String(executionStatusFlagName, executionStatusFlagDefault, executionStatusDescription)

	if err := cmd.RegisterFlagCompletionFunc(executionStatusFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["EXECUTION_EVENT_RECEIVED","DISPATCHING_FLOW","STARTING_FLOW_EXECUTION","STOPPING_FLOW_EXECUTION","EXECUTION_TERMINATED","EXECUTION_TERMINATED_TIMEOUT","DEPLOY_FAILED","EXECUTION_FAILED","EXECUTION_REJECTED","EXECUTION_SUCCESS"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerJobExecutionStatusPropExecutionType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionTypeDescription := `Enum: ["MANUAL","SCHEDULED","WEBHOOK","PLAN"]. Required. Execution type`

	var executionTypeFlagName string
	if cmdPrefix == "" {
		executionTypeFlagName = "executionType"
	} else {
		executionTypeFlagName = fmt.Sprintf("%v.executionType", cmdPrefix)
	}

	var executionTypeFlagDefault string

	_ = cmd.PersistentFlags().String(executionTypeFlagName, executionTypeFlagDefault, executionTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(executionTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["MANUAL","SCHEDULED","WEBHOOK","PLAN"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerJobExecutionStatusPropFinishTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	finishTimestampDescription := `End time of job execution (UTC)`

	var finishTimestampFlagName string
	if cmdPrefix == "" {
		finishTimestampFlagName = "finishTimestamp"
	} else {
		finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(finishTimestampFlagName, "", finishTimestampDescription)

	return nil
}

func registerJobExecutionStatusPropJobID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobIdDescription := `Required. Job ID`

	var jobIdFlagName string
	if cmdPrefix == "" {
		jobIdFlagName = "jobId"
	} else {
		jobIdFlagName = fmt.Sprintf("%v.jobId", cmdPrefix)
	}

	var jobIdFlagDefault string

	_ = cmd.PersistentFlags().String(jobIdFlagName, jobIdFlagDefault, jobIdDescription)

	return nil
}

func registerJobExecutionStatusPropJobVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobVersionDescription := `Required. The version of the executed job`

	var jobVersionFlagName string
	if cmdPrefix == "" {
		jobVersionFlagName = "jobVersion"
	} else {
		jobVersionFlagName = fmt.Sprintf("%v.jobVersion", cmdPrefix)
	}

	var jobVersionFlagDefault string

	_ = cmd.PersistentFlags().String(jobVersionFlagName, jobVersionFlagDefault, jobVersionDescription)

	return nil
}

func registerJobExecutionStatusPropNumberOfProcessedRows(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberOfProcessedRowsDescription := `Number of processed rows`

	var numberOfProcessedRowsFlagName string
	if cmdPrefix == "" {
		numberOfProcessedRowsFlagName = "numberOfProcessedRows"
	} else {
		numberOfProcessedRowsFlagName = fmt.Sprintf("%v.numberOfProcessedRows", cmdPrefix)
	}

	var numberOfProcessedRowsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(numberOfProcessedRowsFlagName, numberOfProcessedRowsFlagDefault, numberOfProcessedRowsDescription)

	return nil
}

func registerJobExecutionStatusPropNumberOfRejectedRows(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	numberOfRejectedRowsDescription := `Number of rejected rows`

	var numberOfRejectedRowsFlagName string
	if cmdPrefix == "" {
		numberOfRejectedRowsFlagName = "numberOfRejectedRows"
	} else {
		numberOfRejectedRowsFlagName = fmt.Sprintf("%v.numberOfRejectedRows", cmdPrefix)
	}

	var numberOfRejectedRowsFlagDefault int64

	_ = cmd.PersistentFlags().Int64(numberOfRejectedRowsFlagName, numberOfRejectedRowsFlagDefault, numberOfRejectedRowsDescription)

	return nil
}

func registerJobExecutionStatusPropPlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	planIdDescription := `Plan execution ID`

	var planIdFlagName string
	if cmdPrefix == "" {
		planIdFlagName = "planId"
	} else {
		planIdFlagName = fmt.Sprintf("%v.planId", cmdPrefix)
	}

	var planIdFlagDefault string

	_ = cmd.PersistentFlags().String(planIdFlagName, planIdFlagDefault, planIdDescription)

	return nil
}

func registerJobExecutionStatusPropRemoteEngineClusterID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteEngineClusterIdDescription := `Remote engine cluster ID`

	var remoteEngineClusterIdFlagName string
	if cmdPrefix == "" {
		remoteEngineClusterIdFlagName = "remoteEngineClusterId"
	} else {
		remoteEngineClusterIdFlagName = fmt.Sprintf("%v.remoteEngineClusterId", cmdPrefix)
	}

	var remoteEngineClusterIdFlagDefault string

	_ = cmd.PersistentFlags().String(remoteEngineClusterIdFlagName, remoteEngineClusterIdFlagDefault, remoteEngineClusterIdDescription)

	return nil
}

func registerJobExecutionStatusPropRemoteEngineID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	remoteEngineIdDescription := `Remote engine ID`

	var remoteEngineIdFlagName string
	if cmdPrefix == "" {
		remoteEngineIdFlagName = "remoteEngineId"
	} else {
		remoteEngineIdFlagName = fmt.Sprintf("%v.remoteEngineId", cmdPrefix)
	}

	var remoteEngineIdFlagDefault string

	_ = cmd.PersistentFlags().String(remoteEngineIdFlagName, remoteEngineIdFlagDefault, remoteEngineIdDescription)

	return nil
}

func registerJobExecutionStatusPropRunProfileID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runProfileIdDescription := `Run profile ID`

	var runProfileIdFlagName string
	if cmdPrefix == "" {
		runProfileIdFlagName = "runProfileId"
	} else {
		runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
	}

	var runProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(runProfileIdFlagName, runProfileIdFlagDefault, runProfileIdDescription)

	return nil
}

func registerJobExecutionStatusPropStartTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimestampDescription := `Required. Start time of job execution (UTC)`

	var startTimestampFlagName string
	if cmdPrefix == "" {
		startTimestampFlagName = "startTimestamp"
	} else {
		startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startTimestampFlagName, "", startTimestampDescription)

	return nil
}

func registerJobExecutionStatusPropTriggerTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerTimestampDescription := `Required. Trigger time of job execution (UTC)`

	var triggerTimestampFlagName string
	if cmdPrefix == "" {
		triggerTimestampFlagName = "triggerTimestamp"
	} else {
		triggerTimestampFlagName = fmt.Sprintf("%v.triggerTimestamp", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(triggerTimestampFlagName, "", triggerTimestampDescription)

	return nil
}

func registerJobExecutionStatusPropUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := `Required. User who triggered or scheduled the execution`

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "userId"
	} else {
		userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
	}

	var userIdFlagDefault string

	_ = cmd.PersistentFlags().String(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

func registerJobExecutionStatusPropUserType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userTypeDescription := `Enum: ["HUMAN","SERVICE"]. Required. Type of user who triggered or scheduled the execution`

	var userTypeFlagName string
	if cmdPrefix == "" {
		userTypeFlagName = "userType"
	} else {
		userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
	}

	var userTypeFlagDefault string

	_ = cmd.PersistentFlags().String(userTypeFlagName, userTypeFlagDefault, userTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(userTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerJobExecutionStatusPropWorkspaceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	workspaceIdDescription := `Required. Workspace ID`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelJobExecutionStatusFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accountIdAdded := retrieveJobExecutionStatusPropAccountIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accountIdAdded

	err, containerIdAdded := retrieveJobExecutionStatusPropContainerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || containerIdAdded

	err, environmentVersionAdded := retrieveJobExecutionStatusPropEnvironmentVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || environmentVersionAdded

	err, errorMessageAdded := retrieveJobExecutionStatusPropErrorMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorMessageAdded

	err, errorTypeAdded := retrieveJobExecutionStatusPropErrorTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorTypeAdded

	err, executionDestinationAdded := retrieveJobExecutionStatusPropExecutionDestinationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionDestinationAdded

	err, executionIdAdded := retrieveJobExecutionStatusPropExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, executionStatusAdded := retrieveJobExecutionStatusPropExecutionStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionStatusAdded

	err, executionTypeAdded := retrieveJobExecutionStatusPropExecutionTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionTypeAdded

	err, finishTimestampAdded := retrieveJobExecutionStatusPropFinishTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || finishTimestampAdded

	err, jobIdAdded := retrieveJobExecutionStatusPropJobIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobIdAdded

	err, jobVersionAdded := retrieveJobExecutionStatusPropJobVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobVersionAdded

	err, numberOfProcessedRowsAdded := retrieveJobExecutionStatusPropNumberOfProcessedRowsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberOfProcessedRowsAdded

	err, numberOfRejectedRowsAdded := retrieveJobExecutionStatusPropNumberOfRejectedRowsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || numberOfRejectedRowsAdded

	err, planIdAdded := retrieveJobExecutionStatusPropPlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || planIdAdded

	err, remoteEngineClusterIdAdded := retrieveJobExecutionStatusPropRemoteEngineClusterIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteEngineClusterIdAdded

	err, remoteEngineIdAdded := retrieveJobExecutionStatusPropRemoteEngineIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || remoteEngineIdAdded

	err, runProfileIdAdded := retrieveJobExecutionStatusPropRunProfileIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runProfileIdAdded

	err, startTimestampAdded := retrieveJobExecutionStatusPropStartTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimestampAdded

	err, triggerTimestampAdded := retrieveJobExecutionStatusPropTriggerTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerTimestampAdded

	err, userIdAdded := retrieveJobExecutionStatusPropUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	err, userTypeAdded := retrieveJobExecutionStatusPropUserTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userTypeAdded

	err, workspaceIdAdded := retrieveJobExecutionStatusPropWorkspaceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || workspaceIdAdded

	return nil, retAdded
}

func retrieveJobExecutionStatusPropAccountIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accountIdFlagName := fmt.Sprintf("%v.accountId", cmdPrefix)
	if cmd.Flags().Changed(accountIdFlagName) {

		var accountIdFlagName string
		if cmdPrefix == "" {
			accountIdFlagName = "accountId"
		} else {
			accountIdFlagName = fmt.Sprintf("%v.accountId", cmdPrefix)
		}

		accountIdFlagValue, err := cmd.Flags().GetString(accountIdFlagName)
		if err != nil {
			return err, false
		}
		m.AccountID = &accountIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropContainerIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	containerIdFlagName := fmt.Sprintf("%v.containerId", cmdPrefix)
	if cmd.Flags().Changed(containerIdFlagName) {

		var containerIdFlagName string
		if cmdPrefix == "" {
			containerIdFlagName = "containerId"
		} else {
			containerIdFlagName = fmt.Sprintf("%v.containerId", cmdPrefix)
		}

		containerIdFlagValue, err := cmd.Flags().GetString(containerIdFlagName)
		if err != nil {
			return err, false
		}
		m.ContainerID = containerIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropEnvironmentVersionFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	environmentVersionFlagName := fmt.Sprintf("%v.environmentVersion", cmdPrefix)
	if cmd.Flags().Changed(environmentVersionFlagName) {

		var environmentVersionFlagName string
		if cmdPrefix == "" {
			environmentVersionFlagName = "environmentVersion"
		} else {
			environmentVersionFlagName = fmt.Sprintf("%v.environmentVersion", cmdPrefix)
		}

		environmentVersionFlagValue, err := cmd.Flags().GetString(environmentVersionFlagName)
		if err != nil {
			return err, false
		}
		m.EnvironmentVersion = &environmentVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropErrorMessageFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorMessageFlagName := fmt.Sprintf("%v.errorMessage", cmdPrefix)
	if cmd.Flags().Changed(errorMessageFlagName) {

		var errorMessageFlagName string
		if cmdPrefix == "" {
			errorMessageFlagName = "errorMessage"
		} else {
			errorMessageFlagName = fmt.Sprintf("%v.errorMessage", cmdPrefix)
		}

		errorMessageFlagValue, err := cmd.Flags().GetString(errorMessageFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorMessage = errorMessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropErrorTypeFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorTypeFlagName := fmt.Sprintf("%v.errorType", cmdPrefix)
	if cmd.Flags().Changed(errorTypeFlagName) {

		var errorTypeFlagName string
		if cmdPrefix == "" {
			errorTypeFlagName = "errorType"
		} else {
			errorTypeFlagName = fmt.Sprintf("%v.errorType", cmdPrefix)
		}

		errorTypeFlagValue, err := cmd.Flags().GetString(errorTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ErrorType = errorTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropExecutionDestinationFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionDestinationFlagName := fmt.Sprintf("%v.executionDestination", cmdPrefix)
	if cmd.Flags().Changed(executionDestinationFlagName) {

		var executionDestinationFlagName string
		if cmdPrefix == "" {
			executionDestinationFlagName = "executionDestination"
		} else {
			executionDestinationFlagName = fmt.Sprintf("%v.executionDestination", cmdPrefix)
		}

		executionDestinationFlagValue, err := cmd.Flags().GetString(executionDestinationFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionDestination = &executionDestinationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropExecutionIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.executionId", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "executionId"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.executionId", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetString(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = &executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropExecutionStatusFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionStatusFlagName := fmt.Sprintf("%v.executionStatus", cmdPrefix)
	if cmd.Flags().Changed(executionStatusFlagName) {

		var executionStatusFlagName string
		if cmdPrefix == "" {
			executionStatusFlagName = "executionStatus"
		} else {
			executionStatusFlagName = fmt.Sprintf("%v.executionStatus", cmdPrefix)
		}

		executionStatusFlagValue, err := cmd.Flags().GetString(executionStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionStatus = &executionStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropExecutionTypeFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionTypeFlagName := fmt.Sprintf("%v.executionType", cmdPrefix)
	if cmd.Flags().Changed(executionTypeFlagName) {

		var executionTypeFlagName string
		if cmdPrefix == "" {
			executionTypeFlagName = "executionType"
		} else {
			executionTypeFlagName = fmt.Sprintf("%v.executionType", cmdPrefix)
		}

		executionTypeFlagValue, err := cmd.Flags().GetString(executionTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionType = &executionTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropFinishTimestampFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	finishTimestampFlagName := fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
	if cmd.Flags().Changed(finishTimestampFlagName) {

		var finishTimestampFlagName string
		if cmdPrefix == "" {
			finishTimestampFlagName = "finishTimestamp"
		} else {
			finishTimestampFlagName = fmt.Sprintf("%v.finishTimestamp", cmdPrefix)
		}

		finishTimestampFlagValueStr, err := cmd.Flags().GetString(finishTimestampFlagName)
		if err != nil {
			return err, false
		}
		var finishTimestampFlagValue strfmt.DateTime
		if err := finishTimestampFlagValue.UnmarshalText([]byte(finishTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.FinishTimestamp = finishTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropJobIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobIdFlagName := fmt.Sprintf("%v.jobId", cmdPrefix)
	if cmd.Flags().Changed(jobIdFlagName) {

		var jobIdFlagName string
		if cmdPrefix == "" {
			jobIdFlagName = "jobId"
		} else {
			jobIdFlagName = fmt.Sprintf("%v.jobId", cmdPrefix)
		}

		jobIdFlagValue, err := cmd.Flags().GetString(jobIdFlagName)
		if err != nil {
			return err, false
		}
		m.JobID = &jobIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropJobVersionFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobVersionFlagName := fmt.Sprintf("%v.jobVersion", cmdPrefix)
	if cmd.Flags().Changed(jobVersionFlagName) {

		var jobVersionFlagName string
		if cmdPrefix == "" {
			jobVersionFlagName = "jobVersion"
		} else {
			jobVersionFlagName = fmt.Sprintf("%v.jobVersion", cmdPrefix)
		}

		jobVersionFlagValue, err := cmd.Flags().GetString(jobVersionFlagName)
		if err != nil {
			return err, false
		}
		m.JobVersion = &jobVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropNumberOfProcessedRowsFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberOfProcessedRowsFlagName := fmt.Sprintf("%v.numberOfProcessedRows", cmdPrefix)
	if cmd.Flags().Changed(numberOfProcessedRowsFlagName) {

		var numberOfProcessedRowsFlagName string
		if cmdPrefix == "" {
			numberOfProcessedRowsFlagName = "numberOfProcessedRows"
		} else {
			numberOfProcessedRowsFlagName = fmt.Sprintf("%v.numberOfProcessedRows", cmdPrefix)
		}

		numberOfProcessedRowsFlagValue, err := cmd.Flags().GetInt64(numberOfProcessedRowsFlagName)
		if err != nil {
			return err, false
		}
		m.NumberOfProcessedRows = numberOfProcessedRowsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropNumberOfRejectedRowsFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	numberOfRejectedRowsFlagName := fmt.Sprintf("%v.numberOfRejectedRows", cmdPrefix)
	if cmd.Flags().Changed(numberOfRejectedRowsFlagName) {

		var numberOfRejectedRowsFlagName string
		if cmdPrefix == "" {
			numberOfRejectedRowsFlagName = "numberOfRejectedRows"
		} else {
			numberOfRejectedRowsFlagName = fmt.Sprintf("%v.numberOfRejectedRows", cmdPrefix)
		}

		numberOfRejectedRowsFlagValue, err := cmd.Flags().GetInt64(numberOfRejectedRowsFlagName)
		if err != nil {
			return err, false
		}
		m.NumberOfRejectedRows = numberOfRejectedRowsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropPlanIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	planIdFlagName := fmt.Sprintf("%v.planId", cmdPrefix)
	if cmd.Flags().Changed(planIdFlagName) {

		var planIdFlagName string
		if cmdPrefix == "" {
			planIdFlagName = "planId"
		} else {
			planIdFlagName = fmt.Sprintf("%v.planId", cmdPrefix)
		}

		planIdFlagValue, err := cmd.Flags().GetString(planIdFlagName)
		if err != nil {
			return err, false
		}
		m.PlanID = planIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropRemoteEngineClusterIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteEngineClusterIdFlagName := fmt.Sprintf("%v.remoteEngineClusterId", cmdPrefix)
	if cmd.Flags().Changed(remoteEngineClusterIdFlagName) {

		var remoteEngineClusterIdFlagName string
		if cmdPrefix == "" {
			remoteEngineClusterIdFlagName = "remoteEngineClusterId"
		} else {
			remoteEngineClusterIdFlagName = fmt.Sprintf("%v.remoteEngineClusterId", cmdPrefix)
		}

		remoteEngineClusterIdFlagValue, err := cmd.Flags().GetString(remoteEngineClusterIdFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteEngineClusterID = remoteEngineClusterIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropRemoteEngineIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	remoteEngineIdFlagName := fmt.Sprintf("%v.remoteEngineId", cmdPrefix)
	if cmd.Flags().Changed(remoteEngineIdFlagName) {

		var remoteEngineIdFlagName string
		if cmdPrefix == "" {
			remoteEngineIdFlagName = "remoteEngineId"
		} else {
			remoteEngineIdFlagName = fmt.Sprintf("%v.remoteEngineId", cmdPrefix)
		}

		remoteEngineIdFlagValue, err := cmd.Flags().GetString(remoteEngineIdFlagName)
		if err != nil {
			return err, false
		}
		m.RemoteEngineID = remoteEngineIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropRunProfileIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runProfileIdFlagName := fmt.Sprintf("%v.runProfileId", cmdPrefix)
	if cmd.Flags().Changed(runProfileIdFlagName) {

		var runProfileIdFlagName string
		if cmdPrefix == "" {
			runProfileIdFlagName = "runProfileId"
		} else {
			runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
		}

		runProfileIdFlagValue, err := cmd.Flags().GetString(runProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.RunProfileID = runProfileIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropStartTimestampFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimestampFlagName := fmt.Sprintf("%v.startTimestamp", cmdPrefix)
	if cmd.Flags().Changed(startTimestampFlagName) {

		var startTimestampFlagName string
		if cmdPrefix == "" {
			startTimestampFlagName = "startTimestamp"
		} else {
			startTimestampFlagName = fmt.Sprintf("%v.startTimestamp", cmdPrefix)
		}

		startTimestampFlagValueStr, err := cmd.Flags().GetString(startTimestampFlagName)
		if err != nil {
			return err, false
		}
		var startTimestampFlagValue strfmt.DateTime
		if err := startTimestampFlagValue.UnmarshalText([]byte(startTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.StartTimestamp = &startTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropTriggerTimestampFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerTimestampFlagName := fmt.Sprintf("%v.triggerTimestamp", cmdPrefix)
	if cmd.Flags().Changed(triggerTimestampFlagName) {

		var triggerTimestampFlagName string
		if cmdPrefix == "" {
			triggerTimestampFlagName = "triggerTimestamp"
		} else {
			triggerTimestampFlagName = fmt.Sprintf("%v.triggerTimestamp", cmdPrefix)
		}

		triggerTimestampFlagValueStr, err := cmd.Flags().GetString(triggerTimestampFlagName)
		if err != nil {
			return err, false
		}
		var triggerTimestampFlagValue strfmt.DateTime
		if err := triggerTimestampFlagValue.UnmarshalText([]byte(triggerTimestampFlagValueStr)); err != nil {
			return err, false
		}
		m.TriggerTimestamp = &triggerTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropUserIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.userId", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "userId"
		} else {
			userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetString(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = &userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropUserTypeFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userTypeFlagName := fmt.Sprintf("%v.userType", cmdPrefix)
	if cmd.Flags().Changed(userTypeFlagName) {

		var userTypeFlagName string
		if cmdPrefix == "" {
			userTypeFlagName = "userType"
		} else {
			userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
		}

		userTypeFlagValue, err := cmd.Flags().GetString(userTypeFlagName)
		if err != nil {
			return err, false
		}
		m.UserType = &userTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveJobExecutionStatusPropWorkspaceIDFlags(depth int, m *models.JobExecutionStatus, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	workspaceIdFlagName := fmt.Sprintf("%v.workspaceId", cmdPrefix)
	if cmd.Flags().Changed(workspaceIdFlagName) {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = &workspaceIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
