// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/environments"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEnvironmentsGetEnvironmentsCmd returns a command to handle operation getEnvironments
func makeOperationEnvironmentsGetEnvironmentsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getEnvironments",
		Short: `Get available environments`,
		RunE:  runOperationEnvironmentsGetEnvironments,
	}

	if err := registerOperationEnvironmentsGetEnvironmentsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEnvironmentsGetEnvironments uses cmd flags to call endpoint api
func runOperationEnvironmentsGetEnvironments(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := environments.NewGetEnvironmentsParams()
	if err, _ = retrieveOperationEnvironmentsGetEnvironmentsQueryFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEnvironmentsGetEnvironmentsResult(appCli.Environments.GetEnvironments(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationEnvironmentsGetEnvironmentsParamFlags registers all flags needed to fill params
func registerOperationEnvironmentsGetEnvironmentsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEnvironmentsGetEnvironmentsQueryParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEnvironmentsGetEnvironmentsQueryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	queryDescription := `search query (FIQL format), e.g. name==Dev*;description==*environment*`

	var queryFlagName string
	if cmdPrefix == "" {
		queryFlagName = "query"
	} else {
		queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
	}

	var queryFlagDefault string

	_ = cmd.PersistentFlags().String(queryFlagName, queryFlagDefault, queryDescription)

	return nil
}

func retrieveOperationEnvironmentsGetEnvironmentsQueryFlag(m *environments.GetEnvironmentsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("query") {

		var queryFlagName string
		if cmdPrefix == "" {
			queryFlagName = "query"
		} else {
			queryFlagName = fmt.Sprintf("%v.query", cmdPrefix)
		}

		queryFlagValue, err := cmd.Flags().GetString(queryFlagName)
		if err != nil {
			return err, false
		}
		m.Query = &queryFlagValue

	}

	return nil, retAdded
}

// parseOperationEnvironmentsGetEnvironmentsResult parses request result and return the string content
func parseOperationEnvironmentsGetEnvironmentsResult(resp0 *environments.GetEnvironmentsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*environments.GetEnvironmentsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*environments.GetEnvironmentsUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*environments.GetEnvironmentsForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*environments.GetEnvironmentsInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
