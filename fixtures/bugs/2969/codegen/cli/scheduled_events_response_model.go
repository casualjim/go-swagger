// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for ScheduledEventsResponse

// register flags to command
func registerModelScheduledEventsResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerScheduledEventsResponsePropDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsResponsePropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsResponsePropSourceTriggerName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduledEventsResponsePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerScheduledEventsResponsePropDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dateDescription := `The Trigger's date for the event`

	var dateFlagName string
	if cmdPrefix == "" {
		dateFlagName = "date"
	} else {
		dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(dateFlagName, "", dateDescription)

	return nil
}

func registerScheduledEventsResponsePropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The entity's id for this event`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerScheduledEventsResponsePropSourceTriggerName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sourceTriggerNameDescription := `The source trigger's name (only for schedule for multiple triggers)`

	var sourceTriggerNameFlagName string
	if cmdPrefix == "" {
		sourceTriggerNameFlagName = "sourceTriggerName"
	} else {
		sourceTriggerNameFlagName = fmt.Sprintf("%v.sourceTriggerName", cmdPrefix)
	}

	var sourceTriggerNameFlagDefault string

	_ = cmd.PersistentFlags().String(sourceTriggerNameFlagName, sourceTriggerNameFlagDefault, sourceTriggerNameDescription)

	return nil
}

func registerScheduledEventsResponsePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["TASK","PLAN"]. The entity's type for the event`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["TASK","PLAN"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelScheduledEventsResponseFlags(depth int, m *models.ScheduledEventsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dateAdded := retrieveScheduledEventsResponsePropDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dateAdded

	err, idAdded := retrieveScheduledEventsResponsePropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, sourceTriggerNameAdded := retrieveScheduledEventsResponsePropSourceTriggerNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sourceTriggerNameAdded

	err, typeAdded := retrieveScheduledEventsResponsePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveScheduledEventsResponsePropDateFlags(depth int, m *models.ScheduledEventsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dateFlagName := fmt.Sprintf("%v.date", cmdPrefix)
	if cmd.Flags().Changed(dateFlagName) {

		var dateFlagName string
		if cmdPrefix == "" {
			dateFlagName = "date"
		} else {
			dateFlagName = fmt.Sprintf("%v.date", cmdPrefix)
		}

		dateFlagValueStr, err := cmd.Flags().GetString(dateFlagName)
		if err != nil {
			return err, false
		}
		var dateFlagValue strfmt.DateTime
		if err := dateFlagValue.UnmarshalText([]byte(dateFlagValueStr)); err != nil {
			return err, false
		}
		m.Date = dateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsResponsePropIDFlags(depth int, m *models.ScheduledEventsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsResponsePropSourceTriggerNameFlags(depth int, m *models.ScheduledEventsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sourceTriggerNameFlagName := fmt.Sprintf("%v.sourceTriggerName", cmdPrefix)
	if cmd.Flags().Changed(sourceTriggerNameFlagName) {

		var sourceTriggerNameFlagName string
		if cmdPrefix == "" {
			sourceTriggerNameFlagName = "sourceTriggerName"
		} else {
			sourceTriggerNameFlagName = fmt.Sprintf("%v.sourceTriggerName", cmdPrefix)
		}

		sourceTriggerNameFlagValue, err := cmd.Flags().GetString(sourceTriggerNameFlagName)
		if err != nil {
			return err, false
		}
		m.SourceTriggerName = sourceTriggerNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduledEventsResponsePropTypeFlags(depth int, m *models.ScheduledEventsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
