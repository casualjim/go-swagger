// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for Subscription

// register flags to command
func registerModelSubscriptionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSubscriptionPropApplications(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubscriptionPropEndDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubscriptionPropEnginesStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubscriptionPropLicenseType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubscriptionPropSeats(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubscriptionPropStartDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubscriptionPropSupportLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSubscriptionPropTokensStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSubscriptionPropApplications(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: applications []string array type is not supported by go-swagger cli yet

	return nil
}

func registerSubscriptionPropEndDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endDateDescription := `Required. Subscription end date`

	var endDateFlagName string
	if cmdPrefix == "" {
		endDateFlagName = "endDate"
	} else {
		endDateFlagName = fmt.Sprintf("%v.endDate", cmdPrefix)
	}

	var endDateFlagDefault string

	_ = cmd.PersistentFlags().String(endDateFlagName, endDateFlagDefault, endDateDescription)

	return nil
}

func registerSubscriptionPropEnginesStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: enginesStatus []*EngineStatus array type is not supported by go-swagger cli yet

	return nil
}

func registerSubscriptionPropLicenseType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	licenseTypeDescription := `Required. License type`

	var licenseTypeFlagName string
	if cmdPrefix == "" {
		licenseTypeFlagName = "licenseType"
	} else {
		licenseTypeFlagName = fmt.Sprintf("%v.licenseType", cmdPrefix)
	}

	var licenseTypeFlagDefault string

	_ = cmd.PersistentFlags().String(licenseTypeFlagName, licenseTypeFlagDefault, licenseTypeDescription)

	return nil
}

func registerSubscriptionPropSeats(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: seats []*Seat array type is not supported by go-swagger cli yet

	return nil
}

func registerSubscriptionPropStartDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startDateDescription := `Required. Subscription start date`

	var startDateFlagName string
	if cmdPrefix == "" {
		startDateFlagName = "startDate"
	} else {
		startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
	}

	var startDateFlagDefault string

	_ = cmd.PersistentFlags().String(startDateFlagName, startDateFlagDefault, startDateDescription)

	return nil
}

func registerSubscriptionPropSupportLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	supportLevelDescription := `Required. Level of support`

	var supportLevelFlagName string
	if cmdPrefix == "" {
		supportLevelFlagName = "supportLevel"
	} else {
		supportLevelFlagName = fmt.Sprintf("%v.supportLevel", cmdPrefix)
	}

	var supportLevelFlagDefault string

	_ = cmd.PersistentFlags().String(supportLevelFlagName, supportLevelFlagDefault, supportLevelDescription)

	return nil
}

func registerSubscriptionPropTokensStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tokensStatusFlagName string
	if cmdPrefix == "" {
		tokensStatusFlagName = "tokensStatus"
	} else {
		tokensStatusFlagName = fmt.Sprintf("%v.tokensStatus", cmdPrefix)
	}

	if err := registerModelTokensStatusFlags(depth+1, tokensStatusFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSubscriptionFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, applicationsAdded := retrieveSubscriptionPropApplicationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || applicationsAdded

	err, endDateAdded := retrieveSubscriptionPropEndDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endDateAdded

	err, enginesStatusAdded := retrieveSubscriptionPropEnginesStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enginesStatusAdded

	err, licenseTypeAdded := retrieveSubscriptionPropLicenseTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || licenseTypeAdded

	err, seatsAdded := retrieveSubscriptionPropSeatsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || seatsAdded

	err, startDateAdded := retrieveSubscriptionPropStartDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startDateAdded

	err, supportLevelAdded := retrieveSubscriptionPropSupportLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || supportLevelAdded

	err, tokensStatusAdded := retrieveSubscriptionPropTokensStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokensStatusAdded

	return nil, retAdded
}

func retrieveSubscriptionPropApplicationsFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	applicationsFlagName := fmt.Sprintf("%v.applications", cmdPrefix)
	if cmd.Flags().Changed(applicationsFlagName) {
		// warning: applications array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSubscriptionPropEndDateFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endDateFlagName := fmt.Sprintf("%v.endDate", cmdPrefix)
	if cmd.Flags().Changed(endDateFlagName) {

		var endDateFlagName string
		if cmdPrefix == "" {
			endDateFlagName = "endDate"
		} else {
			endDateFlagName = fmt.Sprintf("%v.endDate", cmdPrefix)
		}

		endDateFlagValue, err := cmd.Flags().GetString(endDateFlagName)
		if err != nil {
			return err, false
		}
		m.EndDate = &endDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubscriptionPropEnginesStatusFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enginesStatusFlagName := fmt.Sprintf("%v.enginesStatus", cmdPrefix)
	if cmd.Flags().Changed(enginesStatusFlagName) {
		// warning: enginesStatus array type []*EngineStatus is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSubscriptionPropLicenseTypeFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	licenseTypeFlagName := fmt.Sprintf("%v.licenseType", cmdPrefix)
	if cmd.Flags().Changed(licenseTypeFlagName) {

		var licenseTypeFlagName string
		if cmdPrefix == "" {
			licenseTypeFlagName = "licenseType"
		} else {
			licenseTypeFlagName = fmt.Sprintf("%v.licenseType", cmdPrefix)
		}

		licenseTypeFlagValue, err := cmd.Flags().GetString(licenseTypeFlagName)
		if err != nil {
			return err, false
		}
		m.LicenseType = &licenseTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubscriptionPropSeatsFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	seatsFlagName := fmt.Sprintf("%v.seats", cmdPrefix)
	if cmd.Flags().Changed(seatsFlagName) {
		// warning: seats array type []*Seat is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSubscriptionPropStartDateFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startDateFlagName := fmt.Sprintf("%v.startDate", cmdPrefix)
	if cmd.Flags().Changed(startDateFlagName) {

		var startDateFlagName string
		if cmdPrefix == "" {
			startDateFlagName = "startDate"
		} else {
			startDateFlagName = fmt.Sprintf("%v.startDate", cmdPrefix)
		}

		startDateFlagValue, err := cmd.Flags().GetString(startDateFlagName)
		if err != nil {
			return err, false
		}
		m.StartDate = &startDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubscriptionPropSupportLevelFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	supportLevelFlagName := fmt.Sprintf("%v.supportLevel", cmdPrefix)
	if cmd.Flags().Changed(supportLevelFlagName) {

		var supportLevelFlagName string
		if cmdPrefix == "" {
			supportLevelFlagName = "supportLevel"
		} else {
			supportLevelFlagName = fmt.Sprintf("%v.supportLevel", cmdPrefix)
		}

		supportLevelFlagValue, err := cmd.Flags().GetString(supportLevelFlagName)
		if err != nil {
			return err, false
		}
		m.SupportLevel = &supportLevelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSubscriptionPropTokensStatusFlags(depth int, m *models.Subscription, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokensStatusFlagName := fmt.Sprintf("%v.tokensStatus", cmdPrefix)
	if cmd.Flags().Changed(tokensStatusFlagName) {
		// info: complex object tokensStatus TokensStatus is retrieved outside this Changed() block
	}
	tokensStatusFlagValue := m.TokensStatus
	if swag.IsZero(tokensStatusFlagValue) {
		tokensStatusFlagValue = &models.TokensStatus{}
	}

	err, tokensStatusAdded := retrieveModelTokensStatusFlags(depth+1, tokensStatusFlagValue, tokensStatusFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokensStatusAdded
	if tokensStatusAdded {
		m.TokensStatus = tokensStatusFlagValue
	}

	return nil, retAdded
}
