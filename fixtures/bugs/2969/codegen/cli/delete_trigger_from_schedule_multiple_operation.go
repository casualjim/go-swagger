// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/schedules"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationSchedulesDeleteTriggerFromScheduleMultipleCmd returns a command to handle operation deleteTriggerFromScheduleMultiple
func makeOperationSchedulesDeleteTriggerFromScheduleMultipleCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteTriggerFromScheduleMultiple",
		Short: ``,
		RunE:  runOperationSchedulesDeleteTriggerFromScheduleMultiple,
	}

	if err := registerOperationSchedulesDeleteTriggerFromScheduleMultipleParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationSchedulesDeleteTriggerFromScheduleMultiple uses cmd flags to call endpoint api
func runOperationSchedulesDeleteTriggerFromScheduleMultiple(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := schedules.NewDeleteTriggerFromScheduleMultipleParams()
	if err, _ = retrieveOperationSchedulesDeleteTriggerFromScheduleMultipleNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationSchedulesDeleteTriggerFromScheduleMultipleScheduleIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationSchedulesDeleteTriggerFromScheduleMultipleResult(appCli.Schedules.DeleteTriggerFromScheduleMultiple(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationSchedulesDeleteTriggerFromScheduleMultipleParamFlags registers all flags needed to fill params
func registerOperationSchedulesDeleteTriggerFromScheduleMultipleParamFlags(cmd *cobra.Command) error {
	if err := registerOperationSchedulesDeleteTriggerFromScheduleMultipleNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationSchedulesDeleteTriggerFromScheduleMultipleScheduleIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationSchedulesDeleteTriggerFromScheduleMultipleNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerOperationSchedulesDeleteTriggerFromScheduleMultipleScheduleIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	scheduleIdDescription := `Required. schedule id`

	var scheduleIdFlagName string
	if cmdPrefix == "" {
		scheduleIdFlagName = "scheduleId"
	} else {
		scheduleIdFlagName = fmt.Sprintf("%v.scheduleId", cmdPrefix)
	}

	var scheduleIdFlagDefault string

	_ = cmd.PersistentFlags().String(scheduleIdFlagName, scheduleIdFlagDefault, scheduleIdDescription)

	return nil
}

func retrieveOperationSchedulesDeleteTriggerFromScheduleMultipleNameFlag(m *schedules.DeleteTriggerFromScheduleMultipleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

	}

	return nil, retAdded
}

func retrieveOperationSchedulesDeleteTriggerFromScheduleMultipleScheduleIDFlag(m *schedules.DeleteTriggerFromScheduleMultipleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("scheduleId") {

		var scheduleIdFlagName string
		if cmdPrefix == "" {
			scheduleIdFlagName = "scheduleId"
		} else {
			scheduleIdFlagName = fmt.Sprintf("%v.scheduleId", cmdPrefix)
		}

		scheduleIdFlagValue, err := cmd.Flags().GetString(scheduleIdFlagName)
		if err != nil {
			return err, false
		}
		m.ScheduleID = scheduleIdFlagValue

	}

	return nil, retAdded
}

// parseOperationSchedulesDeleteTriggerFromScheduleMultipleResult parses request result and return the string content
func parseOperationSchedulesDeleteTriggerFromScheduleMultipleResult(resp0 *schedules.DeleteTriggerFromScheduleMultipleNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteTriggerFromScheduleMultipleNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*schedules.DeleteTriggerFromScheduleMultipleBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*schedules.DeleteTriggerFromScheduleMultipleUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*schedules.DeleteTriggerFromScheduleMultipleForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*schedules.DeleteTriggerFromScheduleMultipleNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*schedules.DeleteTriggerFromScheduleMultipleInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteTriggerFromScheduleMultipleNoContent is not supported by go-swagger cli yet.

	return "", nil
}
