// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PlanExecutable

// register flags to command
func registerModelPlanExecutableFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanExecutablePropExecutable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutablePropExecutionPlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutablePropRerunOnlyFailedTasks(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanExecutablePropStepID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanExecutablePropExecutable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executableDescription := `Required. Executable identifier`

	var executableFlagName string
	if cmdPrefix == "" {
		executableFlagName = "executable"
	} else {
		executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
	}

	var executableFlagDefault string

	_ = cmd.PersistentFlags().String(executableFlagName, executableFlagDefault, executableDescription)

	return nil
}

func registerPlanExecutablePropExecutionPlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionPlanIdDescription := `The plan execution identifier in case of re-execution (available from V2.4)`

	var executionPlanIdFlagName string
	if cmdPrefix == "" {
		executionPlanIdFlagName = "executionPlanId"
	} else {
		executionPlanIdFlagName = fmt.Sprintf("%v.executionPlanId", cmdPrefix)
	}

	var executionPlanIdFlagDefault string

	_ = cmd.PersistentFlags().String(executionPlanIdFlagName, executionPlanIdFlagDefault, executionPlanIdDescription)

	return nil
}

func registerPlanExecutablePropRerunOnlyFailedTasks(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rerunOnlyFailedTasksDescription := `Optionally run only failing tasks (available from V2.4)`

	var rerunOnlyFailedTasksFlagName string
	if cmdPrefix == "" {
		rerunOnlyFailedTasksFlagName = "rerunOnlyFailedTasks"
	} else {
		rerunOnlyFailedTasksFlagName = fmt.Sprintf("%v.rerunOnlyFailedTasks", cmdPrefix)
	}

	var rerunOnlyFailedTasksFlagDefault bool

	_ = cmd.PersistentFlags().Bool(rerunOnlyFailedTasksFlagName, rerunOnlyFailedTasksFlagDefault, rerunOnlyFailedTasksDescription)

	return nil
}

func registerPlanExecutablePropStepID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stepIdDescription := `The execution step identifier (executionStepId) from which restart plan execution (available from V2.4)`

	var stepIdFlagName string
	if cmdPrefix == "" {
		stepIdFlagName = "stepId"
	} else {
		stepIdFlagName = fmt.Sprintf("%v.stepId", cmdPrefix)
	}

	var stepIdFlagDefault string

	_ = cmd.PersistentFlags().String(stepIdFlagName, stepIdFlagDefault, stepIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanExecutableFlags(depth int, m *models.PlanExecutable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, executableAdded := retrievePlanExecutablePropExecutableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executableAdded

	err, executionPlanIdAdded := retrievePlanExecutablePropExecutionPlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionPlanIdAdded

	err, rerunOnlyFailedTasksAdded := retrievePlanExecutablePropRerunOnlyFailedTasksFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rerunOnlyFailedTasksAdded

	err, stepIdAdded := retrievePlanExecutablePropStepIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stepIdAdded

	return nil, retAdded
}

func retrievePlanExecutablePropExecutableFlags(depth int, m *models.PlanExecutable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executableFlagName := fmt.Sprintf("%v.executable", cmdPrefix)
	if cmd.Flags().Changed(executableFlagName) {

		var executableFlagName string
		if cmdPrefix == "" {
			executableFlagName = "executable"
		} else {
			executableFlagName = fmt.Sprintf("%v.executable", cmdPrefix)
		}

		executableFlagValue, err := cmd.Flags().GetString(executableFlagName)
		if err != nil {
			return err, false
		}
		m.Executable = &executableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutablePropExecutionPlanIDFlags(depth int, m *models.PlanExecutable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionPlanIdFlagName := fmt.Sprintf("%v.executionPlanId", cmdPrefix)
	if cmd.Flags().Changed(executionPlanIdFlagName) {

		var executionPlanIdFlagName string
		if cmdPrefix == "" {
			executionPlanIdFlagName = "executionPlanId"
		} else {
			executionPlanIdFlagName = fmt.Sprintf("%v.executionPlanId", cmdPrefix)
		}

		executionPlanIdFlagValue, err := cmd.Flags().GetString(executionPlanIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionPlanID = executionPlanIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutablePropRerunOnlyFailedTasksFlags(depth int, m *models.PlanExecutable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rerunOnlyFailedTasksFlagName := fmt.Sprintf("%v.rerunOnlyFailedTasks", cmdPrefix)
	if cmd.Flags().Changed(rerunOnlyFailedTasksFlagName) {

		var rerunOnlyFailedTasksFlagName string
		if cmdPrefix == "" {
			rerunOnlyFailedTasksFlagName = "rerunOnlyFailedTasks"
		} else {
			rerunOnlyFailedTasksFlagName = fmt.Sprintf("%v.rerunOnlyFailedTasks", cmdPrefix)
		}

		rerunOnlyFailedTasksFlagValue, err := cmd.Flags().GetBool(rerunOnlyFailedTasksFlagName)
		if err != nil {
			return err, false
		}
		m.RerunOnlyFailedTasks = rerunOnlyFailedTasksFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanExecutablePropStepIDFlags(depth int, m *models.PlanExecutable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stepIdFlagName := fmt.Sprintf("%v.stepId", cmdPrefix)
	if cmd.Flags().Changed(stepIdFlagName) {

		var stepIdFlagName string
		if cmdPrefix == "" {
			stepIdFlagName = "stepId"
		} else {
			stepIdFlagName = fmt.Sprintf("%v.stepId", cmdPrefix)
		}

		stepIdFlagValue, err := cmd.Flags().GetString(stepIdFlagName)
		if err != nil {
			return err, false
		}
		m.StepID = stepIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
