// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for PlanPauseDetails

// register flags to command
func registerModelPlanPauseDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlanPauseDetailsPropPause(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanPauseDetailsPropPauseContext(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanPauseDetailsPropPauseDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanPauseDetailsPropUser(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlanPauseDetailsPropUserType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlanPauseDetailsPropPause(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pauseDescription := ``

	var pauseFlagName string
	if cmdPrefix == "" {
		pauseFlagName = "pause"
	} else {
		pauseFlagName = fmt.Sprintf("%v.pause", cmdPrefix)
	}

	var pauseFlagDefault bool

	_ = cmd.PersistentFlags().Bool(pauseFlagName, pauseFlagDefault, pauseDescription)

	return nil
}

func registerPlanPauseDetailsPropPauseContext(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pauseContextDescription := ``

	var pauseContextFlagName string
	if cmdPrefix == "" {
		pauseContextFlagName = "pauseContext"
	} else {
		pauseContextFlagName = fmt.Sprintf("%v.pauseContext", cmdPrefix)
	}

	var pauseContextFlagDefault string

	_ = cmd.PersistentFlags().String(pauseContextFlagName, pauseContextFlagDefault, pauseContextDescription)

	return nil
}

func registerPlanPauseDetailsPropPauseDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pauseDateDescription := ``

	var pauseDateFlagName string
	if cmdPrefix == "" {
		pauseDateFlagName = "pauseDate"
	} else {
		pauseDateFlagName = fmt.Sprintf("%v.pauseDate", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(pauseDateFlagName, "", pauseDateDescription)

	return nil
}

func registerPlanPauseDetailsPropUser(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userDescription := ``

	var userFlagName string
	if cmdPrefix == "" {
		userFlagName = "user"
	} else {
		userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
	}

	var userFlagDefault string

	_ = cmd.PersistentFlags().String(userFlagName, userFlagDefault, userDescription)

	return nil
}

func registerPlanPauseDetailsPropUserType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userTypeDescription := `Enum: ["HUMAN","SERVICE"]. `

	var userTypeFlagName string
	if cmdPrefix == "" {
		userTypeFlagName = "userType"
	} else {
		userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
	}

	var userTypeFlagDefault string

	_ = cmd.PersistentFlags().String(userTypeFlagName, userTypeFlagDefault, userTypeDescription)

	if err := cmd.RegisterFlagCompletionFunc(userTypeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["HUMAN","SERVICE"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlanPauseDetailsFlags(depth int, m *models.PlanPauseDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, pauseAdded := retrievePlanPauseDetailsPropPauseFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pauseAdded

	err, pauseContextAdded := retrievePlanPauseDetailsPropPauseContextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pauseContextAdded

	err, pauseDateAdded := retrievePlanPauseDetailsPropPauseDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pauseDateAdded

	err, userAdded := retrievePlanPauseDetailsPropUserFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userAdded

	err, userTypeAdded := retrievePlanPauseDetailsPropUserTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userTypeAdded

	return nil, retAdded
}

func retrievePlanPauseDetailsPropPauseFlags(depth int, m *models.PlanPauseDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pauseFlagName := fmt.Sprintf("%v.pause", cmdPrefix)
	if cmd.Flags().Changed(pauseFlagName) {

		var pauseFlagName string
		if cmdPrefix == "" {
			pauseFlagName = "pause"
		} else {
			pauseFlagName = fmt.Sprintf("%v.pause", cmdPrefix)
		}

		pauseFlagValue, err := cmd.Flags().GetBool(pauseFlagName)
		if err != nil {
			return err, false
		}
		m.Pause = pauseFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanPauseDetailsPropPauseContextFlags(depth int, m *models.PlanPauseDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pauseContextFlagName := fmt.Sprintf("%v.pauseContext", cmdPrefix)
	if cmd.Flags().Changed(pauseContextFlagName) {

		var pauseContextFlagName string
		if cmdPrefix == "" {
			pauseContextFlagName = "pauseContext"
		} else {
			pauseContextFlagName = fmt.Sprintf("%v.pauseContext", cmdPrefix)
		}

		pauseContextFlagValue, err := cmd.Flags().GetString(pauseContextFlagName)
		if err != nil {
			return err, false
		}
		m.PauseContext = pauseContextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanPauseDetailsPropPauseDateFlags(depth int, m *models.PlanPauseDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pauseDateFlagName := fmt.Sprintf("%v.pauseDate", cmdPrefix)
	if cmd.Flags().Changed(pauseDateFlagName) {

		var pauseDateFlagName string
		if cmdPrefix == "" {
			pauseDateFlagName = "pauseDate"
		} else {
			pauseDateFlagName = fmt.Sprintf("%v.pauseDate", cmdPrefix)
		}

		pauseDateFlagValueStr, err := cmd.Flags().GetString(pauseDateFlagName)
		if err != nil {
			return err, false
		}
		var pauseDateFlagValue strfmt.DateTime
		if err := pauseDateFlagValue.UnmarshalText([]byte(pauseDateFlagValueStr)); err != nil {
			return err, false
		}
		m.PauseDate = pauseDateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanPauseDetailsPropUserFlags(depth int, m *models.PlanPauseDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userFlagName := fmt.Sprintf("%v.user", cmdPrefix)
	if cmd.Flags().Changed(userFlagName) {

		var userFlagName string
		if cmdPrefix == "" {
			userFlagName = "user"
		} else {
			userFlagName = fmt.Sprintf("%v.user", cmdPrefix)
		}

		userFlagValue, err := cmd.Flags().GetString(userFlagName)
		if err != nil {
			return err, false
		}
		m.User = userFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlanPauseDetailsPropUserTypeFlags(depth int, m *models.PlanPauseDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userTypeFlagName := fmt.Sprintf("%v.userType", cmdPrefix)
	if cmd.Flags().Changed(userTypeFlagName) {

		var userTypeFlagName string
		if cmdPrefix == "" {
			userTypeFlagName = "userType"
		} else {
			userTypeFlagName = fmt.Sprintf("%v.userType", cmdPrefix)
		}

		userTypeFlagValue, err := cmd.Flags().GetString(userTypeFlagName)
		if err != nil {
			return err, false
		}
		m.UserType = userTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
