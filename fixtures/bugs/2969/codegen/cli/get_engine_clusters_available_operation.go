// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/runtime_clusters"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRuntimeClustersGetEngineClustersAvailableCmd returns a command to handle operation getEngineClustersAvailable
func makeOperationRuntimeClustersGetEngineClustersAvailableCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getEngineClustersAvailable",
		Short: `Get all (available) Remote Engine Clusters`,
		RunE:  runOperationRuntimeClustersGetEngineClustersAvailable,
	}

	if err := registerOperationRuntimeClustersGetEngineClustersAvailableParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRuntimeClustersGetEngineClustersAvailable uses cmd flags to call endpoint api
func runOperationRuntimeClustersGetEngineClustersAvailable(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := runtime_clusters.NewGetEngineClustersAvailableParams()
	if err, _ = retrieveOperationRuntimeClustersGetEngineClustersAvailableSFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRuntimeClustersGetEngineClustersAvailableResult(appCli.RuntimeClusters.GetEngineClustersAvailable(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationRuntimeClustersGetEngineClustersAvailableParamFlags registers all flags needed to fill params
func registerOperationRuntimeClustersGetEngineClustersAvailableParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRuntimeClustersGetEngineClustersAvailableSParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRuntimeClustersGetEngineClustersAvailableSParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sDescription := `search query (FIQL format), e.g. "workspace.environment.id==5cb47ca4b1b5247f6006529e","name==NewCluster"`

	var sFlagName string
	if cmdPrefix == "" {
		sFlagName = "_s"
	} else {
		sFlagName = fmt.Sprintf("%v._s", cmdPrefix)
	}

	var sFlagDefault string

	_ = cmd.PersistentFlags().String(sFlagName, sFlagDefault, sDescription)

	return nil
}

func retrieveOperationRuntimeClustersGetEngineClustersAvailableSFlag(m *runtime_clusters.GetEngineClustersAvailableParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("_s") {

		var sFlagName string
		if cmdPrefix == "" {
			sFlagName = "_s"
		} else {
			sFlagName = fmt.Sprintf("%v._s", cmdPrefix)
		}

		sFlagValue, err := cmd.Flags().GetString(sFlagName)
		if err != nil {
			return err, false
		}
		m.S = &sFlagValue

	}

	return nil, retAdded
}

// parseOperationRuntimeClustersGetEngineClustersAvailableResult parses request result and return the string content
func parseOperationRuntimeClustersGetEngineClustersAvailableResult(resp0 *runtime_clusters.GetEngineClustersAvailableOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*runtime_clusters.GetEngineClustersAvailableOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*runtime_clusters.GetEngineClustersAvailableUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*runtime_clusters.GetEngineClustersAvailableForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*runtime_clusters.GetEngineClustersAvailableInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
