// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for Step

// register flags to command
func registerModelStepFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStepPropCondition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepPropHandlerOnFailure(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepPropNote(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStepPropTaskIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStepPropCondition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	conditionDescription := `Enum: ["ALL_SUCCEEDED","AT_LEAST_ONE_SUCCEEDED"]. Required. Expected status of successful step`

	var conditionFlagName string
	if cmdPrefix == "" {
		conditionFlagName = "condition"
	} else {
		conditionFlagName = fmt.Sprintf("%v.condition", cmdPrefix)
	}

	var conditionFlagDefault string

	_ = cmd.PersistentFlags().String(conditionFlagName, conditionFlagDefault, conditionDescription)

	if err := cmd.RegisterFlagCompletionFunc(conditionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["ALL_SUCCEEDED","AT_LEAST_ONE_SUCCEEDED"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

func registerStepPropHandlerOnFailure(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var handlerOnFailureFlagName string
	if cmdPrefix == "" {
		handlerOnFailureFlagName = "handlerOnFailure"
	} else {
		handlerOnFailureFlagName = fmt.Sprintf("%v.handlerOnFailure", cmdPrefix)
	}

	if err := registerModelStepErrorHandlerFlags(depth+1, handlerOnFailureFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerStepPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Step id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerStepPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. Step name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerStepPropNote(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	noteDescription := `Description to rerun a plan execution from this step`

	var noteFlagName string
	if cmdPrefix == "" {
		noteFlagName = "note"
	} else {
		noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
	}

	var noteFlagDefault string

	_ = cmd.PersistentFlags().String(noteFlagName, noteFlagDefault, noteDescription)

	return nil
}

func registerStepPropTaskIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: taskIds []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStepFlags(depth int, m *models.Step, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, conditionAdded := retrieveStepPropConditionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || conditionAdded

	err, handlerOnFailureAdded := retrieveStepPropHandlerOnFailureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || handlerOnFailureAdded

	err, idAdded := retrieveStepPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveStepPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, noteAdded := retrieveStepPropNoteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || noteAdded

	err, taskIdsAdded := retrieveStepPropTaskIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taskIdsAdded

	return nil, retAdded
}

func retrieveStepPropConditionFlags(depth int, m *models.Step, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	conditionFlagName := fmt.Sprintf("%v.condition", cmdPrefix)
	if cmd.Flags().Changed(conditionFlagName) {

		var conditionFlagName string
		if cmdPrefix == "" {
			conditionFlagName = "condition"
		} else {
			conditionFlagName = fmt.Sprintf("%v.condition", cmdPrefix)
		}

		conditionFlagValue, err := cmd.Flags().GetString(conditionFlagName)
		if err != nil {
			return err, false
		}
		m.Condition = &conditionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepPropHandlerOnFailureFlags(depth int, m *models.Step, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	handlerOnFailureFlagName := fmt.Sprintf("%v.handlerOnFailure", cmdPrefix)
	if cmd.Flags().Changed(handlerOnFailureFlagName) {
		// info: complex object handlerOnFailure StepErrorHandler is retrieved outside this Changed() block
	}
	handlerOnFailureFlagValue := m.HandlerOnFailure
	if swag.IsZero(handlerOnFailureFlagValue) {
		handlerOnFailureFlagValue = &models.StepErrorHandler{}
	}

	err, handlerOnFailureAdded := retrieveModelStepErrorHandlerFlags(depth+1, handlerOnFailureFlagValue, handlerOnFailureFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || handlerOnFailureAdded
	if handlerOnFailureAdded {
		m.HandlerOnFailure = handlerOnFailureFlagValue
	}

	return nil, retAdded
}

func retrieveStepPropIDFlags(depth int, m *models.Step, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepPropNameFlags(depth int, m *models.Step, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepPropNoteFlags(depth int, m *models.Step, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	noteFlagName := fmt.Sprintf("%v.note", cmdPrefix)
	if cmd.Flags().Changed(noteFlagName) {

		var noteFlagName string
		if cmdPrefix == "" {
			noteFlagName = "note"
		} else {
			noteFlagName = fmt.Sprintf("%v.note", cmdPrefix)
		}

		noteFlagValue, err := cmd.Flags().GetString(noteFlagName)
		if err != nil {
			return err, false
		}
		m.Note = noteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStepPropTaskIdsFlags(depth int, m *models.Step, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taskIdsFlagName := fmt.Sprintf("%v.taskIds", cmdPrefix)
	if cmd.Flags().Changed(taskIdsFlagName) {
		// warning: taskIds array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
