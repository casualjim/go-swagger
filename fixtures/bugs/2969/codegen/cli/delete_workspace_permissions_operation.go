// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/workspaces_permissions"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationWorkspacesPermissionsDeleteWorkspacePermissionsCmd returns a command to handle operation deleteWorkspacePermissions
func makeOperationWorkspacesPermissionsDeleteWorkspacePermissionsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteWorkspacePermissions",
		Short: `Delete a permission of a user on a workspace.`,
		RunE:  runOperationWorkspacesPermissionsDeleteWorkspacePermissions,
	}

	if err := registerOperationWorkspacesPermissionsDeleteWorkspacePermissionsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWorkspacesPermissionsDeleteWorkspacePermissions uses cmd flags to call endpoint api
func runOperationWorkspacesPermissionsDeleteWorkspacePermissions(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := workspaces_permissions.NewDeleteWorkspacePermissionsParams()
	if err, _ = retrieveOperationWorkspacesPermissionsDeleteWorkspacePermissionsUserIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationWorkspacesPermissionsDeleteWorkspacePermissionsWorkspaceIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWorkspacesPermissionsDeleteWorkspacePermissionsResult(appCli.WorkspacesPermissions.DeleteWorkspacePermissions(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationWorkspacesPermissionsDeleteWorkspacePermissionsParamFlags registers all flags needed to fill params
func registerOperationWorkspacesPermissionsDeleteWorkspacePermissionsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWorkspacesPermissionsDeleteWorkspacePermissionsUserIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWorkspacesPermissionsDeleteWorkspacePermissionsWorkspaceIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWorkspacesPermissionsDeleteWorkspacePermissionsUserIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	userIdDescription := `Required. The user for which rights will be applied. Example Value: b9e10a3f-9d68-44bb-862f-b2aa56dc7191`

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "userId"
	} else {
		userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
	}

	var userIdFlagDefault string

	_ = cmd.PersistentFlags().String(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

func registerOperationWorkspacesPermissionsDeleteWorkspacePermissionsWorkspaceIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	workspaceIdDescription := `Required. The workspace where rights will be applied. Example Value: 6089228181ef4423736e47a9`

	var workspaceIdFlagName string
	if cmdPrefix == "" {
		workspaceIdFlagName = "workspaceId"
	} else {
		workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
	}

	var workspaceIdFlagDefault string

	_ = cmd.PersistentFlags().String(workspaceIdFlagName, workspaceIdFlagDefault, workspaceIdDescription)

	return nil
}

func retrieveOperationWorkspacesPermissionsDeleteWorkspacePermissionsUserIDFlag(m *workspaces_permissions.DeleteWorkspacePermissionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("userId") {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "userId"
		} else {
			userIdFlagName = fmt.Sprintf("%v.userId", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetString(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = userIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationWorkspacesPermissionsDeleteWorkspacePermissionsWorkspaceIDFlag(m *workspaces_permissions.DeleteWorkspacePermissionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("workspaceId") {

		var workspaceIdFlagName string
		if cmdPrefix == "" {
			workspaceIdFlagName = "workspaceId"
		} else {
			workspaceIdFlagName = fmt.Sprintf("%v.workspaceId", cmdPrefix)
		}

		workspaceIdFlagValue, err := cmd.Flags().GetString(workspaceIdFlagName)
		if err != nil {
			return err, false
		}
		m.WorkspaceID = workspaceIdFlagValue

	}

	return nil, retAdded
}

// parseOperationWorkspacesPermissionsDeleteWorkspacePermissionsResult parses request result and return the string content
func parseOperationWorkspacesPermissionsDeleteWorkspacePermissionsResult(resp0 *workspaces_permissions.DeleteWorkspacePermissionsNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteWorkspacePermissionsNoContent is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*workspaces_permissions.DeleteWorkspacePermissionsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*workspaces_permissions.DeleteWorkspacePermissionsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*workspaces_permissions.DeleteWorkspacePermissionsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*workspaces_permissions.DeleteWorkspacePermissionsNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*workspaces_permissions.DeleteWorkspacePermissionsInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteWorkspacePermissionsNoContent is not supported by go-swagger cli yet.

	return "", nil
}
