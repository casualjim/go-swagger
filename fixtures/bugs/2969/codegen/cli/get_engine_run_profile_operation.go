// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/runtime_engines_run_profiles"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRuntimeEnginesRunProfilesGetEngineRunProfileCmd returns a command to handle operation getEngineRunProfile
func makeOperationRuntimeEnginesRunProfilesGetEngineRunProfileCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getEngineRunProfile",
		Short: `Get engine run profile by id`,
		RunE:  runOperationRuntimeEnginesRunProfilesGetEngineRunProfile,
	}

	if err := registerOperationRuntimeEnginesRunProfilesGetEngineRunProfileParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRuntimeEnginesRunProfilesGetEngineRunProfile uses cmd flags to call endpoint api
func runOperationRuntimeEnginesRunProfilesGetEngineRunProfile(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := runtime_engines_run_profiles.NewGetEngineRunProfileParams()
	if err, _ = retrieveOperationRuntimeEnginesRunProfilesGetEngineRunProfileEngineIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationRuntimeEnginesRunProfilesGetEngineRunProfileRunProfileIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRuntimeEnginesRunProfilesGetEngineRunProfileResult(appCli.RuntimeEnginesRunProfiles.GetEngineRunProfile(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationRuntimeEnginesRunProfilesGetEngineRunProfileParamFlags registers all flags needed to fill params
func registerOperationRuntimeEnginesRunProfilesGetEngineRunProfileParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRuntimeEnginesRunProfilesGetEngineRunProfileEngineIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRuntimeEnginesRunProfilesGetEngineRunProfileRunProfileIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRuntimeEnginesRunProfilesGetEngineRunProfileEngineIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	engineIdDescription := `Required. remote engine id`

	var engineIdFlagName string
	if cmdPrefix == "" {
		engineIdFlagName = "engineId"
	} else {
		engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
	}

	var engineIdFlagDefault string

	_ = cmd.PersistentFlags().String(engineIdFlagName, engineIdFlagDefault, engineIdDescription)

	return nil
}

func registerOperationRuntimeEnginesRunProfilesGetEngineRunProfileRunProfileIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	runProfileIdDescription := `Required. run profile id`

	var runProfileIdFlagName string
	if cmdPrefix == "" {
		runProfileIdFlagName = "runProfileId"
	} else {
		runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
	}

	var runProfileIdFlagDefault string

	_ = cmd.PersistentFlags().String(runProfileIdFlagName, runProfileIdFlagDefault, runProfileIdDescription)

	return nil
}

func retrieveOperationRuntimeEnginesRunProfilesGetEngineRunProfileEngineIDFlag(m *runtime_engines_run_profiles.GetEngineRunProfileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("engineId") {

		var engineIdFlagName string
		if cmdPrefix == "" {
			engineIdFlagName = "engineId"
		} else {
			engineIdFlagName = fmt.Sprintf("%v.engineId", cmdPrefix)
		}

		engineIdFlagValue, err := cmd.Flags().GetString(engineIdFlagName)
		if err != nil {
			return err, false
		}
		m.EngineID = engineIdFlagValue

	}

	return nil, retAdded
}

func retrieveOperationRuntimeEnginesRunProfilesGetEngineRunProfileRunProfileIDFlag(m *runtime_engines_run_profiles.GetEngineRunProfileParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("runProfileId") {

		var runProfileIdFlagName string
		if cmdPrefix == "" {
			runProfileIdFlagName = "runProfileId"
		} else {
			runProfileIdFlagName = fmt.Sprintf("%v.runProfileId", cmdPrefix)
		}

		runProfileIdFlagValue, err := cmd.Flags().GetString(runProfileIdFlagName)
		if err != nil {
			return err, false
		}
		m.RunProfileID = runProfileIdFlagValue

	}

	return nil, retAdded
}

// parseOperationRuntimeEnginesRunProfilesGetEngineRunProfileResult parses request result and return the string content
func parseOperationRuntimeEnginesRunProfilesGetEngineRunProfileResult(resp0 *runtime_engines_run_profiles.GetEngineRunProfileOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*runtime_engines_run_profiles.GetEngineRunProfileOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*runtime_engines_run_profiles.GetEngineRunProfileForbidden)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*runtime_engines_run_profiles.GetEngineRunProfileNotFound)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
