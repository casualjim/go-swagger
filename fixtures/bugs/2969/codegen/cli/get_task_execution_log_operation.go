// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/client/executions_logs"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationExecutionsLogsGetTaskExecutionLogCmd returns a command to handle operation getTaskExecutionLog
func makeOperationExecutionsLogsGetTaskExecutionLogCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getTaskExecutionLog",
		Short: `Get Task execution logs`,
		RunE:  runOperationExecutionsLogsGetTaskExecutionLog,
	}

	if err := registerOperationExecutionsLogsGetTaskExecutionLogParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationExecutionsLogsGetTaskExecutionLog uses cmd flags to call endpoint api
func runOperationExecutionsLogsGetTaskExecutionLog(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := executions_logs.NewGetTaskExecutionLogParams()
	if err, _ = retrieveOperationExecutionsLogsGetTaskExecutionLogCountFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGetTaskExecutionLogEndTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGetTaskExecutionLogIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGetTaskExecutionLogOrderFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGetTaskExecutionLogStartIndexFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ = retrieveOperationExecutionsLogsGetTaskExecutionLogStartTimeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationExecutionsLogsGetTaskExecutionLogResult(appCli.ExecutionsLogs.GetTaskExecutionLog(params, nil))
	if err != nil {
		return err
	}

	if !debug {
		fmt.Println(msgStr)
	}

	return nil
}

// registerOperationExecutionsLogsGetTaskExecutionLogParamFlags registers all flags needed to fill params
func registerOperationExecutionsLogsGetTaskExecutionLogParamFlags(cmd *cobra.Command) error {
	if err := registerOperationExecutionsLogsGetTaskExecutionLogCountParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGetTaskExecutionLogEndTimeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGetTaskExecutionLogIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGetTaskExecutionLogOrderParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGetTaskExecutionLogStartIndexParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationExecutionsLogsGetTaskExecutionLogStartTimeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationExecutionsLogsGetTaskExecutionLogCountParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	countDescription := `Number of log messages, default value is equal to 50, the maximum value is equal to 200`

	var countFlagName string
	if cmdPrefix == "" {
		countFlagName = "count"
	} else {
		countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
	}

	var countFlagDefault int32 = 50

	_ = cmd.PersistentFlags().Int32(countFlagName, countFlagDefault, countDescription)

	return nil
}

func registerOperationExecutionsLogsGetTaskExecutionLogEndTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	endTimeDescription := `Latest log date and time, default value is set to the current time when the request is received. Floored to minute unit. Example: 2021-06-14T15:04:45Z`

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "endTime"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.endTime", cmdPrefix)
	}

	var endTimeFlagDefault string

	_ = cmd.PersistentFlags().String(endTimeFlagName, endTimeFlagDefault, endTimeDescription)

	return nil
}

func registerOperationExecutionsLogsGetTaskExecutionLogIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. ID of Task Execution`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerOperationExecutionsLogsGetTaskExecutionLogOrderParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	orderDescription := `Sort order (ASC, DESC) for logs by logTimestamp, default is DESC : last logs are first.`

	var orderFlagName string
	if cmdPrefix == "" {
		orderFlagName = "order"
	} else {
		orderFlagName = fmt.Sprintf("%v.order", cmdPrefix)
	}

	var orderFlagDefault string = "DESC"

	_ = cmd.PersistentFlags().String(orderFlagName, orderFlagDefault, orderDescription)

	return nil
}

func registerOperationExecutionsLogsGetTaskExecutionLogStartIndexParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	startIndexDescription := `Index for pagination to start with, default value is set to 0`

	var startIndexFlagName string
	if cmdPrefix == "" {
		startIndexFlagName = "startIndex"
	} else {
		startIndexFlagName = fmt.Sprintf("%v.startIndex", cmdPrefix)
	}

	var startIndexFlagDefault int32

	_ = cmd.PersistentFlags().Int32(startIndexFlagName, startIndexFlagDefault, startIndexDescription)

	return nil
}

func registerOperationExecutionsLogsGetTaskExecutionLogStartTimeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	startTimeDescription := `Earliest log date and time, default value is set to the start time of the execution. Floored to minute unit. Example: 2021-06-14T07:01:45Z`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "startTime"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
	}

	var startTimeFlagDefault string

	_ = cmd.PersistentFlags().String(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func retrieveOperationExecutionsLogsGetTaskExecutionLogCountFlag(m *executions_logs.GetTaskExecutionLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("count") {

		var countFlagName string
		if cmdPrefix == "" {
			countFlagName = "count"
		} else {
			countFlagName = fmt.Sprintf("%v.count", cmdPrefix)
		}

		countFlagValue, err := cmd.Flags().GetInt32(countFlagName)
		if err != nil {
			return err, false
		}
		m.Count = &countFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGetTaskExecutionLogEndTimeFlag(m *executions_logs.GetTaskExecutionLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endTime") {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "endTime"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.endTime", cmdPrefix)
		}

		endTimeFlagValue, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		m.EndTime = &endTimeFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGetTaskExecutionLogIDFlag(m *executions_logs.GetTaskExecutionLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGetTaskExecutionLogOrderFlag(m *executions_logs.GetTaskExecutionLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("order") {

		var orderFlagName string
		if cmdPrefix == "" {
			orderFlagName = "order"
		} else {
			orderFlagName = fmt.Sprintf("%v.order", cmdPrefix)
		}

		orderFlagValue, err := cmd.Flags().GetString(orderFlagName)
		if err != nil {
			return err, false
		}
		m.Order = &orderFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGetTaskExecutionLogStartIndexFlag(m *executions_logs.GetTaskExecutionLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("startIndex") {

		var startIndexFlagName string
		if cmdPrefix == "" {
			startIndexFlagName = "startIndex"
		} else {
			startIndexFlagName = fmt.Sprintf("%v.startIndex", cmdPrefix)
		}

		startIndexFlagValue, err := cmd.Flags().GetInt32(startIndexFlagName)
		if err != nil {
			return err, false
		}
		m.StartIndex = &startIndexFlagValue

	}

	return nil, retAdded
}

func retrieveOperationExecutionsLogsGetTaskExecutionLogStartTimeFlag(m *executions_logs.GetTaskExecutionLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("startTime") {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "startTime"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.startTime", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = &startTimeFlagValue

	}

	return nil, retAdded
}

// parseOperationExecutionsLogsGetTaskExecutionLogResult parses request result and return the string content
func parseOperationExecutionsLogsGetTaskExecutionLogResult(resp0 *executions_logs.GetTaskExecutionLogOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*executions_logs.GetTaskExecutionLogOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*executions_logs.GetTaskExecutionLogBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*executions_logs.GetTaskExecutionLogUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*executions_logs.GetTaskExecutionLogForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*executions_logs.GetTaskExecutionLogNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*executions_logs.GetTaskExecutionLogInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
