// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/go-swagger/go-swagger/fixtures/bugs/2969/codegen/models"
	"github.com/spf13/cobra"
)

// Schema cli for Message

// register flags to command
func registerModelMessageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMessagePropInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMessagePropLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMessagePropInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	infoDescription := ``

	var infoFlagName string
	if cmdPrefix == "" {
		infoFlagName = "info"
	} else {
		infoFlagName = fmt.Sprintf("%v.info", cmdPrefix)
	}

	var infoFlagDefault string

	_ = cmd.PersistentFlags().String(infoFlagName, infoFlagDefault, infoDescription)

	return nil
}

func registerMessagePropLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	levelDescription := `Enum: ["INFO","WARN","ERROR"]. `

	var levelFlagName string
	if cmdPrefix == "" {
		levelFlagName = "level"
	} else {
		levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
	}

	var levelFlagDefault string

	_ = cmd.PersistentFlags().String(levelFlagName, levelFlagDefault, levelDescription)

	if err := cmd.RegisterFlagCompletionFunc(levelFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["INFO","WARN","ERROR"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMessageFlags(depth int, m *models.Message, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, infoAdded := retrieveMessagePropInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || infoAdded

	err, levelAdded := retrieveMessagePropLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || levelAdded

	return nil, retAdded
}

func retrieveMessagePropInfoFlags(depth int, m *models.Message, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	infoFlagName := fmt.Sprintf("%v.info", cmdPrefix)
	if cmd.Flags().Changed(infoFlagName) {

		var infoFlagName string
		if cmdPrefix == "" {
			infoFlagName = "info"
		} else {
			infoFlagName = fmt.Sprintf("%v.info", cmdPrefix)
		}

		infoFlagValue, err := cmd.Flags().GetString(infoFlagName)
		if err != nil {
			return err, false
		}
		m.Info = infoFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMessagePropLevelFlags(depth int, m *models.Message, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	levelFlagName := fmt.Sprintf("%v.level", cmdPrefix)
	if cmd.Flags().Changed(levelFlagName) {

		var levelFlagName string
		if cmdPrefix == "" {
			levelFlagName = "level"
		} else {
			levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
		}

		levelFlagValue, err := cmd.Flags().GetString(levelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = levelFlagValue

		retAdded = true
	}

	return nil, retAdded
}
