name: Run CI

env:
  GOCOVMODE: atomic

on:
  push:
    tags:
      - v*
    branches:
      - master

  pull_request:

permissions:
  contents: write
  pull-requests: read

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: stable
          check-latest: true
          cache: true
      - name: golangci-lint
        uses: golangci/golangci-lint-action@3a919529898de77ec3da873e3063ca4b10e7f5cc # v3.7.0
        with:
          args: --verbose
          only-new-issues: true
          skip-cache: true
          version: latest

  test:
    needs: [lint]
    strategy:
      matrix:
        go: ['1.19','oldstable','stable']
        os: [ubuntu-latest] # TODO: add macos-latest and windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Install Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true

      - name: Install Tools
        run: |
          go install gotest.tools/gotestsum@latest

      - name: Build binary
        run: ./hack/build-docker.sh --github-action

      - name: Run unit tests with code coverage
        run: gotestsum --junitfile "./go-test-report-${{ matrix.os }}-${{ matrix.go }}.xml" -- -p 1 -timeout=20m -coverprofile="coverage-${{ matrix.os }}-${{ matrix.go }}.txt" -covermode=atomic ./...

      - name: Publish To Codecov
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
        with:
          files: './go-test-report-${{ matrix.os }}-${{ matrix.go }}.xml'
          flags: '${{ matrix.go }}'
          os: '${{ matrix.os }}'
          fail_ci_if_error: true
          verbose: true

  sanity_check:
    needs: [lint]
    strategy:
      matrix:
        go: ['1.19','oldstable','stable']
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Install Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true

      - name: Install Tools
        run: |
          go install gotest.tools/gotestsum@latest
          go install ./cmd/swagger

      - name: Run validation tests
        run: |
          swagger validate fixtures/bugs/2493/fixture-2492.json
          swagger validate fixtures/bugs/2493/fixture-2493.json
          swagger validate fixtures/bugs/2493/fixture-2492.yaml
          swagger validate fixtures/bugs/2493/fixture-2493.yaml

      - name: Run unit tests
        run: go test -v -timeout 20m ./...

  codegen_test:
    needs: [lint]
    strategy:
      matrix:
        go: ['1.19','stable']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Install Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true

      - name: Install Tools
        run: |
          go install gotest.tools/gotestsum@latest
          go get gotest.tools/icmd@latest

      - name: Build binary
        run: ./hack/build-docker.sh --github-action

      - name: Run codegen tests
        run: go test -v -timeout 30m -parallel 3 hack/codegen_nonreg_test.go -args -fixture-file codegen-fixtures.yaml -skip-models -skip-full-flatten

  canary_test:
    needs: [lint]
    strategy:
      matrix:
        go: ['1.19','stable']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Install Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: true

      - name: Install Tools
        run: |
          go install gotest.tools/gotestsum@latest
          go get gotest.tools/icmd@latest

      - name: Build binary
        run: ./hack/build-docker.sh --github-action

      - name: Run canary tests
        run: go test -v -timeout 30m hack/codegen_nonreg_test.go -args -fixture-file canary-fixtures.yaml -skip-models -skip-full-flatten -skip-expand

  docker_dev:
    needs: [lint, test, sanity_check, codegen_test, canary_test]
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4.6.0
        with:
          images: |
            quay.io/goswagger/swagger
            ghcr.io/go-swagger/go-swagger
          tags: |
            type=ref,event=branch
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0

      - name: Login to Quay Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASS }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3.3.1
        with:
          context: .
          build-args: |
            commit_hash=${{ github.sha }}
            tag_name=dev
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}

  publish_release:
    needs: [lint, test, sanity_check, codegen_test, canary_test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Install Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: 'stable'
          check-latest: true
          cache: true

      - name: Install Tools
        run: |
          go install github.com/aktau/github-release@latest
          go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest

      - name: Build release
        run: |
          set -x
          rm -rf dist
          mkdir -p dist/bin
          mkdir -p dist/build

          build_binary() {
            LDFLAGS="-s -w -X github.com/$GITHUB_REPOSITORY/cmd/swagger/commands.Commit=${GITHUB_SHA}"
            LDFLAGS="$LDFLAGS -X github.com/$GITHUB_REPOSITORY/cmd/swagger/commands.Version=${GITHUB_REF_NAME-dev}"
            out="swagger_$1_$2"
            if [[ $1 == "windows" ]]; then
              out="${out}.exe"
            fi
            GOOS=$1 GOARCH=$2 CGO_ENABLED=0 go build -ldflags "$LDFLAGS" -o "./dist/bin/$out" ./cmd/swagger
          }

          go mod download

          build_binary linux amd64
          build_binary linux arm64
          build_binary linux arm
          build_binary linux ppc64le
          build_binary darwin amd64
          build_binary darwin arm64
          build_binary windows amd64
          build_binary windows arm64

          nfpm p -p deb -t dist/build
          nfpm p -p rpm -t dist/build

          pushd dist/bin || exit 1
          sha1sum * > sha1sum.txt
          sha256sum * > sha256sum.txt
          popd || exit 1

      - name: Push RPM
        id: push_rpm
        uses: cloudsmith-io/action@fc70bf3268051bdf07305c56fd2ace32c3fc8348 # master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "rpm"
          owner: "go-swagger"
          repo: "go-swagger"
          distro: "fedora"
          release: "any-version"
          file: "dist/build/swagger-*.x86_64.rpm"

      - name: Push Deb
        id: push
        uses: cloudsmith-io/action@fc70bf3268051bdf07305c56fd2ace32c3fc8348 # master
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "deb"
          owner: "go-swagger"
          repo: "go-swagger"
          distro: "debian"
          release: "any-version"
          file: "dist/build/swagger_*_amd64.deb"

      - name: Publish Binaries
        uses: fnkr/github-action-ghr@2fcb5ab637a49c14f4b3e7d81d0389d059171d35 # v1
        env:
          GHR_PATH: dist/bin/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: [lint, test, sanity_check, codegen_test, canary_test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4.6.0
        with:
          # list of Docker images to use as base name for tags
          images: |
            quay.io/goswagger/swagger
            ghcr.io/go-swagger/go-swagger
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2.10.0

      - name: Login to Quay Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASS }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3.3.1
        with:
          context: .
          build-args: |
            commit_hash=${{ github.sha }}
            tag_name=${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
